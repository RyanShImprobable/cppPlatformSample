// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/improbable/protoc-gen-gocli/cli.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_github_2ecom_2fimprobable_2fprotoc_2dgen_2dgocli_2fcli_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_github_2ecom_2fimprobable_2fprotoc_2dgen_2dgocli_2fcli_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fimprobable_2fprotoc_2dgen_2dgocli_2fcli_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_github_2ecom_2fimprobable_2fprotoc_2dgen_2dgocli_2fcli_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_github_2ecom_2fimprobable_2fprotoc_2dgen_2dgocli_2fcli_2eproto;
namespace cli {
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Flag;
class FlagDefaultTypeInternal;
extern FlagDefaultTypeInternal _Flag_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace cli
PROTOBUF_NAMESPACE_OPEN
template<> ::cli::Command* Arena::CreateMaybeMessage<::cli::Command>(Arena*);
template<> ::cli::Flag* Arena::CreateMaybeMessage<::cli::Flag>(Arena*);
template<> ::cli::Request* Arena::CreateMaybeMessage<::cli::Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cli {

// ===================================================================

class Command PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cli.Command) */ {
 public:
  inline Command() : Command(nullptr) {};
  virtual ~Command();

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cli.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fimprobable_2fprotoc_2dgen_2dgocli_2fcli_2eproto);
    return ::descriptor_table_github_2ecom_2fimprobable_2fprotoc_2dgen_2dgocli_2fcli_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseFieldNumber = 1,
    kShortFieldNumber = 2,
    kLongFieldNumber = 3,
    kExampleFieldNumber = 4,
    kDeprecatedFieldNumber = 5,
    kHiddenFieldNumber = 6,
  };
  // string use = 1;
  void clear_use();
  const std::string& use() const;
  void set_use(const std::string& value);
  void set_use(std::string&& value);
  void set_use(const char* value);
  void set_use(const char* value, size_t size);
  std::string* mutable_use();
  std::string* release_use();
  void set_allocated_use(std::string* use);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_use();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_use(
      std::string* use);
  private:
  const std::string& _internal_use() const;
  void _internal_set_use(const std::string& value);
  std::string* _internal_mutable_use();
  public:

  // string short = 2;
  void clear_short_();
  const std::string& short_() const;
  void set_short_(const std::string& value);
  void set_short_(std::string&& value);
  void set_short_(const char* value);
  void set_short_(const char* value, size_t size);
  std::string* mutable_short_();
  std::string* release_short_();
  void set_allocated_short_(std::string* short_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_short_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_short_(
      std::string* short_);
  private:
  const std::string& _internal_short_() const;
  void _internal_set_short_(const std::string& value);
  std::string* _internal_mutable_short_();
  public:

  // string long = 3;
  void clear_long_();
  const std::string& long_() const;
  void set_long_(const std::string& value);
  void set_long_(std::string&& value);
  void set_long_(const char* value);
  void set_long_(const char* value, size_t size);
  std::string* mutable_long_();
  std::string* release_long_();
  void set_allocated_long_(std::string* long_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_long_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_long_(
      std::string* long_);
  private:
  const std::string& _internal_long_() const;
  void _internal_set_long_(const std::string& value);
  std::string* _internal_mutable_long_();
  public:

  // string example = 4;
  void clear_example();
  const std::string& example() const;
  void set_example(const std::string& value);
  void set_example(std::string&& value);
  void set_example(const char* value);
  void set_example(const char* value, size_t size);
  std::string* mutable_example();
  std::string* release_example();
  void set_allocated_example(std::string* example);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_example();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_example(
      std::string* example);
  private:
  const std::string& _internal_example() const;
  void _internal_set_example(const std::string& value);
  std::string* _internal_mutable_example();
  public:

  // string deprecated = 5;
  void clear_deprecated();
  const std::string& deprecated() const;
  void set_deprecated(const std::string& value);
  void set_deprecated(std::string&& value);
  void set_deprecated(const char* value);
  void set_deprecated(const char* value, size_t size);
  std::string* mutable_deprecated();
  std::string* release_deprecated();
  void set_allocated_deprecated(std::string* deprecated);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_deprecated();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_deprecated(
      std::string* deprecated);
  private:
  const std::string& _internal_deprecated() const;
  void _internal_set_deprecated(const std::string& value);
  std::string* _internal_mutable_deprecated();
  public:

  // bool hidden = 6;
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);
  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cli.Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr use_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr long__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr example_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deprecated_;
  bool hidden_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fimprobable_2fprotoc_2dgen_2dgocli_2fcli_2eproto;
};
// -------------------------------------------------------------------

class Flag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cli.Flag) */ {
 public:
  inline Flag() : Flag(nullptr) {};
  virtual ~Flag();

  Flag(const Flag& from);
  Flag(Flag&& from) noexcept
    : Flag() {
    *this = ::std::move(from);
  }

  inline Flag& operator=(const Flag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Flag& operator=(Flag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Flag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Flag* internal_default_instance() {
    return reinterpret_cast<const Flag*>(
               &_Flag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Flag& a, Flag& b) {
    a.Swap(&b);
  }
  inline void Swap(Flag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Flag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Flag* New() const final {
    return CreateMaybeMessage<Flag>(nullptr);
  }

  Flag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Flag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Flag& from);
  void MergeFrom(const Flag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Flag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cli.Flag";
  }
  protected:
  explicit Flag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fimprobable_2fprotoc_2dgen_2dgocli_2fcli_2eproto);
    return ::descriptor_table_github_2ecom_2fimprobable_2fprotoc_2dgen_2dgocli_2fcli_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kShorthandFieldNumber = 2,
    kDefaultValueFieldNumber = 3,
    kUsageFieldNumber = 5,
    kRequiredFieldNumber = 6,
    kIncludeNestedFieldNumber = 7,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string shorthand = 2;
  void clear_shorthand();
  const std::string& shorthand() const;
  void set_shorthand(const std::string& value);
  void set_shorthand(std::string&& value);
  void set_shorthand(const char* value);
  void set_shorthand(const char* value, size_t size);
  std::string* mutable_shorthand();
  std::string* release_shorthand();
  void set_allocated_shorthand(std::string* shorthand);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_shorthand();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_shorthand(
      std::string* shorthand);
  private:
  const std::string& _internal_shorthand() const;
  void _internal_set_shorthand(const std::string& value);
  std::string* _internal_mutable_shorthand();
  public:

  // string default_value = 3;
  void clear_default_value();
  const std::string& default_value() const;
  void set_default_value(const std::string& value);
  void set_default_value(std::string&& value);
  void set_default_value(const char* value);
  void set_default_value(const char* value, size_t size);
  std::string* mutable_default_value();
  std::string* release_default_value();
  void set_allocated_default_value(std::string* default_value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_default_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_default_value(
      std::string* default_value);
  private:
  const std::string& _internal_default_value() const;
  void _internal_set_default_value(const std::string& value);
  std::string* _internal_mutable_default_value();
  public:

  // string usage = 5;
  void clear_usage();
  const std::string& usage() const;
  void set_usage(const std::string& value);
  void set_usage(std::string&& value);
  void set_usage(const char* value);
  void set_usage(const char* value, size_t size);
  std::string* mutable_usage();
  std::string* release_usage();
  void set_allocated_usage(std::string* usage);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_usage();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_usage(
      std::string* usage);
  private:
  const std::string& _internal_usage() const;
  void _internal_set_usage(const std::string& value);
  std::string* _internal_mutable_usage();
  public:

  // bool required = 6;
  void clear_required();
  bool required() const;
  void set_required(bool value);
  private:
  bool _internal_required() const;
  void _internal_set_required(bool value);
  public:

  // bool include_nested = 7;
  void clear_include_nested();
  bool include_nested() const;
  void set_include_nested(bool value);
  private:
  bool _internal_include_nested() const;
  void _internal_set_include_nested(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cli.Flag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shorthand_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usage_;
  bool required_;
  bool include_nested_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fimprobable_2fprotoc_2dgen_2dgocli_2fcli_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cli.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cli.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fimprobable_2fprotoc_2dgen_2dgocli_2fcli_2eproto);
    return ::descriptor_table_github_2ecom_2fimprobable_2fprotoc_2dgen_2dgocli_2fcli_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncludeEmptyFieldNumber = 1,
  };
  // bool include_empty = 1;
  void clear_include_empty();
  bool include_empty() const;
  void set_include_empty(bool value);
  private:
  bool _internal_include_empty() const;
  void _internal_set_include_empty(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cli.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool include_empty_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_github_2ecom_2fimprobable_2fprotoc_2dgen_2dgocli_2fcli_2eproto;
};
// ===================================================================

static const int kCommandFieldNumber = 65021;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::cli::Command >, 11, false >
  command;
static const int kFlagFieldNumber = 65021;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::cli::Flag >, 11, false >
  flag;
static const int kRequestFieldNumber = 65021;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::cli::Request >, 11, false >
  request;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command

// string use = 1;
inline void Command::clear_use() {
  use_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Command::use() const {
  // @@protoc_insertion_point(field_get:cli.Command.use)
  return _internal_use();
}
inline void Command::set_use(const std::string& value) {
  _internal_set_use(value);
  // @@protoc_insertion_point(field_set:cli.Command.use)
}
inline std::string* Command::mutable_use() {
  // @@protoc_insertion_point(field_mutable:cli.Command.use)
  return _internal_mutable_use();
}
inline const std::string& Command::_internal_use() const {
  return use_.Get();
}
inline void Command::_internal_set_use(const std::string& value) {
  
  use_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Command::set_use(std::string&& value) {
  
  use_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cli.Command.use)
}
inline void Command::set_use(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  use_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cli.Command.use)
}
inline void Command::set_use(const char* value,
    size_t size) {
  
  use_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cli.Command.use)
}
inline std::string* Command::_internal_mutable_use() {
  
  return use_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Command::release_use() {
  // @@protoc_insertion_point(field_release:cli.Command.use)
  return use_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Command::set_allocated_use(std::string* use) {
  if (use != nullptr) {
    
  } else {
    
  }
  use_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), use,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cli.Command.use)
}
inline std::string* Command::unsafe_arena_release_use() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cli.Command.use)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return use_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Command::unsafe_arena_set_allocated_use(
    std::string* use) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (use != nullptr) {
    
  } else {
    
  }
  use_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      use, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cli.Command.use)
}

// string short = 2;
inline void Command::clear_short_() {
  short__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Command::short_() const {
  // @@protoc_insertion_point(field_get:cli.Command.short)
  return _internal_short_();
}
inline void Command::set_short_(const std::string& value) {
  _internal_set_short_(value);
  // @@protoc_insertion_point(field_set:cli.Command.short)
}
inline std::string* Command::mutable_short_() {
  // @@protoc_insertion_point(field_mutable:cli.Command.short)
  return _internal_mutable_short_();
}
inline const std::string& Command::_internal_short_() const {
  return short__.Get();
}
inline void Command::_internal_set_short_(const std::string& value) {
  
  short__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Command::set_short_(std::string&& value) {
  
  short__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cli.Command.short)
}
inline void Command::set_short_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  short__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cli.Command.short)
}
inline void Command::set_short_(const char* value,
    size_t size) {
  
  short__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cli.Command.short)
}
inline std::string* Command::_internal_mutable_short_() {
  
  return short__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Command::release_short_() {
  // @@protoc_insertion_point(field_release:cli.Command.short)
  return short__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Command::set_allocated_short_(std::string* short_) {
  if (short_ != nullptr) {
    
  } else {
    
  }
  short__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), short_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cli.Command.short)
}
inline std::string* Command::unsafe_arena_release_short_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cli.Command.short)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return short__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Command::unsafe_arena_set_allocated_short_(
    std::string* short_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (short_ != nullptr) {
    
  } else {
    
  }
  short__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      short_, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cli.Command.short)
}

// string long = 3;
inline void Command::clear_long_() {
  long__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Command::long_() const {
  // @@protoc_insertion_point(field_get:cli.Command.long)
  return _internal_long_();
}
inline void Command::set_long_(const std::string& value) {
  _internal_set_long_(value);
  // @@protoc_insertion_point(field_set:cli.Command.long)
}
inline std::string* Command::mutable_long_() {
  // @@protoc_insertion_point(field_mutable:cli.Command.long)
  return _internal_mutable_long_();
}
inline const std::string& Command::_internal_long_() const {
  return long__.Get();
}
inline void Command::_internal_set_long_(const std::string& value) {
  
  long__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Command::set_long_(std::string&& value) {
  
  long__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cli.Command.long)
}
inline void Command::set_long_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  long__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cli.Command.long)
}
inline void Command::set_long_(const char* value,
    size_t size) {
  
  long__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cli.Command.long)
}
inline std::string* Command::_internal_mutable_long_() {
  
  return long__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Command::release_long_() {
  // @@protoc_insertion_point(field_release:cli.Command.long)
  return long__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Command::set_allocated_long_(std::string* long_) {
  if (long_ != nullptr) {
    
  } else {
    
  }
  long__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), long_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cli.Command.long)
}
inline std::string* Command::unsafe_arena_release_long_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cli.Command.long)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return long__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Command::unsafe_arena_set_allocated_long_(
    std::string* long_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (long_ != nullptr) {
    
  } else {
    
  }
  long__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      long_, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cli.Command.long)
}

// string example = 4;
inline void Command::clear_example() {
  example_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Command::example() const {
  // @@protoc_insertion_point(field_get:cli.Command.example)
  return _internal_example();
}
inline void Command::set_example(const std::string& value) {
  _internal_set_example(value);
  // @@protoc_insertion_point(field_set:cli.Command.example)
}
inline std::string* Command::mutable_example() {
  // @@protoc_insertion_point(field_mutable:cli.Command.example)
  return _internal_mutable_example();
}
inline const std::string& Command::_internal_example() const {
  return example_.Get();
}
inline void Command::_internal_set_example(const std::string& value) {
  
  example_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Command::set_example(std::string&& value) {
  
  example_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cli.Command.example)
}
inline void Command::set_example(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  example_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cli.Command.example)
}
inline void Command::set_example(const char* value,
    size_t size) {
  
  example_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cli.Command.example)
}
inline std::string* Command::_internal_mutable_example() {
  
  return example_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Command::release_example() {
  // @@protoc_insertion_point(field_release:cli.Command.example)
  return example_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Command::set_allocated_example(std::string* example) {
  if (example != nullptr) {
    
  } else {
    
  }
  example_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), example,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cli.Command.example)
}
inline std::string* Command::unsafe_arena_release_example() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cli.Command.example)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return example_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Command::unsafe_arena_set_allocated_example(
    std::string* example) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (example != nullptr) {
    
  } else {
    
  }
  example_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      example, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cli.Command.example)
}

// string deprecated = 5;
inline void Command::clear_deprecated() {
  deprecated_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Command::deprecated() const {
  // @@protoc_insertion_point(field_get:cli.Command.deprecated)
  return _internal_deprecated();
}
inline void Command::set_deprecated(const std::string& value) {
  _internal_set_deprecated(value);
  // @@protoc_insertion_point(field_set:cli.Command.deprecated)
}
inline std::string* Command::mutable_deprecated() {
  // @@protoc_insertion_point(field_mutable:cli.Command.deprecated)
  return _internal_mutable_deprecated();
}
inline const std::string& Command::_internal_deprecated() const {
  return deprecated_.Get();
}
inline void Command::_internal_set_deprecated(const std::string& value) {
  
  deprecated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Command::set_deprecated(std::string&& value) {
  
  deprecated_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cli.Command.deprecated)
}
inline void Command::set_deprecated(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deprecated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cli.Command.deprecated)
}
inline void Command::set_deprecated(const char* value,
    size_t size) {
  
  deprecated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cli.Command.deprecated)
}
inline std::string* Command::_internal_mutable_deprecated() {
  
  return deprecated_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Command::release_deprecated() {
  // @@protoc_insertion_point(field_release:cli.Command.deprecated)
  return deprecated_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Command::set_allocated_deprecated(std::string* deprecated) {
  if (deprecated != nullptr) {
    
  } else {
    
  }
  deprecated_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deprecated,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cli.Command.deprecated)
}
inline std::string* Command::unsafe_arena_release_deprecated() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cli.Command.deprecated)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return deprecated_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Command::unsafe_arena_set_allocated_deprecated(
    std::string* deprecated) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (deprecated != nullptr) {
    
  } else {
    
  }
  deprecated_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      deprecated, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cli.Command.deprecated)
}

// bool hidden = 6;
inline void Command::clear_hidden() {
  hidden_ = false;
}
inline bool Command::_internal_hidden() const {
  return hidden_;
}
inline bool Command::hidden() const {
  // @@protoc_insertion_point(field_get:cli.Command.hidden)
  return _internal_hidden();
}
inline void Command::_internal_set_hidden(bool value) {
  
  hidden_ = value;
}
inline void Command::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:cli.Command.hidden)
}

// -------------------------------------------------------------------

// Flag

// string name = 1;
inline void Flag::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Flag::name() const {
  // @@protoc_insertion_point(field_get:cli.Flag.name)
  return _internal_name();
}
inline void Flag::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:cli.Flag.name)
}
inline std::string* Flag::mutable_name() {
  // @@protoc_insertion_point(field_mutable:cli.Flag.name)
  return _internal_mutable_name();
}
inline const std::string& Flag::_internal_name() const {
  return name_.Get();
}
inline void Flag::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Flag::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cli.Flag.name)
}
inline void Flag::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cli.Flag.name)
}
inline void Flag::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cli.Flag.name)
}
inline std::string* Flag::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Flag::release_name() {
  // @@protoc_insertion_point(field_release:cli.Flag.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Flag::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cli.Flag.name)
}
inline std::string* Flag::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cli.Flag.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Flag::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cli.Flag.name)
}

// string shorthand = 2;
inline void Flag::clear_shorthand() {
  shorthand_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Flag::shorthand() const {
  // @@protoc_insertion_point(field_get:cli.Flag.shorthand)
  return _internal_shorthand();
}
inline void Flag::set_shorthand(const std::string& value) {
  _internal_set_shorthand(value);
  // @@protoc_insertion_point(field_set:cli.Flag.shorthand)
}
inline std::string* Flag::mutable_shorthand() {
  // @@protoc_insertion_point(field_mutable:cli.Flag.shorthand)
  return _internal_mutable_shorthand();
}
inline const std::string& Flag::_internal_shorthand() const {
  return shorthand_.Get();
}
inline void Flag::_internal_set_shorthand(const std::string& value) {
  
  shorthand_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Flag::set_shorthand(std::string&& value) {
  
  shorthand_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cli.Flag.shorthand)
}
inline void Flag::set_shorthand(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shorthand_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cli.Flag.shorthand)
}
inline void Flag::set_shorthand(const char* value,
    size_t size) {
  
  shorthand_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cli.Flag.shorthand)
}
inline std::string* Flag::_internal_mutable_shorthand() {
  
  return shorthand_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Flag::release_shorthand() {
  // @@protoc_insertion_point(field_release:cli.Flag.shorthand)
  return shorthand_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Flag::set_allocated_shorthand(std::string* shorthand) {
  if (shorthand != nullptr) {
    
  } else {
    
  }
  shorthand_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shorthand,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cli.Flag.shorthand)
}
inline std::string* Flag::unsafe_arena_release_shorthand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cli.Flag.shorthand)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return shorthand_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Flag::unsafe_arena_set_allocated_shorthand(
    std::string* shorthand) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (shorthand != nullptr) {
    
  } else {
    
  }
  shorthand_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      shorthand, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cli.Flag.shorthand)
}

// string default_value = 3;
inline void Flag::clear_default_value() {
  default_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Flag::default_value() const {
  // @@protoc_insertion_point(field_get:cli.Flag.default_value)
  return _internal_default_value();
}
inline void Flag::set_default_value(const std::string& value) {
  _internal_set_default_value(value);
  // @@protoc_insertion_point(field_set:cli.Flag.default_value)
}
inline std::string* Flag::mutable_default_value() {
  // @@protoc_insertion_point(field_mutable:cli.Flag.default_value)
  return _internal_mutable_default_value();
}
inline const std::string& Flag::_internal_default_value() const {
  return default_value_.Get();
}
inline void Flag::_internal_set_default_value(const std::string& value) {
  
  default_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Flag::set_default_value(std::string&& value) {
  
  default_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cli.Flag.default_value)
}
inline void Flag::set_default_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  default_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cli.Flag.default_value)
}
inline void Flag::set_default_value(const char* value,
    size_t size) {
  
  default_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cli.Flag.default_value)
}
inline std::string* Flag::_internal_mutable_default_value() {
  
  return default_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Flag::release_default_value() {
  // @@protoc_insertion_point(field_release:cli.Flag.default_value)
  return default_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Flag::set_allocated_default_value(std::string* default_value) {
  if (default_value != nullptr) {
    
  } else {
    
  }
  default_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cli.Flag.default_value)
}
inline std::string* Flag::unsafe_arena_release_default_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cli.Flag.default_value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return default_value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Flag::unsafe_arena_set_allocated_default_value(
    std::string* default_value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (default_value != nullptr) {
    
  } else {
    
  }
  default_value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      default_value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cli.Flag.default_value)
}

// string usage = 5;
inline void Flag::clear_usage() {
  usage_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Flag::usage() const {
  // @@protoc_insertion_point(field_get:cli.Flag.usage)
  return _internal_usage();
}
inline void Flag::set_usage(const std::string& value) {
  _internal_set_usage(value);
  // @@protoc_insertion_point(field_set:cli.Flag.usage)
}
inline std::string* Flag::mutable_usage() {
  // @@protoc_insertion_point(field_mutable:cli.Flag.usage)
  return _internal_mutable_usage();
}
inline const std::string& Flag::_internal_usage() const {
  return usage_.Get();
}
inline void Flag::_internal_set_usage(const std::string& value) {
  
  usage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Flag::set_usage(std::string&& value) {
  
  usage_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cli.Flag.usage)
}
inline void Flag::set_usage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cli.Flag.usage)
}
inline void Flag::set_usage(const char* value,
    size_t size) {
  
  usage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cli.Flag.usage)
}
inline std::string* Flag::_internal_mutable_usage() {
  
  return usage_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Flag::release_usage() {
  // @@protoc_insertion_point(field_release:cli.Flag.usage)
  return usage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Flag::set_allocated_usage(std::string* usage) {
  if (usage != nullptr) {
    
  } else {
    
  }
  usage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cli.Flag.usage)
}
inline std::string* Flag::unsafe_arena_release_usage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cli.Flag.usage)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return usage_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Flag::unsafe_arena_set_allocated_usage(
    std::string* usage) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (usage != nullptr) {
    
  } else {
    
  }
  usage_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      usage, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cli.Flag.usage)
}

// bool required = 6;
inline void Flag::clear_required() {
  required_ = false;
}
inline bool Flag::_internal_required() const {
  return required_;
}
inline bool Flag::required() const {
  // @@protoc_insertion_point(field_get:cli.Flag.required)
  return _internal_required();
}
inline void Flag::_internal_set_required(bool value) {
  
  required_ = value;
}
inline void Flag::set_required(bool value) {
  _internal_set_required(value);
  // @@protoc_insertion_point(field_set:cli.Flag.required)
}

// bool include_nested = 7;
inline void Flag::clear_include_nested() {
  include_nested_ = false;
}
inline bool Flag::_internal_include_nested() const {
  return include_nested_;
}
inline bool Flag::include_nested() const {
  // @@protoc_insertion_point(field_get:cli.Flag.include_nested)
  return _internal_include_nested();
}
inline void Flag::_internal_set_include_nested(bool value) {
  
  include_nested_ = value;
}
inline void Flag::set_include_nested(bool value) {
  _internal_set_include_nested(value);
  // @@protoc_insertion_point(field_set:cli.Flag.include_nested)
}

// -------------------------------------------------------------------

// Request

// bool include_empty = 1;
inline void Request::clear_include_empty() {
  include_empty_ = false;
}
inline bool Request::_internal_include_empty() const {
  return include_empty_;
}
inline bool Request::include_empty() const {
  // @@protoc_insertion_point(field_get:cli.Request.include_empty)
  return _internal_include_empty();
}
inline void Request::_internal_set_include_empty(bool value) {
  
  include_empty_ = value;
}
inline void Request::set_include_empty(bool value) {
  _internal_set_include_empty(value);
  // @@protoc_insertion_point(field_set:cli.Request.include_empty)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cli

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_github_2ecom_2fimprobable_2fprotoc_2dgen_2dgocli_2fcli_2eproto
