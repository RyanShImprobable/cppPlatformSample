// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/mwitkow/go-proto-validators/validator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto;
namespace validator {
class FieldValidator;
class FieldValidatorDefaultTypeInternal;
extern FieldValidatorDefaultTypeInternal _FieldValidator_default_instance_;
class OneofValidator;
class OneofValidatorDefaultTypeInternal;
extern OneofValidatorDefaultTypeInternal _OneofValidator_default_instance_;
}  // namespace validator
PROTOBUF_NAMESPACE_OPEN
template<> ::validator::FieldValidator* Arena::CreateMaybeMessage<::validator::FieldValidator>(Arena*);
template<> ::validator::OneofValidator* Arena::CreateMaybeMessage<::validator::OneofValidator>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace validator {

// ===================================================================

class FieldValidator PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validator.FieldValidator) */ {
 public:
  inline FieldValidator() : FieldValidator(nullptr) {};
  virtual ~FieldValidator();

  FieldValidator(const FieldValidator& from);
  FieldValidator(FieldValidator&& from) noexcept
    : FieldValidator() {
    *this = ::std::move(from);
  }

  inline FieldValidator& operator=(const FieldValidator& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldValidator& operator=(FieldValidator&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldValidator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldValidator* internal_default_instance() {
    return reinterpret_cast<const FieldValidator*>(
               &_FieldValidator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FieldValidator& a, FieldValidator& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldValidator* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldValidator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldValidator* New() const final {
    return CreateMaybeMessage<FieldValidator>(nullptr);
  }

  FieldValidator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldValidator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldValidator& from);
  void MergeFrom(const FieldValidator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldValidator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validator.FieldValidator";
  }
  protected:
  explicit FieldValidator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto);
    return ::descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegexFieldNumber = 1,
    kHumanErrorFieldNumber = 5,
    kIntGtFieldNumber = 2,
    kIntLtFieldNumber = 3,
    kFloatGtFieldNumber = 6,
    kFloatLtFieldNumber = 7,
    kFloatEpsilonFieldNumber = 8,
    kFloatGteFieldNumber = 9,
    kFloatLteFieldNumber = 10,
    kRepeatedCountMinFieldNumber = 12,
    kMsgExistsFieldNumber = 4,
    kStringNotEmptyFieldNumber = 11,
    kIsInEnumFieldNumber = 17,
    kUuidVerFieldNumber = 18,
    kRepeatedCountMaxFieldNumber = 13,
    kLengthGtFieldNumber = 14,
    kLengthLtFieldNumber = 15,
    kLengthEqFieldNumber = 16,
  };
  // optional string regex = 1;
  bool has_regex() const;
  private:
  bool _internal_has_regex() const;
  public:
  void clear_regex();
  const std::string& regex() const;
  void set_regex(const std::string& value);
  void set_regex(std::string&& value);
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  std::string* mutable_regex();
  std::string* release_regex();
  void set_allocated_regex(std::string* regex);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_regex();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_regex(
      std::string* regex);
  private:
  const std::string& _internal_regex() const;
  void _internal_set_regex(const std::string& value);
  std::string* _internal_mutable_regex();
  public:

  // optional string human_error = 5;
  bool has_human_error() const;
  private:
  bool _internal_has_human_error() const;
  public:
  void clear_human_error();
  const std::string& human_error() const;
  void set_human_error(const std::string& value);
  void set_human_error(std::string&& value);
  void set_human_error(const char* value);
  void set_human_error(const char* value, size_t size);
  std::string* mutable_human_error();
  std::string* release_human_error();
  void set_allocated_human_error(std::string* human_error);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_human_error();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_human_error(
      std::string* human_error);
  private:
  const std::string& _internal_human_error() const;
  void _internal_set_human_error(const std::string& value);
  std::string* _internal_mutable_human_error();
  public:

  // optional int64 int_gt = 2;
  bool has_int_gt() const;
  private:
  bool _internal_has_int_gt() const;
  public:
  void clear_int_gt();
  ::PROTOBUF_NAMESPACE_ID::int64 int_gt() const;
  void set_int_gt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int_gt() const;
  void _internal_set_int_gt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 int_lt = 3;
  bool has_int_lt() const;
  private:
  bool _internal_has_int_lt() const;
  public:
  void clear_int_lt();
  ::PROTOBUF_NAMESPACE_ID::int64 int_lt() const;
  void set_int_lt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int_lt() const;
  void _internal_set_int_lt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional double float_gt = 6;
  bool has_float_gt() const;
  private:
  bool _internal_has_float_gt() const;
  public:
  void clear_float_gt();
  double float_gt() const;
  void set_float_gt(double value);
  private:
  double _internal_float_gt() const;
  void _internal_set_float_gt(double value);
  public:

  // optional double float_lt = 7;
  bool has_float_lt() const;
  private:
  bool _internal_has_float_lt() const;
  public:
  void clear_float_lt();
  double float_lt() const;
  void set_float_lt(double value);
  private:
  double _internal_float_lt() const;
  void _internal_set_float_lt(double value);
  public:

  // optional double float_epsilon = 8;
  bool has_float_epsilon() const;
  private:
  bool _internal_has_float_epsilon() const;
  public:
  void clear_float_epsilon();
  double float_epsilon() const;
  void set_float_epsilon(double value);
  private:
  double _internal_float_epsilon() const;
  void _internal_set_float_epsilon(double value);
  public:

  // optional double float_gte = 9;
  bool has_float_gte() const;
  private:
  bool _internal_has_float_gte() const;
  public:
  void clear_float_gte();
  double float_gte() const;
  void set_float_gte(double value);
  private:
  double _internal_float_gte() const;
  void _internal_set_float_gte(double value);
  public:

  // optional double float_lte = 10;
  bool has_float_lte() const;
  private:
  bool _internal_has_float_lte() const;
  public:
  void clear_float_lte();
  double float_lte() const;
  void set_float_lte(double value);
  private:
  double _internal_float_lte() const;
  void _internal_set_float_lte(double value);
  public:

  // optional int64 repeated_count_min = 12;
  bool has_repeated_count_min() const;
  private:
  bool _internal_has_repeated_count_min() const;
  public:
  void clear_repeated_count_min();
  ::PROTOBUF_NAMESPACE_ID::int64 repeated_count_min() const;
  void set_repeated_count_min(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_repeated_count_min() const;
  void _internal_set_repeated_count_min(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool msg_exists = 4;
  bool has_msg_exists() const;
  private:
  bool _internal_has_msg_exists() const;
  public:
  void clear_msg_exists();
  bool msg_exists() const;
  void set_msg_exists(bool value);
  private:
  bool _internal_msg_exists() const;
  void _internal_set_msg_exists(bool value);
  public:

  // optional bool string_not_empty = 11;
  bool has_string_not_empty() const;
  private:
  bool _internal_has_string_not_empty() const;
  public:
  void clear_string_not_empty();
  bool string_not_empty() const;
  void set_string_not_empty(bool value);
  private:
  bool _internal_string_not_empty() const;
  void _internal_set_string_not_empty(bool value);
  public:

  // optional bool is_in_enum = 17;
  bool has_is_in_enum() const;
  private:
  bool _internal_has_is_in_enum() const;
  public:
  void clear_is_in_enum();
  bool is_in_enum() const;
  void set_is_in_enum(bool value);
  private:
  bool _internal_is_in_enum() const;
  void _internal_set_is_in_enum(bool value);
  public:

  // optional int32 uuid_ver = 18;
  bool has_uuid_ver() const;
  private:
  bool _internal_has_uuid_ver() const;
  public:
  void clear_uuid_ver();
  ::PROTOBUF_NAMESPACE_ID::int32 uuid_ver() const;
  void set_uuid_ver(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uuid_ver() const;
  void _internal_set_uuid_ver(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 repeated_count_max = 13;
  bool has_repeated_count_max() const;
  private:
  bool _internal_has_repeated_count_max() const;
  public:
  void clear_repeated_count_max();
  ::PROTOBUF_NAMESPACE_ID::int64 repeated_count_max() const;
  void set_repeated_count_max(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_repeated_count_max() const;
  void _internal_set_repeated_count_max(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 length_gt = 14;
  bool has_length_gt() const;
  private:
  bool _internal_has_length_gt() const;
  public:
  void clear_length_gt();
  ::PROTOBUF_NAMESPACE_ID::int64 length_gt() const;
  void set_length_gt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_length_gt() const;
  void _internal_set_length_gt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 length_lt = 15;
  bool has_length_lt() const;
  private:
  bool _internal_has_length_lt() const;
  public:
  void clear_length_lt();
  ::PROTOBUF_NAMESPACE_ID::int64 length_lt() const;
  void set_length_lt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_length_lt() const;
  void _internal_set_length_lt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 length_eq = 16;
  bool has_length_eq() const;
  private:
  bool _internal_has_length_eq() const;
  public:
  void clear_length_eq();
  ::PROTOBUF_NAMESPACE_ID::int64 length_eq() const;
  void set_length_eq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_length_eq() const;
  void _internal_set_length_eq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:validator.FieldValidator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr human_error_;
  ::PROTOBUF_NAMESPACE_ID::int64 int_gt_;
  ::PROTOBUF_NAMESPACE_ID::int64 int_lt_;
  double float_gt_;
  double float_lt_;
  double float_epsilon_;
  double float_gte_;
  double float_lte_;
  ::PROTOBUF_NAMESPACE_ID::int64 repeated_count_min_;
  bool msg_exists_;
  bool string_not_empty_;
  bool is_in_enum_;
  ::PROTOBUF_NAMESPACE_ID::int32 uuid_ver_;
  ::PROTOBUF_NAMESPACE_ID::int64 repeated_count_max_;
  ::PROTOBUF_NAMESPACE_ID::int64 length_gt_;
  ::PROTOBUF_NAMESPACE_ID::int64 length_lt_;
  ::PROTOBUF_NAMESPACE_ID::int64 length_eq_;
  friend struct ::TableStruct_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto;
};
// -------------------------------------------------------------------

class OneofValidator PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:validator.OneofValidator) */ {
 public:
  inline OneofValidator() : OneofValidator(nullptr) {};
  virtual ~OneofValidator();

  OneofValidator(const OneofValidator& from);
  OneofValidator(OneofValidator&& from) noexcept
    : OneofValidator() {
    *this = ::std::move(from);
  }

  inline OneofValidator& operator=(const OneofValidator& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneofValidator& operator=(OneofValidator&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OneofValidator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneofValidator* internal_default_instance() {
    return reinterpret_cast<const OneofValidator*>(
               &_OneofValidator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OneofValidator& a, OneofValidator& b) {
    a.Swap(&b);
  }
  inline void Swap(OneofValidator* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneofValidator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OneofValidator* New() const final {
    return CreateMaybeMessage<OneofValidator>(nullptr);
  }

  OneofValidator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OneofValidator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OneofValidator& from);
  void MergeFrom(const OneofValidator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneofValidator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "validator.OneofValidator";
  }
  protected:
  explicit OneofValidator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto);
    return ::descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequiredFieldNumber = 1,
  };
  // optional bool required = 1;
  bool has_required() const;
  private:
  bool _internal_has_required() const;
  public:
  void clear_required();
  bool required() const;
  void set_required(bool value);
  private:
  bool _internal_required() const;
  void _internal_set_required(bool value);
  public:

  // @@protoc_insertion_point(class_scope:validator.OneofValidator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool required_;
  friend struct ::TableStruct_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto;
};
// ===================================================================

static const int kFieldFieldNumber = 65020;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::validator::FieldValidator >, 11, false >
  field;
static const int kOneofFieldNumber = 65021;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::OneofOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::validator::OneofValidator >, 11, false >
  oneof;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FieldValidator

// optional string regex = 1;
inline bool FieldValidator::_internal_has_regex() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FieldValidator::has_regex() const {
  return _internal_has_regex();
}
inline void FieldValidator::clear_regex() {
  regex_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FieldValidator::regex() const {
  // @@protoc_insertion_point(field_get:validator.FieldValidator.regex)
  return _internal_regex();
}
inline void FieldValidator::set_regex(const std::string& value) {
  _internal_set_regex(value);
  // @@protoc_insertion_point(field_set:validator.FieldValidator.regex)
}
inline std::string* FieldValidator::mutable_regex() {
  // @@protoc_insertion_point(field_mutable:validator.FieldValidator.regex)
  return _internal_mutable_regex();
}
inline const std::string& FieldValidator::_internal_regex() const {
  return regex_.Get();
}
inline void FieldValidator::_internal_set_regex(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FieldValidator::set_regex(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  regex_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:validator.FieldValidator.regex)
}
inline void FieldValidator::set_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:validator.FieldValidator.regex)
}
inline void FieldValidator::set_regex(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:validator.FieldValidator.regex)
}
inline std::string* FieldValidator::_internal_mutable_regex() {
  _has_bits_[0] |= 0x00000001u;
  return regex_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FieldValidator::release_regex() {
  // @@protoc_insertion_point(field_release:validator.FieldValidator.regex)
  if (!_internal_has_regex()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return regex_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FieldValidator::set_allocated_regex(std::string* regex) {
  if (regex != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  regex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:validator.FieldValidator.regex)
}
inline std::string* FieldValidator::unsafe_arena_release_regex() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validator.FieldValidator.regex)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return regex_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FieldValidator::unsafe_arena_set_allocated_regex(
    std::string* regex) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (regex != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  regex_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      regex, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validator.FieldValidator.regex)
}

// optional int64 int_gt = 2;
inline bool FieldValidator::_internal_has_int_gt() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FieldValidator::has_int_gt() const {
  return _internal_has_int_gt();
}
inline void FieldValidator::clear_int_gt() {
  int_gt_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldValidator::_internal_int_gt() const {
  return int_gt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldValidator::int_gt() const {
  // @@protoc_insertion_point(field_get:validator.FieldValidator.int_gt)
  return _internal_int_gt();
}
inline void FieldValidator::_internal_set_int_gt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  int_gt_ = value;
}
inline void FieldValidator::set_int_gt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int_gt(value);
  // @@protoc_insertion_point(field_set:validator.FieldValidator.int_gt)
}

// optional int64 int_lt = 3;
inline bool FieldValidator::_internal_has_int_lt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FieldValidator::has_int_lt() const {
  return _internal_has_int_lt();
}
inline void FieldValidator::clear_int_lt() {
  int_lt_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldValidator::_internal_int_lt() const {
  return int_lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldValidator::int_lt() const {
  // @@protoc_insertion_point(field_get:validator.FieldValidator.int_lt)
  return _internal_int_lt();
}
inline void FieldValidator::_internal_set_int_lt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  int_lt_ = value;
}
inline void FieldValidator::set_int_lt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int_lt(value);
  // @@protoc_insertion_point(field_set:validator.FieldValidator.int_lt)
}

// optional bool msg_exists = 4;
inline bool FieldValidator::_internal_has_msg_exists() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FieldValidator::has_msg_exists() const {
  return _internal_has_msg_exists();
}
inline void FieldValidator::clear_msg_exists() {
  msg_exists_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool FieldValidator::_internal_msg_exists() const {
  return msg_exists_;
}
inline bool FieldValidator::msg_exists() const {
  // @@protoc_insertion_point(field_get:validator.FieldValidator.msg_exists)
  return _internal_msg_exists();
}
inline void FieldValidator::_internal_set_msg_exists(bool value) {
  _has_bits_[0] |= 0x00000400u;
  msg_exists_ = value;
}
inline void FieldValidator::set_msg_exists(bool value) {
  _internal_set_msg_exists(value);
  // @@protoc_insertion_point(field_set:validator.FieldValidator.msg_exists)
}

// optional string human_error = 5;
inline bool FieldValidator::_internal_has_human_error() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FieldValidator::has_human_error() const {
  return _internal_has_human_error();
}
inline void FieldValidator::clear_human_error() {
  human_error_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FieldValidator::human_error() const {
  // @@protoc_insertion_point(field_get:validator.FieldValidator.human_error)
  return _internal_human_error();
}
inline void FieldValidator::set_human_error(const std::string& value) {
  _internal_set_human_error(value);
  // @@protoc_insertion_point(field_set:validator.FieldValidator.human_error)
}
inline std::string* FieldValidator::mutable_human_error() {
  // @@protoc_insertion_point(field_mutable:validator.FieldValidator.human_error)
  return _internal_mutable_human_error();
}
inline const std::string& FieldValidator::_internal_human_error() const {
  return human_error_.Get();
}
inline void FieldValidator::_internal_set_human_error(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  human_error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FieldValidator::set_human_error(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  human_error_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:validator.FieldValidator.human_error)
}
inline void FieldValidator::set_human_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  human_error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:validator.FieldValidator.human_error)
}
inline void FieldValidator::set_human_error(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  human_error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:validator.FieldValidator.human_error)
}
inline std::string* FieldValidator::_internal_mutable_human_error() {
  _has_bits_[0] |= 0x00000002u;
  return human_error_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FieldValidator::release_human_error() {
  // @@protoc_insertion_point(field_release:validator.FieldValidator.human_error)
  if (!_internal_has_human_error()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return human_error_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FieldValidator::set_allocated_human_error(std::string* human_error) {
  if (human_error != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  human_error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), human_error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:validator.FieldValidator.human_error)
}
inline std::string* FieldValidator::unsafe_arena_release_human_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:validator.FieldValidator.human_error)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return human_error_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FieldValidator::unsafe_arena_set_allocated_human_error(
    std::string* human_error) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (human_error != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  human_error_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      human_error, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:validator.FieldValidator.human_error)
}

// optional double float_gt = 6;
inline bool FieldValidator::_internal_has_float_gt() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FieldValidator::has_float_gt() const {
  return _internal_has_float_gt();
}
inline void FieldValidator::clear_float_gt() {
  float_gt_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double FieldValidator::_internal_float_gt() const {
  return float_gt_;
}
inline double FieldValidator::float_gt() const {
  // @@protoc_insertion_point(field_get:validator.FieldValidator.float_gt)
  return _internal_float_gt();
}
inline void FieldValidator::_internal_set_float_gt(double value) {
  _has_bits_[0] |= 0x00000010u;
  float_gt_ = value;
}
inline void FieldValidator::set_float_gt(double value) {
  _internal_set_float_gt(value);
  // @@protoc_insertion_point(field_set:validator.FieldValidator.float_gt)
}

// optional double float_lt = 7;
inline bool FieldValidator::_internal_has_float_lt() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FieldValidator::has_float_lt() const {
  return _internal_has_float_lt();
}
inline void FieldValidator::clear_float_lt() {
  float_lt_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double FieldValidator::_internal_float_lt() const {
  return float_lt_;
}
inline double FieldValidator::float_lt() const {
  // @@protoc_insertion_point(field_get:validator.FieldValidator.float_lt)
  return _internal_float_lt();
}
inline void FieldValidator::_internal_set_float_lt(double value) {
  _has_bits_[0] |= 0x00000020u;
  float_lt_ = value;
}
inline void FieldValidator::set_float_lt(double value) {
  _internal_set_float_lt(value);
  // @@protoc_insertion_point(field_set:validator.FieldValidator.float_lt)
}

// optional double float_epsilon = 8;
inline bool FieldValidator::_internal_has_float_epsilon() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FieldValidator::has_float_epsilon() const {
  return _internal_has_float_epsilon();
}
inline void FieldValidator::clear_float_epsilon() {
  float_epsilon_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double FieldValidator::_internal_float_epsilon() const {
  return float_epsilon_;
}
inline double FieldValidator::float_epsilon() const {
  // @@protoc_insertion_point(field_get:validator.FieldValidator.float_epsilon)
  return _internal_float_epsilon();
}
inline void FieldValidator::_internal_set_float_epsilon(double value) {
  _has_bits_[0] |= 0x00000040u;
  float_epsilon_ = value;
}
inline void FieldValidator::set_float_epsilon(double value) {
  _internal_set_float_epsilon(value);
  // @@protoc_insertion_point(field_set:validator.FieldValidator.float_epsilon)
}

// optional double float_gte = 9;
inline bool FieldValidator::_internal_has_float_gte() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FieldValidator::has_float_gte() const {
  return _internal_has_float_gte();
}
inline void FieldValidator::clear_float_gte() {
  float_gte_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double FieldValidator::_internal_float_gte() const {
  return float_gte_;
}
inline double FieldValidator::float_gte() const {
  // @@protoc_insertion_point(field_get:validator.FieldValidator.float_gte)
  return _internal_float_gte();
}
inline void FieldValidator::_internal_set_float_gte(double value) {
  _has_bits_[0] |= 0x00000080u;
  float_gte_ = value;
}
inline void FieldValidator::set_float_gte(double value) {
  _internal_set_float_gte(value);
  // @@protoc_insertion_point(field_set:validator.FieldValidator.float_gte)
}

// optional double float_lte = 10;
inline bool FieldValidator::_internal_has_float_lte() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FieldValidator::has_float_lte() const {
  return _internal_has_float_lte();
}
inline void FieldValidator::clear_float_lte() {
  float_lte_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double FieldValidator::_internal_float_lte() const {
  return float_lte_;
}
inline double FieldValidator::float_lte() const {
  // @@protoc_insertion_point(field_get:validator.FieldValidator.float_lte)
  return _internal_float_lte();
}
inline void FieldValidator::_internal_set_float_lte(double value) {
  _has_bits_[0] |= 0x00000100u;
  float_lte_ = value;
}
inline void FieldValidator::set_float_lte(double value) {
  _internal_set_float_lte(value);
  // @@protoc_insertion_point(field_set:validator.FieldValidator.float_lte)
}

// optional bool string_not_empty = 11;
inline bool FieldValidator::_internal_has_string_not_empty() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FieldValidator::has_string_not_empty() const {
  return _internal_has_string_not_empty();
}
inline void FieldValidator::clear_string_not_empty() {
  string_not_empty_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool FieldValidator::_internal_string_not_empty() const {
  return string_not_empty_;
}
inline bool FieldValidator::string_not_empty() const {
  // @@protoc_insertion_point(field_get:validator.FieldValidator.string_not_empty)
  return _internal_string_not_empty();
}
inline void FieldValidator::_internal_set_string_not_empty(bool value) {
  _has_bits_[0] |= 0x00000800u;
  string_not_empty_ = value;
}
inline void FieldValidator::set_string_not_empty(bool value) {
  _internal_set_string_not_empty(value);
  // @@protoc_insertion_point(field_set:validator.FieldValidator.string_not_empty)
}

// optional int64 repeated_count_min = 12;
inline bool FieldValidator::_internal_has_repeated_count_min() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FieldValidator::has_repeated_count_min() const {
  return _internal_has_repeated_count_min();
}
inline void FieldValidator::clear_repeated_count_min() {
  repeated_count_min_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldValidator::_internal_repeated_count_min() const {
  return repeated_count_min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldValidator::repeated_count_min() const {
  // @@protoc_insertion_point(field_get:validator.FieldValidator.repeated_count_min)
  return _internal_repeated_count_min();
}
inline void FieldValidator::_internal_set_repeated_count_min(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  repeated_count_min_ = value;
}
inline void FieldValidator::set_repeated_count_min(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_repeated_count_min(value);
  // @@protoc_insertion_point(field_set:validator.FieldValidator.repeated_count_min)
}

// optional int64 repeated_count_max = 13;
inline bool FieldValidator::_internal_has_repeated_count_max() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FieldValidator::has_repeated_count_max() const {
  return _internal_has_repeated_count_max();
}
inline void FieldValidator::clear_repeated_count_max() {
  repeated_count_max_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldValidator::_internal_repeated_count_max() const {
  return repeated_count_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldValidator::repeated_count_max() const {
  // @@protoc_insertion_point(field_get:validator.FieldValidator.repeated_count_max)
  return _internal_repeated_count_max();
}
inline void FieldValidator::_internal_set_repeated_count_max(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  repeated_count_max_ = value;
}
inline void FieldValidator::set_repeated_count_max(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_repeated_count_max(value);
  // @@protoc_insertion_point(field_set:validator.FieldValidator.repeated_count_max)
}

// optional int64 length_gt = 14;
inline bool FieldValidator::_internal_has_length_gt() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FieldValidator::has_length_gt() const {
  return _internal_has_length_gt();
}
inline void FieldValidator::clear_length_gt() {
  length_gt_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldValidator::_internal_length_gt() const {
  return length_gt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldValidator::length_gt() const {
  // @@protoc_insertion_point(field_get:validator.FieldValidator.length_gt)
  return _internal_length_gt();
}
inline void FieldValidator::_internal_set_length_gt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00008000u;
  length_gt_ = value;
}
inline void FieldValidator::set_length_gt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_length_gt(value);
  // @@protoc_insertion_point(field_set:validator.FieldValidator.length_gt)
}

// optional int64 length_lt = 15;
inline bool FieldValidator::_internal_has_length_lt() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool FieldValidator::has_length_lt() const {
  return _internal_has_length_lt();
}
inline void FieldValidator::clear_length_lt() {
  length_lt_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldValidator::_internal_length_lt() const {
  return length_lt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldValidator::length_lt() const {
  // @@protoc_insertion_point(field_get:validator.FieldValidator.length_lt)
  return _internal_length_lt();
}
inline void FieldValidator::_internal_set_length_lt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00010000u;
  length_lt_ = value;
}
inline void FieldValidator::set_length_lt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_length_lt(value);
  // @@protoc_insertion_point(field_set:validator.FieldValidator.length_lt)
}

// optional int64 length_eq = 16;
inline bool FieldValidator::_internal_has_length_eq() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool FieldValidator::has_length_eq() const {
  return _internal_has_length_eq();
}
inline void FieldValidator::clear_length_eq() {
  length_eq_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldValidator::_internal_length_eq() const {
  return length_eq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldValidator::length_eq() const {
  // @@protoc_insertion_point(field_get:validator.FieldValidator.length_eq)
  return _internal_length_eq();
}
inline void FieldValidator::_internal_set_length_eq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00020000u;
  length_eq_ = value;
}
inline void FieldValidator::set_length_eq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_length_eq(value);
  // @@protoc_insertion_point(field_set:validator.FieldValidator.length_eq)
}

// optional bool is_in_enum = 17;
inline bool FieldValidator::_internal_has_is_in_enum() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FieldValidator::has_is_in_enum() const {
  return _internal_has_is_in_enum();
}
inline void FieldValidator::clear_is_in_enum() {
  is_in_enum_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool FieldValidator::_internal_is_in_enum() const {
  return is_in_enum_;
}
inline bool FieldValidator::is_in_enum() const {
  // @@protoc_insertion_point(field_get:validator.FieldValidator.is_in_enum)
  return _internal_is_in_enum();
}
inline void FieldValidator::_internal_set_is_in_enum(bool value) {
  _has_bits_[0] |= 0x00001000u;
  is_in_enum_ = value;
}
inline void FieldValidator::set_is_in_enum(bool value) {
  _internal_set_is_in_enum(value);
  // @@protoc_insertion_point(field_set:validator.FieldValidator.is_in_enum)
}

// optional int32 uuid_ver = 18;
inline bool FieldValidator::_internal_has_uuid_ver() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FieldValidator::has_uuid_ver() const {
  return _internal_has_uuid_ver();
}
inline void FieldValidator::clear_uuid_ver() {
  uuid_ver_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldValidator::_internal_uuid_ver() const {
  return uuid_ver_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldValidator::uuid_ver() const {
  // @@protoc_insertion_point(field_get:validator.FieldValidator.uuid_ver)
  return _internal_uuid_ver();
}
inline void FieldValidator::_internal_set_uuid_ver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  uuid_ver_ = value;
}
inline void FieldValidator::set_uuid_ver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uuid_ver(value);
  // @@protoc_insertion_point(field_set:validator.FieldValidator.uuid_ver)
}

// -------------------------------------------------------------------

// OneofValidator

// optional bool required = 1;
inline bool OneofValidator::_internal_has_required() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OneofValidator::has_required() const {
  return _internal_has_required();
}
inline void OneofValidator::clear_required() {
  required_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool OneofValidator::_internal_required() const {
  return required_;
}
inline bool OneofValidator::required() const {
  // @@protoc_insertion_point(field_get:validator.OneofValidator.required)
  return _internal_required();
}
inline void OneofValidator::_internal_set_required(bool value) {
  _has_bits_[0] |= 0x00000001u;
  required_ = value;
}
inline void OneofValidator::set_required(bool value) {
  _internal_set_required(value);
  // @@protoc_insertion_point(field_set:validator.OneofValidator.required)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace validator

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto
