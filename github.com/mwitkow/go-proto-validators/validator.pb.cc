// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/mwitkow/go-proto-validators/validator.proto

#include "github.com/mwitkow/go-proto-validators/validator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldValidator_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OneofValidator_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto;
namespace validator {
class FieldValidatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldValidator> _instance;
} _FieldValidator_default_instance_;
class OneofValidatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OneofValidator> _instance;
} _OneofValidator_default_instance_;
}  // namespace validator
static void InitDefaultsscc_info_FieldValidator_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::validator::_FieldValidator_default_instance_;
    new (ptr) ::validator::FieldValidator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::validator::FieldValidator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldValidator_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FieldValidator_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto}, {}};

static void InitDefaultsscc_info_OneofValidator_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::validator::_OneofValidator_default_instance_;
    new (ptr) ::validator::OneofValidator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::validator::OneofValidator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OneofValidator_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OneofValidator_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::validator::FieldValidator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::validator::FieldValidator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::validator::FieldValidator, regex_),
  PROTOBUF_FIELD_OFFSET(::validator::FieldValidator, int_gt_),
  PROTOBUF_FIELD_OFFSET(::validator::FieldValidator, int_lt_),
  PROTOBUF_FIELD_OFFSET(::validator::FieldValidator, msg_exists_),
  PROTOBUF_FIELD_OFFSET(::validator::FieldValidator, human_error_),
  PROTOBUF_FIELD_OFFSET(::validator::FieldValidator, float_gt_),
  PROTOBUF_FIELD_OFFSET(::validator::FieldValidator, float_lt_),
  PROTOBUF_FIELD_OFFSET(::validator::FieldValidator, float_epsilon_),
  PROTOBUF_FIELD_OFFSET(::validator::FieldValidator, float_gte_),
  PROTOBUF_FIELD_OFFSET(::validator::FieldValidator, float_lte_),
  PROTOBUF_FIELD_OFFSET(::validator::FieldValidator, string_not_empty_),
  PROTOBUF_FIELD_OFFSET(::validator::FieldValidator, repeated_count_min_),
  PROTOBUF_FIELD_OFFSET(::validator::FieldValidator, repeated_count_max_),
  PROTOBUF_FIELD_OFFSET(::validator::FieldValidator, length_gt_),
  PROTOBUF_FIELD_OFFSET(::validator::FieldValidator, length_lt_),
  PROTOBUF_FIELD_OFFSET(::validator::FieldValidator, length_eq_),
  PROTOBUF_FIELD_OFFSET(::validator::FieldValidator, is_in_enum_),
  PROTOBUF_FIELD_OFFSET(::validator::FieldValidator, uuid_ver_),
  0,
  2,
  3,
  10,
  1,
  4,
  5,
  6,
  7,
  8,
  11,
  9,
  14,
  15,
  16,
  17,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::validator::OneofValidator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::validator::OneofValidator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::validator::OneofValidator, required_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 23, sizeof(::validator::FieldValidator)},
  { 41, 47, sizeof(::validator::OneofValidator)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::validator::_FieldValidator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::validator::_OneofValidator_default_instance_),
};

const char descriptor_table_protodef_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n6github.com/mwitkow/go-proto-validators"
  "/validator.proto\022\tvalidator\032 google/prot"
  "obuf/descriptor.proto\"\372\002\n\016FieldValidator"
  "\022\r\n\005regex\030\001 \001(\t\022\016\n\006int_gt\030\002 \001(\003\022\016\n\006int_l"
  "t\030\003 \001(\003\022\022\n\nmsg_exists\030\004 \001(\010\022\023\n\013human_err"
  "or\030\005 \001(\t\022\020\n\010float_gt\030\006 \001(\001\022\020\n\010float_lt\030\007"
  " \001(\001\022\025\n\rfloat_epsilon\030\010 \001(\001\022\021\n\tfloat_gte"
  "\030\t \001(\001\022\021\n\tfloat_lte\030\n \001(\001\022\030\n\020string_not_"
  "empty\030\013 \001(\010\022\032\n\022repeated_count_min\030\014 \001(\003\022"
  "\032\n\022repeated_count_max\030\r \001(\003\022\021\n\tlength_gt"
  "\030\016 \001(\003\022\021\n\tlength_lt\030\017 \001(\003\022\021\n\tlength_eq\030\020"
  " \001(\003\022\022\n\nis_in_enum\030\021 \001(\010\022\020\n\010uuid_ver\030\022 \001"
  "(\005\"\"\n\016OneofValidator\022\020\n\010required\030\001 \001(\010:I"
  "\n\005field\022\035.google.protobuf.FieldOptions\030\374"
  "\373\003 \001(\0132\031.validator.FieldValidator:I\n\005one"
  "of\022\035.google.protobuf.OneofOptions\030\375\373\003 \001("
  "\0132\031.validator.OneofValidatorB\013Z\tvalidato"
  "r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto_sccs[2] = {
  &scc_info_FieldValidator_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto.base,
  &scc_info_OneofValidator_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto = {
  false, false, descriptor_table_protodef_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto, "github.com/mwitkow/go-proto-validators/validator.proto", 681,
  &descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto_once, descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto_sccs, descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto::offsets,
  file_level_metadata_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto, 2, file_level_enum_descriptors_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto, file_level_service_descriptors_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto)), true);
namespace validator {

// ===================================================================

void FieldValidator::InitAsDefaultInstance() {
}
class FieldValidator::_Internal {
 public:
  using HasBits = decltype(std::declval<FieldValidator>()._has_bits_);
  static void set_has_regex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_int_gt(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_int_lt(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_msg_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_human_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_float_gt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_float_lt(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_float_epsilon(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_float_gte(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_float_lte(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_string_not_empty(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_repeated_count_min(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_repeated_count_max(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_length_gt(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_length_lt(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_length_eq(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_is_in_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_uuid_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

FieldValidator::FieldValidator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:validator.FieldValidator)
}
FieldValidator::FieldValidator(const FieldValidator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_regex()) {
    regex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_regex(),
      GetArena());
  }
  human_error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_human_error()) {
    human_error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_human_error(),
      GetArena());
  }
  ::memcpy(&int_gt_, &from.int_gt_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_eq_) -
    reinterpret_cast<char*>(&int_gt_)) + sizeof(length_eq_));
  // @@protoc_insertion_point(copy_constructor:validator.FieldValidator)
}

void FieldValidator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FieldValidator_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto.base);
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  human_error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&int_gt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_eq_) -
      reinterpret_cast<char*>(&int_gt_)) + sizeof(length_eq_));
}

FieldValidator::~FieldValidator() {
  // @@protoc_insertion_point(destructor:validator.FieldValidator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FieldValidator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  human_error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FieldValidator::ArenaDtor(void* object) {
  FieldValidator* _this = reinterpret_cast< FieldValidator* >(object);
  (void)_this;
}
void FieldValidator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FieldValidator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldValidator& FieldValidator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldValidator_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto.base);
  return *internal_default_instance();
}


void FieldValidator::Clear() {
// @@protoc_insertion_point(message_clear_start:validator.FieldValidator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      regex_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      human_error_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&int_gt_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&float_gte_) -
        reinterpret_cast<char*>(&int_gt_)) + sizeof(float_gte_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&float_lte_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_gt_) -
        reinterpret_cast<char*>(&float_lte_)) + sizeof(length_gt_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&length_lt_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_eq_) -
        reinterpret_cast<char*>(&length_lt_)) + sizeof(length_eq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldValidator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string regex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_regex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "validator.FieldValidator.regex");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 int_gt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_int_gt(&has_bits);
          int_gt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 int_lt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_int_lt(&has_bits);
          int_lt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool msg_exists = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_msg_exists(&has_bits);
          msg_exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string human_error = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_human_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "validator.FieldValidator.human_error");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double float_gt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_float_gt(&has_bits);
          float_gt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double float_lt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_float_lt(&has_bits);
          float_lt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double float_epsilon = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_float_epsilon(&has_bits);
          float_epsilon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double float_gte = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_float_gte(&has_bits);
          float_gte_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double float_lte = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_float_lte(&has_bits);
          float_lte_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool string_not_empty = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_string_not_empty(&has_bits);
          string_not_empty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 repeated_count_min = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_repeated_count_min(&has_bits);
          repeated_count_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 repeated_count_max = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_repeated_count_max(&has_bits);
          repeated_count_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 length_gt = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_length_gt(&has_bits);
          length_gt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 length_lt = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_length_lt(&has_bits);
          length_lt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 length_eq = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_length_eq(&has_bits);
          length_eq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_in_enum = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_is_in_enum(&has_bits);
          is_in_enum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 uuid_ver = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_uuid_ver(&has_bits);
          uuid_ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldValidator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:validator.FieldValidator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string regex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_regex().data(), static_cast<int>(this->_internal_regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "validator.FieldValidator.regex");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_regex(), target);
  }

  // optional int64 int_gt = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_int_gt(), target);
  }

  // optional int64 int_lt = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_int_lt(), target);
  }

  // optional bool msg_exists = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_msg_exists(), target);
  }

  // optional string human_error = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_human_error().data(), static_cast<int>(this->_internal_human_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "validator.FieldValidator.human_error");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_human_error(), target);
  }

  // optional double float_gt = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_float_gt(), target);
  }

  // optional double float_lt = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_float_lt(), target);
  }

  // optional double float_epsilon = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_float_epsilon(), target);
  }

  // optional double float_gte = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_float_gte(), target);
  }

  // optional double float_lte = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_float_lte(), target);
  }

  // optional bool string_not_empty = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_string_not_empty(), target);
  }

  // optional int64 repeated_count_min = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_repeated_count_min(), target);
  }

  // optional int64 repeated_count_max = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_repeated_count_max(), target);
  }

  // optional int64 length_gt = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_length_gt(), target);
  }

  // optional int64 length_lt = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_length_lt(), target);
  }

  // optional int64 length_eq = 16;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_length_eq(), target);
  }

  // optional bool is_in_enum = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_is_in_enum(), target);
  }

  // optional int32 uuid_ver = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_uuid_ver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validator.FieldValidator)
  return target;
}

size_t FieldValidator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validator.FieldValidator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string regex = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_regex());
    }

    // optional string human_error = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_human_error());
    }

    // optional int64 int_gt = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_int_gt());
    }

    // optional int64 int_lt = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_int_lt());
    }

    // optional double float_gt = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double float_lt = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double float_epsilon = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double float_gte = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double float_lte = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional int64 repeated_count_min = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_repeated_count_min());
    }

    // optional bool msg_exists = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool string_not_empty = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool is_in_enum = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional int32 uuid_ver = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_uuid_ver());
    }

    // optional int64 repeated_count_max = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_repeated_count_max());
    }

    // optional int64 length_gt = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_length_gt());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional int64 length_lt = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_length_lt());
    }

    // optional int64 length_eq = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_length_eq());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldValidator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validator.FieldValidator)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldValidator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldValidator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validator.FieldValidator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validator.FieldValidator)
    MergeFrom(*source);
  }
}

void FieldValidator::MergeFrom(const FieldValidator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validator.FieldValidator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_regex(from._internal_regex());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_human_error(from._internal_human_error());
    }
    if (cached_has_bits & 0x00000004u) {
      int_gt_ = from.int_gt_;
    }
    if (cached_has_bits & 0x00000008u) {
      int_lt_ = from.int_lt_;
    }
    if (cached_has_bits & 0x00000010u) {
      float_gt_ = from.float_gt_;
    }
    if (cached_has_bits & 0x00000020u) {
      float_lt_ = from.float_lt_;
    }
    if (cached_has_bits & 0x00000040u) {
      float_epsilon_ = from.float_epsilon_;
    }
    if (cached_has_bits & 0x00000080u) {
      float_gte_ = from.float_gte_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      float_lte_ = from.float_lte_;
    }
    if (cached_has_bits & 0x00000200u) {
      repeated_count_min_ = from.repeated_count_min_;
    }
    if (cached_has_bits & 0x00000400u) {
      msg_exists_ = from.msg_exists_;
    }
    if (cached_has_bits & 0x00000800u) {
      string_not_empty_ = from.string_not_empty_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_in_enum_ = from.is_in_enum_;
    }
    if (cached_has_bits & 0x00002000u) {
      uuid_ver_ = from.uuid_ver_;
    }
    if (cached_has_bits & 0x00004000u) {
      repeated_count_max_ = from.repeated_count_max_;
    }
    if (cached_has_bits & 0x00008000u) {
      length_gt_ = from.length_gt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      length_lt_ = from.length_lt_;
    }
    if (cached_has_bits & 0x00020000u) {
      length_eq_ = from.length_eq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FieldValidator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validator.FieldValidator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldValidator::CopyFrom(const FieldValidator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validator.FieldValidator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldValidator::IsInitialized() const {
  return true;
}

void FieldValidator::InternalSwap(FieldValidator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  regex_.Swap(&other->regex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  human_error_.Swap(&other->human_error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FieldValidator, length_eq_)
      + sizeof(FieldValidator::length_eq_)
      - PROTOBUF_FIELD_OFFSET(FieldValidator, int_gt_)>(
          reinterpret_cast<char*>(&int_gt_),
          reinterpret_cast<char*>(&other->int_gt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldValidator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OneofValidator::InitAsDefaultInstance() {
}
class OneofValidator::_Internal {
 public:
  using HasBits = decltype(std::declval<OneofValidator>()._has_bits_);
  static void set_has_required(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OneofValidator::OneofValidator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:validator.OneofValidator)
}
OneofValidator::OneofValidator(const OneofValidator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  required_ = from.required_;
  // @@protoc_insertion_point(copy_constructor:validator.OneofValidator)
}

void OneofValidator::SharedCtor() {
  required_ = false;
}

OneofValidator::~OneofValidator() {
  // @@protoc_insertion_point(destructor:validator.OneofValidator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OneofValidator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OneofValidator::ArenaDtor(void* object) {
  OneofValidator* _this = reinterpret_cast< OneofValidator* >(object);
  (void)_this;
}
void OneofValidator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OneofValidator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OneofValidator& OneofValidator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OneofValidator_github_2ecom_2fmwitkow_2fgo_2dproto_2dvalidators_2fvalidator_2eproto.base);
  return *internal_default_instance();
}


void OneofValidator::Clear() {
// @@protoc_insertion_point(message_clear_start:validator.OneofValidator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  required_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OneofValidator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool required = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_required(&has_bits);
          required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OneofValidator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:validator.OneofValidator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool required = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_required(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:validator.OneofValidator)
  return target;
}

size_t OneofValidator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:validator.OneofValidator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool required = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OneofValidator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:validator.OneofValidator)
  GOOGLE_DCHECK_NE(&from, this);
  const OneofValidator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OneofValidator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:validator.OneofValidator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:validator.OneofValidator)
    MergeFrom(*source);
  }
}

void OneofValidator::MergeFrom(const OneofValidator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:validator.OneofValidator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_required()) {
    _internal_set_required(from._internal_required());
  }
}

void OneofValidator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:validator.OneofValidator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneofValidator::CopyFrom(const OneofValidator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:validator.OneofValidator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneofValidator::IsInitialized() const {
  return true;
}

void OneofValidator::InternalSwap(OneofValidator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(required_, other->required_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OneofValidator::GetMetadata() const {
  return GetMetadataStatic();
}

::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::validator::FieldValidator >, 11, false >
  field(kFieldFieldNumber, ::validator::FieldValidator::default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::OneofOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::validator::OneofValidator >, 11, false >
  oneof(kOneofFieldNumber, ::validator::OneofValidator::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace validator
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::validator::FieldValidator* Arena::CreateMaybeMessage< ::validator::FieldValidator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::validator::FieldValidator >(arena);
}
template<> PROTOBUF_NOINLINE ::validator::OneofValidator* Arena::CreateMaybeMessage< ::validator::OneofValidator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::validator::OneofValidator >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
