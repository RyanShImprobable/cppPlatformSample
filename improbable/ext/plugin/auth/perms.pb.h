// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improbable/ext/plugin/auth/perms.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_improbable_2fext_2fplugin_2fauth_2fperms_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_improbable_2fext_2fplugin_2fauth_2fperms_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_improbable_2fext_2fplugin_2fauth_2fperms_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_improbable_2fext_2fplugin_2fauth_2fperms_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_improbable_2fext_2fplugin_2fauth_2fperms_2eproto;
namespace perms {
class Delegation;
class DelegationDefaultTypeInternal;
extern DelegationDefaultTypeInternal _Delegation_default_instance_;
class Permission;
class PermissionDefaultTypeInternal;
extern PermissionDefaultTypeInternal _Permission_default_instance_;
}  // namespace perms
PROTOBUF_NAMESPACE_OPEN
template<> ::perms::Delegation* Arena::CreateMaybeMessage<::perms::Delegation>(Arena*);
template<> ::perms::Permission* Arena::CreateMaybeMessage<::perms::Permission>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perms {

// ===================================================================

class Permission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perms.Permission) */ {
 public:
  inline Permission() : Permission(nullptr) {};
  virtual ~Permission();

  Permission(const Permission& from);
  Permission(Permission&& from) noexcept
    : Permission() {
    *this = ::std::move(from);
  }

  inline Permission& operator=(const Permission& from) {
    CopyFrom(from);
    return *this;
  }
  inline Permission& operator=(Permission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Permission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Permission* internal_default_instance() {
    return reinterpret_cast<const Permission*>(
               &_Permission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Permission& a, Permission& b) {
    a.Swap(&b);
  }
  inline void Swap(Permission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Permission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Permission* New() const final {
    return CreateMaybeMessage<Permission>(nullptr);
  }

  Permission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Permission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Permission& from);
  void MergeFrom(const Permission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Permission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perms.Permission";
  }
  protected:
  explicit Permission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fext_2fplugin_2fauth_2fperms_2eproto);
    return ::descriptor_table_improbable_2fext_2fplugin_2fauth_2fperms_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 70131,
    kActionFieldNumber = 70132,
  };
  // string resource = 70131;
  void clear_resource();
  const std::string& resource() const;
  void set_resource(const std::string& value);
  void set_resource(std::string&& value);
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  std::string* mutable_resource();
  std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_resource();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_resource(
      std::string* resource);
  private:
  const std::string& _internal_resource() const;
  void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // string action = 70132;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_action();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_action(
      std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:perms.Permission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fext_2fplugin_2fauth_2fperms_2eproto;
};
// -------------------------------------------------------------------

class Delegation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perms.Delegation) */ {
 public:
  inline Delegation() : Delegation(nullptr) {};
  virtual ~Delegation();

  Delegation(const Delegation& from);
  Delegation(Delegation&& from) noexcept
    : Delegation() {
    *this = ::std::move(from);
  }

  inline Delegation& operator=(const Delegation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Delegation& operator=(Delegation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Delegation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Delegation* internal_default_instance() {
    return reinterpret_cast<const Delegation*>(
               &_Delegation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Delegation& a, Delegation& b) {
    a.Swap(&b);
  }
  inline void Swap(Delegation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Delegation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Delegation* New() const final {
    return CreateMaybeMessage<Delegation>(nullptr);
  }

  Delegation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Delegation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Delegation& from);
  void MergeFrom(const Delegation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Delegation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perms.Delegation";
  }
  protected:
  explicit Delegation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fext_2fplugin_2fauth_2fperms_2eproto);
    return ::descriptor_table_improbable_2fext_2fplugin_2fauth_2fperms_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPermissionV1FieldNumber = 2,
    kErrorMessageFieldNumber = 4,
    kPermissionV2FieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string permission_v1 = 2;
  void clear_permission_v1();
  const std::string& permission_v1() const;
  void set_permission_v1(const std::string& value);
  void set_permission_v1(std::string&& value);
  void set_permission_v1(const char* value);
  void set_permission_v1(const char* value, size_t size);
  std::string* mutable_permission_v1();
  std::string* release_permission_v1();
  void set_allocated_permission_v1(std::string* permission_v1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_permission_v1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_permission_v1(
      std::string* permission_v1);
  private:
  const std::string& _internal_permission_v1() const;
  void _internal_set_permission_v1(const std::string& value);
  std::string* _internal_mutable_permission_v1();
  public:

  // string error_message = 4;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_error_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_error_message(
      std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .perms.Permission permission_v2 = 3;
  bool has_permission_v2() const;
  private:
  bool _internal_has_permission_v2() const;
  public:
  void clear_permission_v2();
  const ::perms::Permission& permission_v2() const;
  ::perms::Permission* release_permission_v2();
  ::perms::Permission* mutable_permission_v2();
  void set_allocated_permission_v2(::perms::Permission* permission_v2);
  private:
  const ::perms::Permission& _internal_permission_v2() const;
  ::perms::Permission* _internal_mutable_permission_v2();
  public:
  void unsafe_arena_set_allocated_permission_v2(
      ::perms::Permission* permission_v2);
  ::perms::Permission* unsafe_arena_release_permission_v2();

  // @@protoc_insertion_point(class_scope:perms.Delegation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr permission_v1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::perms::Permission* permission_v2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fext_2fplugin_2fauth_2fperms_2eproto;
};
// ===================================================================

static const int kRequiredFieldNumber = 70130;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::perms::Permission >, 11, false >
  required;
static const int kDelegatedFieldNumber = 70131;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::perms::Delegation >, 11, false >
  delegated;
static const int kNotRequiredFieldNumber = 70132;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  not_required;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Permission

// string resource = 70131;
inline void Permission::clear_resource() {
  resource_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Permission::resource() const {
  // @@protoc_insertion_point(field_get:perms.Permission.resource)
  return _internal_resource();
}
inline void Permission::set_resource(const std::string& value) {
  _internal_set_resource(value);
  // @@protoc_insertion_point(field_set:perms.Permission.resource)
}
inline std::string* Permission::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:perms.Permission.resource)
  return _internal_mutable_resource();
}
inline const std::string& Permission::_internal_resource() const {
  return resource_.Get();
}
inline void Permission::_internal_set_resource(const std::string& value) {
  
  resource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Permission::set_resource(std::string&& value) {
  
  resource_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perms.Permission.resource)
}
inline void Permission::set_resource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perms.Permission.resource)
}
inline void Permission::set_resource(const char* value,
    size_t size) {
  
  resource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perms.Permission.resource)
}
inline std::string* Permission::_internal_mutable_resource() {
  
  return resource_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Permission::release_resource() {
  // @@protoc_insertion_point(field_release:perms.Permission.resource)
  return resource_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Permission::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perms.Permission.resource)
}
inline std::string* Permission::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perms.Permission.resource)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return resource_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Permission::unsafe_arena_set_allocated_resource(
    std::string* resource) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      resource, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perms.Permission.resource)
}

// string action = 70132;
inline void Permission::clear_action() {
  action_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Permission::action() const {
  // @@protoc_insertion_point(field_get:perms.Permission.action)
  return _internal_action();
}
inline void Permission::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:perms.Permission.action)
}
inline std::string* Permission::mutable_action() {
  // @@protoc_insertion_point(field_mutable:perms.Permission.action)
  return _internal_mutable_action();
}
inline const std::string& Permission::_internal_action() const {
  return action_.Get();
}
inline void Permission::_internal_set_action(const std::string& value) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Permission::set_action(std::string&& value) {
  
  action_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perms.Permission.action)
}
inline void Permission::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perms.Permission.action)
}
inline void Permission::set_action(const char* value,
    size_t size) {
  
  action_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perms.Permission.action)
}
inline std::string* Permission::_internal_mutable_action() {
  
  return action_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Permission::release_action() {
  // @@protoc_insertion_point(field_release:perms.Permission.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Permission::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perms.Permission.action)
}
inline std::string* Permission::unsafe_arena_release_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perms.Permission.action)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return action_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Permission::unsafe_arena_set_allocated_action(
    std::string* action) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (action != nullptr) {
    
  } else {
    
  }
  action_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      action, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perms.Permission.action)
}

// -------------------------------------------------------------------

// Delegation

// string name = 1;
inline void Delegation::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Delegation::name() const {
  // @@protoc_insertion_point(field_get:perms.Delegation.name)
  return _internal_name();
}
inline void Delegation::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:perms.Delegation.name)
}
inline std::string* Delegation::mutable_name() {
  // @@protoc_insertion_point(field_mutable:perms.Delegation.name)
  return _internal_mutable_name();
}
inline const std::string& Delegation::_internal_name() const {
  return name_.Get();
}
inline void Delegation::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Delegation::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perms.Delegation.name)
}
inline void Delegation::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perms.Delegation.name)
}
inline void Delegation::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perms.Delegation.name)
}
inline std::string* Delegation::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Delegation::release_name() {
  // @@protoc_insertion_point(field_release:perms.Delegation.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Delegation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perms.Delegation.name)
}
inline std::string* Delegation::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perms.Delegation.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Delegation::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perms.Delegation.name)
}

// string permission_v1 = 2;
inline void Delegation::clear_permission_v1() {
  permission_v1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Delegation::permission_v1() const {
  // @@protoc_insertion_point(field_get:perms.Delegation.permission_v1)
  return _internal_permission_v1();
}
inline void Delegation::set_permission_v1(const std::string& value) {
  _internal_set_permission_v1(value);
  // @@protoc_insertion_point(field_set:perms.Delegation.permission_v1)
}
inline std::string* Delegation::mutable_permission_v1() {
  // @@protoc_insertion_point(field_mutable:perms.Delegation.permission_v1)
  return _internal_mutable_permission_v1();
}
inline const std::string& Delegation::_internal_permission_v1() const {
  return permission_v1_.Get();
}
inline void Delegation::_internal_set_permission_v1(const std::string& value) {
  
  permission_v1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Delegation::set_permission_v1(std::string&& value) {
  
  permission_v1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perms.Delegation.permission_v1)
}
inline void Delegation::set_permission_v1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  permission_v1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perms.Delegation.permission_v1)
}
inline void Delegation::set_permission_v1(const char* value,
    size_t size) {
  
  permission_v1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perms.Delegation.permission_v1)
}
inline std::string* Delegation::_internal_mutable_permission_v1() {
  
  return permission_v1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Delegation::release_permission_v1() {
  // @@protoc_insertion_point(field_release:perms.Delegation.permission_v1)
  return permission_v1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Delegation::set_allocated_permission_v1(std::string* permission_v1) {
  if (permission_v1 != nullptr) {
    
  } else {
    
  }
  permission_v1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), permission_v1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perms.Delegation.permission_v1)
}
inline std::string* Delegation::unsafe_arena_release_permission_v1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perms.Delegation.permission_v1)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return permission_v1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Delegation::unsafe_arena_set_allocated_permission_v1(
    std::string* permission_v1) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (permission_v1 != nullptr) {
    
  } else {
    
  }
  permission_v1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      permission_v1, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perms.Delegation.permission_v1)
}

// .perms.Permission permission_v2 = 3;
inline bool Delegation::_internal_has_permission_v2() const {
  return this != internal_default_instance() && permission_v2_ != nullptr;
}
inline bool Delegation::has_permission_v2() const {
  return _internal_has_permission_v2();
}
inline void Delegation::clear_permission_v2() {
  if (GetArena() == nullptr && permission_v2_ != nullptr) {
    delete permission_v2_;
  }
  permission_v2_ = nullptr;
}
inline const ::perms::Permission& Delegation::_internal_permission_v2() const {
  const ::perms::Permission* p = permission_v2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perms::Permission*>(
      &::perms::_Permission_default_instance_);
}
inline const ::perms::Permission& Delegation::permission_v2() const {
  // @@protoc_insertion_point(field_get:perms.Delegation.permission_v2)
  return _internal_permission_v2();
}
inline void Delegation::unsafe_arena_set_allocated_permission_v2(
    ::perms::Permission* permission_v2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(permission_v2_);
  }
  permission_v2_ = permission_v2;
  if (permission_v2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perms.Delegation.permission_v2)
}
inline ::perms::Permission* Delegation::release_permission_v2() {
  auto temp = unsafe_arena_release_permission_v2();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perms::Permission* Delegation::unsafe_arena_release_permission_v2() {
  // @@protoc_insertion_point(field_release:perms.Delegation.permission_v2)
  
  ::perms::Permission* temp = permission_v2_;
  permission_v2_ = nullptr;
  return temp;
}
inline ::perms::Permission* Delegation::_internal_mutable_permission_v2() {
  
  if (permission_v2_ == nullptr) {
    auto* p = CreateMaybeMessage<::perms::Permission>(GetArena());
    permission_v2_ = p;
  }
  return permission_v2_;
}
inline ::perms::Permission* Delegation::mutable_permission_v2() {
  // @@protoc_insertion_point(field_mutable:perms.Delegation.permission_v2)
  return _internal_mutable_permission_v2();
}
inline void Delegation::set_allocated_permission_v2(::perms::Permission* permission_v2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete permission_v2_;
  }
  if (permission_v2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(permission_v2);
    if (message_arena != submessage_arena) {
      permission_v2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, permission_v2, submessage_arena);
    }
    
  } else {
    
  }
  permission_v2_ = permission_v2;
  // @@protoc_insertion_point(field_set_allocated:perms.Delegation.permission_v2)
}

// string error_message = 4;
inline void Delegation::clear_error_message() {
  error_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Delegation::error_message() const {
  // @@protoc_insertion_point(field_get:perms.Delegation.error_message)
  return _internal_error_message();
}
inline void Delegation::set_error_message(const std::string& value) {
  _internal_set_error_message(value);
  // @@protoc_insertion_point(field_set:perms.Delegation.error_message)
}
inline std::string* Delegation::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable:perms.Delegation.error_message)
  return _internal_mutable_error_message();
}
inline const std::string& Delegation::_internal_error_message() const {
  return error_message_.Get();
}
inline void Delegation::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Delegation::set_error_message(std::string&& value) {
  
  error_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perms.Delegation.error_message)
}
inline void Delegation::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perms.Delegation.error_message)
}
inline void Delegation::set_error_message(const char* value,
    size_t size) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perms.Delegation.error_message)
}
inline std::string* Delegation::_internal_mutable_error_message() {
  
  return error_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Delegation::release_error_message() {
  // @@protoc_insertion_point(field_release:perms.Delegation.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Delegation::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perms.Delegation.error_message)
}
inline std::string* Delegation::unsafe_arena_release_error_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perms.Delegation.error_message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return error_message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Delegation::unsafe_arena_set_allocated_error_message(
    std::string* error_message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      error_message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perms.Delegation.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perms

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_improbable_2fext_2fplugin_2fauth_2fperms_2eproto
