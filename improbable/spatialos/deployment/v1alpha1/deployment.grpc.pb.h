// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: improbable/spatialos/deployment/v1alpha1/deployment.proto
// Original file comments:
// Provides methods to access deployments.
//
#ifndef GRPC_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto__INCLUDED
#define GRPC_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto__INCLUDED

#include "improbable/spatialos/deployment/v1alpha1/deployment.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace improbable {
namespace spatialos {
namespace deployment {
namespace v1alpha1 {

// DeploymentService provides methods for managing deployments.
class DeploymentService final {
 public:
  static constexpr char const* service_full_name() {
    return "improbable.spatialos.deployment.v1alpha1.DeploymentService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates a deployment.
    //
    // The returned operation result is of type `deployment` upon successful creation.
    virtual ::grpc::Status CreateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncCreateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncCreateDeploymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncCreateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncCreateDeploymentRaw(context, request, cq));
    }
    // Deletes a deployment.
    //
    // The returned operation result is of type `DeleteDeploymentResponse` upon successful deletion.
    virtual ::grpc::Status DeleteDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncDeleteDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncDeleteDeploymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncDeleteDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncDeleteDeploymentRaw(context, request, cq));
    }
    // Gets a deployment as identified by `id`.
    virtual ::grpc::Status GetDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest& request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>> AsyncGetDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>>(AsyncGetDeploymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>> PrepareAsyncGetDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>>(PrepareAsyncGetDeploymentRaw(context, request, cq));
    }
    // Gets a deployment as identified by `name`.
    virtual ::grpc::Status GetRunningDeploymentByName(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest& request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>> AsyncGetRunningDeploymentByName(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>>(AsyncGetRunningDeploymentByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>> PrepareAsyncGetRunningDeploymentByName(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>>(PrepareAsyncGetRunningDeploymentByNameRaw(context, request, cq));
    }
    // Lists deployments under a given project.
    virtual ::grpc::Status ListDeployments(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest& request, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse>> AsyncListDeployments(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse>>(AsyncListDeploymentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse>> PrepareAsyncListDeployments(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse>>(PrepareAsyncListDeploymentsRaw(context, request, cq));
    }
    // SetDeploymentTags sets the tags on a deployment as identified by the `deployment_id`.
    virtual ::grpc::Status SetDeploymentTags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest& request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse>> AsyncSetDeploymentTags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse>>(AsyncSetDeploymentTagsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse>> PrepareAsyncSetDeploymentTags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse>>(PrepareAsyncSetDeploymentTagsRaw(context, request, cq));
    }
    // SetDeploymentWorkerCapacities sets the worker capacities on a deployment as identified by the
    // `deployment_id`.
    virtual ::grpc::Status SetDeploymentWorkerCapacities(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest& request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse>> AsyncSetDeploymentWorkerCapacities(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse>>(AsyncSetDeploymentWorkerCapacitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse>> PrepareAsyncSetDeploymentWorkerCapacities(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse>>(PrepareAsyncSetDeploymentWorkerCapacitiesRaw(context, request, cq));
    }
    // SetDeploymentWorkerFlags sets the worker flags on a deployment as identified by the
    // `deployment_id`.
    virtual ::grpc::Status SetDeploymentWorkerFlags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest& request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse>> AsyncSetDeploymentWorkerFlags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse>>(AsyncSetDeploymentWorkerFlagsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse>> PrepareAsyncSetDeploymentWorkerFlags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse>>(PrepareAsyncSetDeploymentWorkerFlagsRaw(context, request, cq));
    }
    // SetDeploymentWorkerRateLimits sets the worker rate limits on a deployment as identified by the
    // `deployment_id`.
    virtual ::grpc::Status SetDeploymentWorkerRateLimits(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest& request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse>> AsyncSetDeploymentWorkerRateLimits(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse>>(AsyncSetDeploymentWorkerRateLimitsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse>> PrepareAsyncSetDeploymentWorkerRateLimits(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse>>(PrepareAsyncSetDeploymentWorkerRateLimitsRaw(context, request, cq));
    }
    // Stops a running deployment. You can call this at any point after you've called
    // `CreateDeployment`. To restart a stopped deployment, call `CreateDeployment` with the same
    // parameters as you did to start the deployment originally.
    virtual ::grpc::Status StopDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest& request, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse>> AsyncStopDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse>>(AsyncStopDeploymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse>> PrepareAsyncStopDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse>>(PrepareAsyncStopDeploymentRaw(context, request, cq));
    }
    // Updates a deployment as identified by the deployment's `id`.
    virtual ::grpc::Status UpdateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest& request, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse>> AsyncUpdateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse>>(AsyncUpdateDeploymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse>> PrepareAsyncUpdateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse>>(PrepareAsyncUpdateDeploymentRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Creates a deployment.
      //
      // The returned operation result is of type `deployment` upon successful creation.
      virtual void CreateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest* request, ::google::longrunning::Operation* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::longrunning::Operation* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Deletes a deployment.
      //
      // The returned operation result is of type `DeleteDeploymentResponse` upon successful deletion.
      virtual void DeleteDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest* request, ::google::longrunning::Operation* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::longrunning::Operation* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Gets a deployment as identified by `id`.
      virtual void GetDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Gets a deployment as identified by `name`.
      virtual void GetRunningDeploymentByName(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRunningDeploymentByName(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetRunningDeploymentByName(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetRunningDeploymentByName(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetRunningDeploymentByName(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetRunningDeploymentByName(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Lists deployments under a given project.
      virtual void ListDeployments(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest* request, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListDeployments(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListDeployments(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest* request, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListDeployments(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest* request, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListDeployments(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListDeployments(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // SetDeploymentTags sets the tags on a deployment as identified by the `deployment_id`.
      virtual void SetDeploymentTags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDeploymentTags(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetDeploymentTags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetDeploymentTags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetDeploymentTags(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetDeploymentTags(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // SetDeploymentWorkerCapacities sets the worker capacities on a deployment as identified by the
      // `deployment_id`.
      virtual void SetDeploymentWorkerCapacities(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDeploymentWorkerCapacities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetDeploymentWorkerCapacities(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetDeploymentWorkerCapacities(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetDeploymentWorkerCapacities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetDeploymentWorkerCapacities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // SetDeploymentWorkerFlags sets the worker flags on a deployment as identified by the
      // `deployment_id`.
      virtual void SetDeploymentWorkerFlags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDeploymentWorkerFlags(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetDeploymentWorkerFlags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetDeploymentWorkerFlags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetDeploymentWorkerFlags(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetDeploymentWorkerFlags(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // SetDeploymentWorkerRateLimits sets the worker rate limits on a deployment as identified by the
      // `deployment_id`.
      virtual void SetDeploymentWorkerRateLimits(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDeploymentWorkerRateLimits(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetDeploymentWorkerRateLimits(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetDeploymentWorkerRateLimits(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetDeploymentWorkerRateLimits(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetDeploymentWorkerRateLimits(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Stops a running deployment. You can call this at any point after you've called
      // `CreateDeployment`. To restart a stopped deployment, call `CreateDeployment` with the same
      // parameters as you did to start the deployment originally.
      virtual void StopDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Updates a deployment as identified by the deployment's `id`.
      virtual void UpdateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncCreateDeploymentRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncCreateDeploymentRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncDeleteDeploymentRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncDeleteDeploymentRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>* AsyncGetDeploymentRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>* PrepareAsyncGetDeploymentRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>* AsyncGetRunningDeploymentByNameRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>* PrepareAsyncGetRunningDeploymentByNameRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse>* AsyncListDeploymentsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse>* PrepareAsyncListDeploymentsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse>* AsyncSetDeploymentTagsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse>* PrepareAsyncSetDeploymentTagsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse>* AsyncSetDeploymentWorkerCapacitiesRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse>* PrepareAsyncSetDeploymentWorkerCapacitiesRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse>* AsyncSetDeploymentWorkerFlagsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse>* PrepareAsyncSetDeploymentWorkerFlagsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse>* AsyncSetDeploymentWorkerRateLimitsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse>* PrepareAsyncSetDeploymentWorkerRateLimitsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse>* AsyncStopDeploymentRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse>* PrepareAsyncStopDeploymentRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse>* AsyncUpdateDeploymentRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse>* PrepareAsyncUpdateDeploymentRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncCreateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncCreateDeploymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncCreateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncCreateDeploymentRaw(context, request, cq));
    }
    ::grpc::Status DeleteDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncDeleteDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncDeleteDeploymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncDeleteDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncDeleteDeploymentRaw(context, request, cq));
    }
    ::grpc::Status GetDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest& request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>> AsyncGetDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>>(AsyncGetDeploymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>> PrepareAsyncGetDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>>(PrepareAsyncGetDeploymentRaw(context, request, cq));
    }
    ::grpc::Status GetRunningDeploymentByName(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest& request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>> AsyncGetRunningDeploymentByName(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>>(AsyncGetRunningDeploymentByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>> PrepareAsyncGetRunningDeploymentByName(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>>(PrepareAsyncGetRunningDeploymentByNameRaw(context, request, cq));
    }
    ::grpc::Status ListDeployments(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest& request, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse>> AsyncListDeployments(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse>>(AsyncListDeploymentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse>> PrepareAsyncListDeployments(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse>>(PrepareAsyncListDeploymentsRaw(context, request, cq));
    }
    ::grpc::Status SetDeploymentTags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest& request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse>> AsyncSetDeploymentTags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse>>(AsyncSetDeploymentTagsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse>> PrepareAsyncSetDeploymentTags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse>>(PrepareAsyncSetDeploymentTagsRaw(context, request, cq));
    }
    ::grpc::Status SetDeploymentWorkerCapacities(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest& request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse>> AsyncSetDeploymentWorkerCapacities(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse>>(AsyncSetDeploymentWorkerCapacitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse>> PrepareAsyncSetDeploymentWorkerCapacities(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse>>(PrepareAsyncSetDeploymentWorkerCapacitiesRaw(context, request, cq));
    }
    ::grpc::Status SetDeploymentWorkerFlags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest& request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse>> AsyncSetDeploymentWorkerFlags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse>>(AsyncSetDeploymentWorkerFlagsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse>> PrepareAsyncSetDeploymentWorkerFlags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse>>(PrepareAsyncSetDeploymentWorkerFlagsRaw(context, request, cq));
    }
    ::grpc::Status SetDeploymentWorkerRateLimits(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest& request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse>> AsyncSetDeploymentWorkerRateLimits(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse>>(AsyncSetDeploymentWorkerRateLimitsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse>> PrepareAsyncSetDeploymentWorkerRateLimits(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse>>(PrepareAsyncSetDeploymentWorkerRateLimitsRaw(context, request, cq));
    }
    ::grpc::Status StopDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest& request, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse>> AsyncStopDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse>>(AsyncStopDeploymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse>> PrepareAsyncStopDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse>>(PrepareAsyncStopDeploymentRaw(context, request, cq));
    }
    ::grpc::Status UpdateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest& request, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse>> AsyncUpdateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse>>(AsyncUpdateDeploymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse>> PrepareAsyncUpdateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse>>(PrepareAsyncUpdateDeploymentRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void CreateDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest* request, ::google::longrunning::Operation* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::longrunning::Operation* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void DeleteDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest* request, ::google::longrunning::Operation* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::longrunning::Operation* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetRunningDeploymentByName(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRunningDeploymentByName(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetRunningDeploymentByName(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetRunningDeploymentByName(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetRunningDeploymentByName(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetRunningDeploymentByName(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListDeployments(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest* request, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListDeployments(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListDeployments(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest* request, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListDeployments(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest* request, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListDeployments(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListDeployments(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetDeploymentTags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* response, std::function<void(::grpc::Status)>) override;
      void SetDeploymentTags(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetDeploymentTags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetDeploymentTags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetDeploymentTags(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetDeploymentTags(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetDeploymentWorkerCapacities(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* response, std::function<void(::grpc::Status)>) override;
      void SetDeploymentWorkerCapacities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetDeploymentWorkerCapacities(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetDeploymentWorkerCapacities(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetDeploymentWorkerCapacities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetDeploymentWorkerCapacities(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetDeploymentWorkerFlags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* response, std::function<void(::grpc::Status)>) override;
      void SetDeploymentWorkerFlags(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetDeploymentWorkerFlags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetDeploymentWorkerFlags(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetDeploymentWorkerFlags(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetDeploymentWorkerFlags(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetDeploymentWorkerRateLimits(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* response, std::function<void(::grpc::Status)>) override;
      void SetDeploymentWorkerRateLimits(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetDeploymentWorkerRateLimits(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetDeploymentWorkerRateLimits(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetDeploymentWorkerRateLimits(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetDeploymentWorkerRateLimits(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void StopDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* response, std::function<void(::grpc::Status)>) override;
      void StopDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateDeployment(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateDeployment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncCreateDeploymentRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncCreateDeploymentRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncDeleteDeploymentRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncDeleteDeploymentRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>* AsyncGetDeploymentRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>* PrepareAsyncGetDeploymentRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>* AsyncGetRunningDeploymentByNameRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>* PrepareAsyncGetRunningDeploymentByNameRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse>* AsyncListDeploymentsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse>* PrepareAsyncListDeploymentsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse>* AsyncSetDeploymentTagsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse>* PrepareAsyncSetDeploymentTagsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse>* AsyncSetDeploymentWorkerCapacitiesRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse>* PrepareAsyncSetDeploymentWorkerCapacitiesRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse>* AsyncSetDeploymentWorkerFlagsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse>* PrepareAsyncSetDeploymentWorkerFlagsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse>* AsyncSetDeploymentWorkerRateLimitsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse>* PrepareAsyncSetDeploymentWorkerRateLimitsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse>* AsyncStopDeploymentRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse>* PrepareAsyncStopDeploymentRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse>* AsyncUpdateDeploymentRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse>* PrepareAsyncUpdateDeploymentRaw(::grpc::ClientContext* context, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateDeployment_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteDeployment_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDeployment_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRunningDeploymentByName_;
    const ::grpc::internal::RpcMethod rpcmethod_ListDeployments_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDeploymentTags_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDeploymentWorkerCapacities_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDeploymentWorkerFlags_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDeploymentWorkerRateLimits_;
    const ::grpc::internal::RpcMethod rpcmethod_StopDeployment_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateDeployment_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates a deployment.
    //
    // The returned operation result is of type `deployment` upon successful creation.
    virtual ::grpc::Status CreateDeployment(::grpc::ServerContext* context, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest* request, ::google::longrunning::Operation* response);
    // Deletes a deployment.
    //
    // The returned operation result is of type `DeleteDeploymentResponse` upon successful deletion.
    virtual ::grpc::Status DeleteDeployment(::grpc::ServerContext* context, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest* request, ::google::longrunning::Operation* response);
    // Gets a deployment as identified by `id`.
    virtual ::grpc::Status GetDeployment(::grpc::ServerContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response);
    // Gets a deployment as identified by `name`.
    virtual ::grpc::Status GetRunningDeploymentByName(::grpc::ServerContext* context, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response);
    // Lists deployments under a given project.
    virtual ::grpc::Status ListDeployments(::grpc::ServerContext* context, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest* request, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* response);
    // SetDeploymentTags sets the tags on a deployment as identified by the `deployment_id`.
    virtual ::grpc::Status SetDeploymentTags(::grpc::ServerContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* response);
    // SetDeploymentWorkerCapacities sets the worker capacities on a deployment as identified by the
    // `deployment_id`.
    virtual ::grpc::Status SetDeploymentWorkerCapacities(::grpc::ServerContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* response);
    // SetDeploymentWorkerFlags sets the worker flags on a deployment as identified by the
    // `deployment_id`.
    virtual ::grpc::Status SetDeploymentWorkerFlags(::grpc::ServerContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* response);
    // SetDeploymentWorkerRateLimits sets the worker rate limits on a deployment as identified by the
    // `deployment_id`.
    virtual ::grpc::Status SetDeploymentWorkerRateLimits(::grpc::ServerContext* context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* response);
    // Stops a running deployment. You can call this at any point after you've called
    // `CreateDeployment`. To restart a stopped deployment, call `CreateDeployment` with the same
    // parameters as you did to start the deployment originally.
    virtual ::grpc::Status StopDeployment(::grpc::ServerContext* context, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* response);
    // Updates a deployment as identified by the deployment's `id`.
    virtual ::grpc::Status UpdateDeployment(::grpc::ServerContext* context, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateDeployment() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDeployment(::grpc::ServerContext* context, ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteDeployment() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDeployment(::grpc::ServerContext* context, ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDeployment() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeployment(::grpc::ServerContext* context, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest* request, ::grpc::ServerAsyncResponseWriter< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRunningDeploymentByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRunningDeploymentByName() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetRunningDeploymentByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRunningDeploymentByName(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRunningDeploymentByName(::grpc::ServerContext* context, ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDeployments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListDeployments() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListDeployments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDeployments(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDeployments(::grpc::ServerContext* context, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest* request, ::grpc::ServerAsyncResponseWriter< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDeploymentTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDeploymentTags() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SetDeploymentTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeploymentTags(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDeploymentTags(::grpc::ServerContext* context, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest* request, ::grpc::ServerAsyncResponseWriter< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDeploymentWorkerCapacities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDeploymentWorkerCapacities() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SetDeploymentWorkerCapacities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeploymentWorkerCapacities(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDeploymentWorkerCapacities(::grpc::ServerContext* context, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest* request, ::grpc::ServerAsyncResponseWriter< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDeploymentWorkerFlags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDeploymentWorkerFlags() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SetDeploymentWorkerFlags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeploymentWorkerFlags(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDeploymentWorkerFlags(::grpc::ServerContext* context, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest* request, ::grpc::ServerAsyncResponseWriter< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDeploymentWorkerRateLimits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDeploymentWorkerRateLimits() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SetDeploymentWorkerRateLimits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeploymentWorkerRateLimits(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDeploymentWorkerRateLimits(::grpc::ServerContext* context, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest* request, ::grpc::ServerAsyncResponseWriter< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopDeployment() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_StopDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopDeployment(::grpc::ServerContext* context, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest* request, ::grpc::ServerAsyncResponseWriter< ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateDeployment() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_UpdateDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDeployment(::grpc::ServerContext* context, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest* request, ::grpc::ServerAsyncResponseWriter< ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateDeployment<WithAsyncMethod_DeleteDeployment<WithAsyncMethod_GetDeployment<WithAsyncMethod_GetRunningDeploymentByName<WithAsyncMethod_ListDeployments<WithAsyncMethod_SetDeploymentTags<WithAsyncMethod_SetDeploymentWorkerCapacities<WithAsyncMethod_SetDeploymentWorkerFlags<WithAsyncMethod_SetDeploymentWorkerRateLimits<WithAsyncMethod_StopDeployment<WithAsyncMethod_UpdateDeployment<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateDeployment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest, ::google::longrunning::Operation>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest* request, ::google::longrunning::Operation* response) { return this->CreateDeployment(context, request, response); }));}
    void SetMessageAllocatorFor_CreateDeployment(
        ::grpc::experimental::MessageAllocator< ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest, ::google::longrunning::Operation>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest, ::google::longrunning::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateDeployment(
      ::grpc::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest* /*request*/, ::google::longrunning::Operation* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateDeployment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest* /*request*/, ::google::longrunning::Operation* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteDeployment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest, ::google::longrunning::Operation>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest* request, ::google::longrunning::Operation* response) { return this->DeleteDeployment(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteDeployment(
        ::grpc::experimental::MessageAllocator< ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest, ::google::longrunning::Operation>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest, ::google::longrunning::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteDeployment(
      ::grpc::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest* /*request*/, ::google::longrunning::Operation* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteDeployment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest* /*request*/, ::google::longrunning::Operation* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetDeployment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response) { return this->GetDeployment(context, request, response); }));}
    void SetMessageAllocatorFor_GetDeployment(
        ::grpc::experimental::MessageAllocator< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDeployment(
      ::grpc::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDeployment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRunningDeploymentByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRunningDeploymentByName() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest* request, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* response) { return this->GetRunningDeploymentByName(context, request, response); }));}
    void SetMessageAllocatorFor_GetRunningDeploymentByName(
        ::grpc::experimental::MessageAllocator< ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetRunningDeploymentByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRunningDeploymentByName(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetRunningDeploymentByName(
      ::grpc::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetRunningDeploymentByName(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListDeployments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListDeployments() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest* request, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* response) { return this->ListDeployments(context, request, response); }));}
    void SetMessageAllocatorFor_ListDeployments(
        ::grpc::experimental::MessageAllocator< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListDeployments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDeployments(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListDeployments(
      ::grpc::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListDeployments(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetDeploymentTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetDeploymentTags() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* response) { return this->SetDeploymentTags(context, request, response); }));}
    void SetMessageAllocatorFor_SetDeploymentTags(
        ::grpc::experimental::MessageAllocator< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetDeploymentTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeploymentTags(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetDeploymentTags(
      ::grpc::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetDeploymentTags(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetDeploymentWorkerCapacities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetDeploymentWorkerCapacities() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* response) { return this->SetDeploymentWorkerCapacities(context, request, response); }));}
    void SetMessageAllocatorFor_SetDeploymentWorkerCapacities(
        ::grpc::experimental::MessageAllocator< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetDeploymentWorkerCapacities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeploymentWorkerCapacities(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetDeploymentWorkerCapacities(
      ::grpc::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetDeploymentWorkerCapacities(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetDeploymentWorkerFlags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetDeploymentWorkerFlags() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* response) { return this->SetDeploymentWorkerFlags(context, request, response); }));}
    void SetMessageAllocatorFor_SetDeploymentWorkerFlags(
        ::grpc::experimental::MessageAllocator< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetDeploymentWorkerFlags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeploymentWorkerFlags(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetDeploymentWorkerFlags(
      ::grpc::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetDeploymentWorkerFlags(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetDeploymentWorkerRateLimits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetDeploymentWorkerRateLimits() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest* request, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* response) { return this->SetDeploymentWorkerRateLimits(context, request, response); }));}
    void SetMessageAllocatorFor_SetDeploymentWorkerRateLimits(
        ::grpc::experimental::MessageAllocator< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetDeploymentWorkerRateLimits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeploymentWorkerRateLimits(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetDeploymentWorkerRateLimits(
      ::grpc::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetDeploymentWorkerRateLimits(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StopDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StopDeployment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* response) { return this->StopDeployment(context, request, response); }));}
    void SetMessageAllocatorFor_StopDeployment(
        ::grpc::experimental::MessageAllocator< ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StopDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopDeployment(
      ::grpc::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopDeployment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateDeployment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest* request, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* response) { return this->UpdateDeployment(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateDeployment(
        ::grpc::experimental::MessageAllocator< ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateDeployment(
      ::grpc::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateDeployment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateDeployment<ExperimentalWithCallbackMethod_DeleteDeployment<ExperimentalWithCallbackMethod_GetDeployment<ExperimentalWithCallbackMethod_GetRunningDeploymentByName<ExperimentalWithCallbackMethod_ListDeployments<ExperimentalWithCallbackMethod_SetDeploymentTags<ExperimentalWithCallbackMethod_SetDeploymentWorkerCapacities<ExperimentalWithCallbackMethod_SetDeploymentWorkerFlags<ExperimentalWithCallbackMethod_SetDeploymentWorkerRateLimits<ExperimentalWithCallbackMethod_StopDeployment<ExperimentalWithCallbackMethod_UpdateDeployment<Service > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateDeployment<ExperimentalWithCallbackMethod_DeleteDeployment<ExperimentalWithCallbackMethod_GetDeployment<ExperimentalWithCallbackMethod_GetRunningDeploymentByName<ExperimentalWithCallbackMethod_ListDeployments<ExperimentalWithCallbackMethod_SetDeploymentTags<ExperimentalWithCallbackMethod_SetDeploymentWorkerCapacities<ExperimentalWithCallbackMethod_SetDeploymentWorkerFlags<ExperimentalWithCallbackMethod_SetDeploymentWorkerRateLimits<ExperimentalWithCallbackMethod_StopDeployment<ExperimentalWithCallbackMethod_UpdateDeployment<Service > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateDeployment() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteDeployment() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDeployment() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRunningDeploymentByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRunningDeploymentByName() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetRunningDeploymentByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRunningDeploymentByName(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListDeployments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListDeployments() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListDeployments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDeployments(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDeploymentTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDeploymentTags() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SetDeploymentTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeploymentTags(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDeploymentWorkerCapacities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDeploymentWorkerCapacities() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SetDeploymentWorkerCapacities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeploymentWorkerCapacities(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDeploymentWorkerFlags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDeploymentWorkerFlags() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SetDeploymentWorkerFlags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeploymentWorkerFlags(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDeploymentWorkerRateLimits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDeploymentWorkerRateLimits() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SetDeploymentWorkerRateLimits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeploymentWorkerRateLimits(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopDeployment() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_StopDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateDeployment() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_UpdateDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateDeployment() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDeployment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteDeployment() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteDeployment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDeployment() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeployment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRunningDeploymentByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRunningDeploymentByName() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetRunningDeploymentByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRunningDeploymentByName(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRunningDeploymentByName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListDeployments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListDeployments() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ListDeployments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDeployments(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDeployments(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDeploymentTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDeploymentTags() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SetDeploymentTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeploymentTags(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDeploymentTags(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDeploymentWorkerCapacities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDeploymentWorkerCapacities() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SetDeploymentWorkerCapacities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeploymentWorkerCapacities(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDeploymentWorkerCapacities(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDeploymentWorkerFlags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDeploymentWorkerFlags() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SetDeploymentWorkerFlags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeploymentWorkerFlags(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDeploymentWorkerFlags(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDeploymentWorkerRateLimits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDeploymentWorkerRateLimits() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SetDeploymentWorkerRateLimits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeploymentWorkerRateLimits(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDeploymentWorkerRateLimits(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopDeployment() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_StopDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopDeployment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateDeployment() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_UpdateDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateDeployment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateDeployment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateDeployment(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateDeployment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateDeployment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteDeployment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteDeployment(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteDeployment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteDeployment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDeployment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDeployment(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDeployment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDeployment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRunningDeploymentByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRunningDeploymentByName() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRunningDeploymentByName(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRunningDeploymentByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRunningDeploymentByName(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetRunningDeploymentByName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetRunningDeploymentByName(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListDeployments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListDeployments() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListDeployments(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListDeployments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDeployments(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListDeployments(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListDeployments(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetDeploymentTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetDeploymentTags() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetDeploymentTags(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetDeploymentTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeploymentTags(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetDeploymentTags(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetDeploymentTags(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetDeploymentWorkerCapacities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetDeploymentWorkerCapacities() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetDeploymentWorkerCapacities(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetDeploymentWorkerCapacities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeploymentWorkerCapacities(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetDeploymentWorkerCapacities(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetDeploymentWorkerCapacities(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetDeploymentWorkerFlags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetDeploymentWorkerFlags() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetDeploymentWorkerFlags(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetDeploymentWorkerFlags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeploymentWorkerFlags(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetDeploymentWorkerFlags(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetDeploymentWorkerFlags(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetDeploymentWorkerRateLimits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetDeploymentWorkerRateLimits() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetDeploymentWorkerRateLimits(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetDeploymentWorkerRateLimits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDeploymentWorkerRateLimits(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetDeploymentWorkerRateLimits(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetDeploymentWorkerRateLimits(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StopDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StopDeployment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopDeployment(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StopDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopDeployment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopDeployment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateDeployment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateDeployment(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateDeployment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateDeployment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateDeployment() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_CreateDeployment<BaseClass>::StreamedCreateDeployment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateDeployment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteDeployment() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_DeleteDeployment<BaseClass>::StreamedDeleteDeployment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteDeployment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDeployment() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>(std::bind(&WithStreamedUnaryMethod_GetDeployment<BaseClass>::StreamedGetDeployment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDeployment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest,::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRunningDeploymentByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRunningDeploymentByName() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>(std::bind(&WithStreamedUnaryMethod_GetRunningDeploymentByName<BaseClass>::StreamedGetRunningDeploymentByName, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRunningDeploymentByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRunningDeploymentByName(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRunningDeploymentByName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest,::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListDeployments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListDeployments() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse>(std::bind(&WithStreamedUnaryMethod_ListDeployments<BaseClass>::StreamedListDeployments, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListDeployments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDeployments(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListDeployments(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest,::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDeploymentTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDeploymentTags() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse>(std::bind(&WithStreamedUnaryMethod_SetDeploymentTags<BaseClass>::StreamedSetDeploymentTags, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetDeploymentTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDeploymentTags(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDeploymentTags(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest,::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDeploymentWorkerCapacities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDeploymentWorkerCapacities() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse>(std::bind(&WithStreamedUnaryMethod_SetDeploymentWorkerCapacities<BaseClass>::StreamedSetDeploymentWorkerCapacities, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetDeploymentWorkerCapacities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDeploymentWorkerCapacities(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDeploymentWorkerCapacities(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest,::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDeploymentWorkerFlags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDeploymentWorkerFlags() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse>(std::bind(&WithStreamedUnaryMethod_SetDeploymentWorkerFlags<BaseClass>::StreamedSetDeploymentWorkerFlags, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetDeploymentWorkerFlags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDeploymentWorkerFlags(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDeploymentWorkerFlags(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest,::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDeploymentWorkerRateLimits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDeploymentWorkerRateLimits() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse>(std::bind(&WithStreamedUnaryMethod_SetDeploymentWorkerRateLimits<BaseClass>::StreamedSetDeploymentWorkerRateLimits, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetDeploymentWorkerRateLimits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDeploymentWorkerRateLimits(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDeploymentWorkerRateLimits(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest,::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopDeployment() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse>(std::bind(&WithStreamedUnaryMethod_StopDeployment<BaseClass>::StreamedStopDeployment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StopDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopDeployment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest,::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateDeployment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateDeployment() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse>(std::bind(&WithStreamedUnaryMethod_UpdateDeployment<BaseClass>::StreamedUpdateDeployment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateDeployment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateDeployment(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest* /*request*/, ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateDeployment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest,::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateDeployment<WithStreamedUnaryMethod_DeleteDeployment<WithStreamedUnaryMethod_GetDeployment<WithStreamedUnaryMethod_GetRunningDeploymentByName<WithStreamedUnaryMethod_ListDeployments<WithStreamedUnaryMethod_SetDeploymentTags<WithStreamedUnaryMethod_SetDeploymentWorkerCapacities<WithStreamedUnaryMethod_SetDeploymentWorkerFlags<WithStreamedUnaryMethod_SetDeploymentWorkerRateLimits<WithStreamedUnaryMethod_StopDeployment<WithStreamedUnaryMethod_UpdateDeployment<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateDeployment<WithStreamedUnaryMethod_DeleteDeployment<WithStreamedUnaryMethod_GetDeployment<WithStreamedUnaryMethod_GetRunningDeploymentByName<WithStreamedUnaryMethod_ListDeployments<WithStreamedUnaryMethod_SetDeploymentTags<WithStreamedUnaryMethod_SetDeploymentWorkerCapacities<WithStreamedUnaryMethod_SetDeploymentWorkerFlags<WithStreamedUnaryMethod_SetDeploymentWorkerRateLimits<WithStreamedUnaryMethod_StopDeployment<WithStreamedUnaryMethod_UpdateDeployment<Service > > > > > > > > > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace deployment
}  // namespace spatialos
}  // namespace improbable


#endif  // GRPC_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto__INCLUDED
