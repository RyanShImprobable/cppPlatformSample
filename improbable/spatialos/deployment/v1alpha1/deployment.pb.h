// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improbable/spatialos/deployment/v1alpha1/deployment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "github.com/improbable-io/go-proto-logfields/logfields.pb.h"
#include "github.com/improbable/protoc-gen-gocli/cli.pb.h"
#include "github.com/mwitkow/go-proto-validators/validator.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[33]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
namespace improbable {
namespace spatialos {
namespace deployment {
namespace v1alpha1 {
class CreateDeploymentMetadata;
class CreateDeploymentMetadataDefaultTypeInternal;
extern CreateDeploymentMetadataDefaultTypeInternal _CreateDeploymentMetadata_default_instance_;
class CreateDeploymentRequest;
class CreateDeploymentRequestDefaultTypeInternal;
extern CreateDeploymentRequestDefaultTypeInternal _CreateDeploymentRequest_default_instance_;
class CreateTimePropertyFilter;
class CreateTimePropertyFilterDefaultTypeInternal;
extern CreateTimePropertyFilterDefaultTypeInternal _CreateTimePropertyFilter_default_instance_;
class DeleteDeploymentMetadata;
class DeleteDeploymentMetadataDefaultTypeInternal;
extern DeleteDeploymentMetadataDefaultTypeInternal _DeleteDeploymentMetadata_default_instance_;
class DeleteDeploymentRequest;
class DeleteDeploymentRequestDefaultTypeInternal;
extern DeleteDeploymentRequestDefaultTypeInternal _DeleteDeploymentRequest_default_instance_;
class Deployment;
class DeploymentDefaultTypeInternal;
extern DeploymentDefaultTypeInternal _Deployment_default_instance_;
class DeploymentNamePropertyFilter;
class DeploymentNamePropertyFilterDefaultTypeInternal;
extern DeploymentNamePropertyFilterDefaultTypeInternal _DeploymentNamePropertyFilter_default_instance_;
class Filter;
class FilterDefaultTypeInternal;
extern FilterDefaultTypeInternal _Filter_default_instance_;
class GetDeploymentRequest;
class GetDeploymentRequestDefaultTypeInternal;
extern GetDeploymentRequestDefaultTypeInternal _GetDeploymentRequest_default_instance_;
class GetDeploymentResponse;
class GetDeploymentResponseDefaultTypeInternal;
extern GetDeploymentResponseDefaultTypeInternal _GetDeploymentResponse_default_instance_;
class GetRunningDeploymentByNameRequest;
class GetRunningDeploymentByNameRequestDefaultTypeInternal;
extern GetRunningDeploymentByNameRequestDefaultTypeInternal _GetRunningDeploymentByNameRequest_default_instance_;
class LaunchConfig;
class LaunchConfigDefaultTypeInternal;
extern LaunchConfigDefaultTypeInternal _LaunchConfig_default_instance_;
class ListDeploymentsRequest;
class ListDeploymentsRequestDefaultTypeInternal;
extern ListDeploymentsRequestDefaultTypeInternal _ListDeploymentsRequest_default_instance_;
class ListDeploymentsResponse;
class ListDeploymentsResponseDefaultTypeInternal;
extern ListDeploymentsResponseDefaultTypeInternal _ListDeploymentsResponse_default_instance_;
class PlayerInfo;
class PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class SetDeploymentTagsRequest;
class SetDeploymentTagsRequestDefaultTypeInternal;
extern SetDeploymentTagsRequestDefaultTypeInternal _SetDeploymentTagsRequest_default_instance_;
class SetDeploymentTagsResponse;
class SetDeploymentTagsResponseDefaultTypeInternal;
extern SetDeploymentTagsResponseDefaultTypeInternal _SetDeploymentTagsResponse_default_instance_;
class SetDeploymentWorkerCapacitiesRequest;
class SetDeploymentWorkerCapacitiesRequestDefaultTypeInternal;
extern SetDeploymentWorkerCapacitiesRequestDefaultTypeInternal _SetDeploymentWorkerCapacitiesRequest_default_instance_;
class SetDeploymentWorkerCapacitiesResponse;
class SetDeploymentWorkerCapacitiesResponseDefaultTypeInternal;
extern SetDeploymentWorkerCapacitiesResponseDefaultTypeInternal _SetDeploymentWorkerCapacitiesResponse_default_instance_;
class SetDeploymentWorkerFlagsRequest;
class SetDeploymentWorkerFlagsRequestDefaultTypeInternal;
extern SetDeploymentWorkerFlagsRequestDefaultTypeInternal _SetDeploymentWorkerFlagsRequest_default_instance_;
class SetDeploymentWorkerFlagsResponse;
class SetDeploymentWorkerFlagsResponseDefaultTypeInternal;
extern SetDeploymentWorkerFlagsResponseDefaultTypeInternal _SetDeploymentWorkerFlagsResponse_default_instance_;
class SetDeploymentWorkerRateLimitsRequest;
class SetDeploymentWorkerRateLimitsRequestDefaultTypeInternal;
extern SetDeploymentWorkerRateLimitsRequestDefaultTypeInternal _SetDeploymentWorkerRateLimitsRequest_default_instance_;
class SetDeploymentWorkerRateLimitsResponse;
class SetDeploymentWorkerRateLimitsResponseDefaultTypeInternal;
extern SetDeploymentWorkerRateLimitsResponseDefaultTypeInternal _SetDeploymentWorkerRateLimitsResponse_default_instance_;
class StopDeploymentRequest;
class StopDeploymentRequestDefaultTypeInternal;
extern StopDeploymentRequestDefaultTypeInternal _StopDeploymentRequest_default_instance_;
class StopDeploymentResponse;
class StopDeploymentResponseDefaultTypeInternal;
extern StopDeploymentResponseDefaultTypeInternal _StopDeploymentResponse_default_instance_;
class StoppedStatusPropertyFilter;
class StoppedStatusPropertyFilterDefaultTypeInternal;
extern StoppedStatusPropertyFilterDefaultTypeInternal _StoppedStatusPropertyFilter_default_instance_;
class StoppedTimePropertyFilter;
class StoppedTimePropertyFilterDefaultTypeInternal;
extern StoppedTimePropertyFilterDefaultTypeInternal _StoppedTimePropertyFilter_default_instance_;
class TagsPropertyFilter;
class TagsPropertyFilterDefaultTypeInternal;
extern TagsPropertyFilterDefaultTypeInternal _TagsPropertyFilter_default_instance_;
class UpdateDeploymentRequest;
class UpdateDeploymentRequestDefaultTypeInternal;
extern UpdateDeploymentRequestDefaultTypeInternal _UpdateDeploymentRequest_default_instance_;
class UpdateDeploymentResponse;
class UpdateDeploymentResponseDefaultTypeInternal;
extern UpdateDeploymentResponseDefaultTypeInternal _UpdateDeploymentResponse_default_instance_;
class WorkerCapacity;
class WorkerCapacityDefaultTypeInternal;
extern WorkerCapacityDefaultTypeInternal _WorkerCapacity_default_instance_;
class WorkerFlag;
class WorkerFlagDefaultTypeInternal;
extern WorkerFlagDefaultTypeInternal _WorkerFlag_default_instance_;
class WorkerRateLimit;
class WorkerRateLimitDefaultTypeInternal;
extern WorkerRateLimitDefaultTypeInternal _WorkerRateLimit_default_instance_;
}  // namespace v1alpha1
}  // namespace deployment
}  // namespace spatialos
}  // namespace improbable
PROTOBUF_NAMESPACE_OPEN
template<> ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentMetadata* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::CreateDeploymentMetadata>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::CreateDeploymentRequest>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentMetadata* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentMetadata>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::DeleteDeploymentRequest>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::Deployment* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::Deployment>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::Filter* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::Filter>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::GetDeploymentRequest>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::GetDeploymentResponse>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::GetRunningDeploymentByNameRequest>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::LaunchConfig* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::LaunchConfig>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::ListDeploymentsResponse>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::PlayerInfo* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::PlayerInfo>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsRequest>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::SetDeploymentTagsResponse>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesRequest>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerCapacitiesResponse>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsRequest>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerFlagsResponse>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsRequest>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::SetDeploymentWorkerRateLimitsResponse>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::StopDeploymentRequest>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::StopDeploymentResponse>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentRequest>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::UpdateDeploymentResponse>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::WorkerCapacity>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::WorkerFlag* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::WorkerFlag>(Arena*);
template<> ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit* Arena::CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace improbable {
namespace spatialos {
namespace deployment {
namespace v1alpha1 {

enum Deployment_Status : int {
  Deployment_Status_UNKNOWN = 0,
  Deployment_Status_STARTING = 100,
  Deployment_Status_RUNNING = 200,
  Deployment_Status_STOPPING = 300,
  Deployment_Status_STOPPED = 400,
  Deployment_Status_ERROR = 500,
  Deployment_Status_Deployment_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Deployment_Status_Deployment_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Deployment_Status_IsValid(int value);
constexpr Deployment_Status Deployment_Status_Status_MIN = Deployment_Status_UNKNOWN;
constexpr Deployment_Status Deployment_Status_Status_MAX = Deployment_Status_ERROR;
constexpr int Deployment_Status_Status_ARRAYSIZE = Deployment_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Deployment_Status_descriptor();
template<typename T>
inline const std::string& Deployment_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Deployment_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Deployment_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Deployment_Status_descriptor(), enum_t_value);
}
inline bool Deployment_Status_Parse(
    const std::string& name, Deployment_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Deployment_Status>(
    Deployment_Status_descriptor(), name, value);
}
enum ListDeploymentsRequest_DeploymentStoppedStatusFilter : int {
  ListDeploymentsRequest_DeploymentStoppedStatusFilter_ALL_DEPLOYMENTS = 0,
  ListDeploymentsRequest_DeploymentStoppedStatusFilter_NOT_STOPPED_DEPLOYMENTS = 1,
  ListDeploymentsRequest_DeploymentStoppedStatusFilter_STOPPED_DEPLOYMENTS = 2,
  ListDeploymentsRequest_DeploymentStoppedStatusFilter_ListDeploymentsRequest_DeploymentStoppedStatusFilter_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ListDeploymentsRequest_DeploymentStoppedStatusFilter_ListDeploymentsRequest_DeploymentStoppedStatusFilter_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ListDeploymentsRequest_DeploymentStoppedStatusFilter_IsValid(int value);
constexpr ListDeploymentsRequest_DeploymentStoppedStatusFilter ListDeploymentsRequest_DeploymentStoppedStatusFilter_DeploymentStoppedStatusFilter_MIN = ListDeploymentsRequest_DeploymentStoppedStatusFilter_ALL_DEPLOYMENTS;
constexpr ListDeploymentsRequest_DeploymentStoppedStatusFilter ListDeploymentsRequest_DeploymentStoppedStatusFilter_DeploymentStoppedStatusFilter_MAX = ListDeploymentsRequest_DeploymentStoppedStatusFilter_STOPPED_DEPLOYMENTS;
constexpr int ListDeploymentsRequest_DeploymentStoppedStatusFilter_DeploymentStoppedStatusFilter_ARRAYSIZE = ListDeploymentsRequest_DeploymentStoppedStatusFilter_DeploymentStoppedStatusFilter_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListDeploymentsRequest_DeploymentStoppedStatusFilter_descriptor();
template<typename T>
inline const std::string& ListDeploymentsRequest_DeploymentStoppedStatusFilter_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ListDeploymentsRequest_DeploymentStoppedStatusFilter>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ListDeploymentsRequest_DeploymentStoppedStatusFilter_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ListDeploymentsRequest_DeploymentStoppedStatusFilter_descriptor(), enum_t_value);
}
inline bool ListDeploymentsRequest_DeploymentStoppedStatusFilter_Parse(
    const std::string& name, ListDeploymentsRequest_DeploymentStoppedStatusFilter* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ListDeploymentsRequest_DeploymentStoppedStatusFilter>(
    ListDeploymentsRequest_DeploymentStoppedStatusFilter_descriptor(), name, value);
}
enum StoppedStatusPropertyFilter_StoppedStatus : int {
  StoppedStatusPropertyFilter_StoppedStatus_ALL_DEPLOYMENTS = 0,
  StoppedStatusPropertyFilter_StoppedStatus_STOPPED_DEPLOYMENTS = 1,
  StoppedStatusPropertyFilter_StoppedStatus_NOT_STOPPED_DEPLOYMENTS = 2,
  StoppedStatusPropertyFilter_StoppedStatus_StoppedStatusPropertyFilter_StoppedStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StoppedStatusPropertyFilter_StoppedStatus_StoppedStatusPropertyFilter_StoppedStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StoppedStatusPropertyFilter_StoppedStatus_IsValid(int value);
constexpr StoppedStatusPropertyFilter_StoppedStatus StoppedStatusPropertyFilter_StoppedStatus_StoppedStatus_MIN = StoppedStatusPropertyFilter_StoppedStatus_ALL_DEPLOYMENTS;
constexpr StoppedStatusPropertyFilter_StoppedStatus StoppedStatusPropertyFilter_StoppedStatus_StoppedStatus_MAX = StoppedStatusPropertyFilter_StoppedStatus_NOT_STOPPED_DEPLOYMENTS;
constexpr int StoppedStatusPropertyFilter_StoppedStatus_StoppedStatus_ARRAYSIZE = StoppedStatusPropertyFilter_StoppedStatus_StoppedStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StoppedStatusPropertyFilter_StoppedStatus_descriptor();
template<typename T>
inline const std::string& StoppedStatusPropertyFilter_StoppedStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StoppedStatusPropertyFilter_StoppedStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StoppedStatusPropertyFilter_StoppedStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StoppedStatusPropertyFilter_StoppedStatus_descriptor(), enum_t_value);
}
inline bool StoppedStatusPropertyFilter_StoppedStatus_Parse(
    const std::string& name, StoppedStatusPropertyFilter_StoppedStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StoppedStatusPropertyFilter_StoppedStatus>(
    StoppedStatusPropertyFilter_StoppedStatus_descriptor(), name, value);
}
enum DeploymentNamePropertyFilter_Operator : int {
  DeploymentNamePropertyFilter_Operator_EQUAL = 0,
  DeploymentNamePropertyFilter_Operator_CONTAINS = 1,
  DeploymentNamePropertyFilter_Operator_NOT_CONTAINS = 2,
  DeploymentNamePropertyFilter_Operator_DeploymentNamePropertyFilter_Operator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DeploymentNamePropertyFilter_Operator_DeploymentNamePropertyFilter_Operator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DeploymentNamePropertyFilter_Operator_IsValid(int value);
constexpr DeploymentNamePropertyFilter_Operator DeploymentNamePropertyFilter_Operator_Operator_MIN = DeploymentNamePropertyFilter_Operator_EQUAL;
constexpr DeploymentNamePropertyFilter_Operator DeploymentNamePropertyFilter_Operator_Operator_MAX = DeploymentNamePropertyFilter_Operator_NOT_CONTAINS;
constexpr int DeploymentNamePropertyFilter_Operator_Operator_ARRAYSIZE = DeploymentNamePropertyFilter_Operator_Operator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeploymentNamePropertyFilter_Operator_descriptor();
template<typename T>
inline const std::string& DeploymentNamePropertyFilter_Operator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeploymentNamePropertyFilter_Operator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeploymentNamePropertyFilter_Operator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeploymentNamePropertyFilter_Operator_descriptor(), enum_t_value);
}
inline bool DeploymentNamePropertyFilter_Operator_Parse(
    const std::string& name, DeploymentNamePropertyFilter_Operator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeploymentNamePropertyFilter_Operator>(
    DeploymentNamePropertyFilter_Operator_descriptor(), name, value);
}
enum TagsPropertyFilter_Operator : int {
  TagsPropertyFilter_Operator_EQUAL = 0,
  TagsPropertyFilter_Operator_CONTAINS = 1,
  TagsPropertyFilter_Operator_NOT_CONTAINS = 2,
  TagsPropertyFilter_Operator_TagsPropertyFilter_Operator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TagsPropertyFilter_Operator_TagsPropertyFilter_Operator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TagsPropertyFilter_Operator_IsValid(int value);
constexpr TagsPropertyFilter_Operator TagsPropertyFilter_Operator_Operator_MIN = TagsPropertyFilter_Operator_EQUAL;
constexpr TagsPropertyFilter_Operator TagsPropertyFilter_Operator_Operator_MAX = TagsPropertyFilter_Operator_NOT_CONTAINS;
constexpr int TagsPropertyFilter_Operator_Operator_ARRAYSIZE = TagsPropertyFilter_Operator_Operator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TagsPropertyFilter_Operator_descriptor();
template<typename T>
inline const std::string& TagsPropertyFilter_Operator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TagsPropertyFilter_Operator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TagsPropertyFilter_Operator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TagsPropertyFilter_Operator_descriptor(), enum_t_value);
}
inline bool TagsPropertyFilter_Operator_Parse(
    const std::string& name, TagsPropertyFilter_Operator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TagsPropertyFilter_Operator>(
    TagsPropertyFilter_Operator_descriptor(), name, value);
}
enum CreateTimePropertyFilter_Operator : int {
  CreateTimePropertyFilter_Operator_EQUAL = 0,
  CreateTimePropertyFilter_Operator_LESS_THAN = 1,
  CreateTimePropertyFilter_Operator_LESS_THAN_OR_EQUAL = 2,
  CreateTimePropertyFilter_Operator_GREATER_THAN = 3,
  CreateTimePropertyFilter_Operator_GREATER_THAN_OR_EQUAL = 4,
  CreateTimePropertyFilter_Operator_CreateTimePropertyFilter_Operator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CreateTimePropertyFilter_Operator_CreateTimePropertyFilter_Operator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CreateTimePropertyFilter_Operator_IsValid(int value);
constexpr CreateTimePropertyFilter_Operator CreateTimePropertyFilter_Operator_Operator_MIN = CreateTimePropertyFilter_Operator_EQUAL;
constexpr CreateTimePropertyFilter_Operator CreateTimePropertyFilter_Operator_Operator_MAX = CreateTimePropertyFilter_Operator_GREATER_THAN_OR_EQUAL;
constexpr int CreateTimePropertyFilter_Operator_Operator_ARRAYSIZE = CreateTimePropertyFilter_Operator_Operator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateTimePropertyFilter_Operator_descriptor();
template<typename T>
inline const std::string& CreateTimePropertyFilter_Operator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateTimePropertyFilter_Operator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateTimePropertyFilter_Operator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateTimePropertyFilter_Operator_descriptor(), enum_t_value);
}
inline bool CreateTimePropertyFilter_Operator_Parse(
    const std::string& name, CreateTimePropertyFilter_Operator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateTimePropertyFilter_Operator>(
    CreateTimePropertyFilter_Operator_descriptor(), name, value);
}
enum StoppedTimePropertyFilter_Operator : int {
  StoppedTimePropertyFilter_Operator_EQUAL = 0,
  StoppedTimePropertyFilter_Operator_LESS_THAN = 1,
  StoppedTimePropertyFilter_Operator_LESS_THAN_OR_EQUAL = 2,
  StoppedTimePropertyFilter_Operator_GREATER_THAN = 3,
  StoppedTimePropertyFilter_Operator_GREATER_THAN_OR_EQUAL = 4,
  StoppedTimePropertyFilter_Operator_StoppedTimePropertyFilter_Operator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StoppedTimePropertyFilter_Operator_StoppedTimePropertyFilter_Operator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StoppedTimePropertyFilter_Operator_IsValid(int value);
constexpr StoppedTimePropertyFilter_Operator StoppedTimePropertyFilter_Operator_Operator_MIN = StoppedTimePropertyFilter_Operator_EQUAL;
constexpr StoppedTimePropertyFilter_Operator StoppedTimePropertyFilter_Operator_Operator_MAX = StoppedTimePropertyFilter_Operator_GREATER_THAN_OR_EQUAL;
constexpr int StoppedTimePropertyFilter_Operator_Operator_ARRAYSIZE = StoppedTimePropertyFilter_Operator_Operator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StoppedTimePropertyFilter_Operator_descriptor();
template<typename T>
inline const std::string& StoppedTimePropertyFilter_Operator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StoppedTimePropertyFilter_Operator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StoppedTimePropertyFilter_Operator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StoppedTimePropertyFilter_Operator_descriptor(), enum_t_value);
}
inline bool StoppedTimePropertyFilter_Operator_Parse(
    const std::string& name, StoppedTimePropertyFilter_Operator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StoppedTimePropertyFilter_Operator>(
    StoppedTimePropertyFilter_Operator_descriptor(), name, value);
}
enum ViewType : int {
  UNSPECIFIED = 0,
  BASIC = 1,
  FULL = 2,
  ViewType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ViewType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ViewType_IsValid(int value);
constexpr ViewType ViewType_MIN = UNSPECIFIED;
constexpr ViewType ViewType_MAX = FULL;
constexpr int ViewType_ARRAYSIZE = ViewType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViewType_descriptor();
template<typename T>
inline const std::string& ViewType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ViewType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ViewType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ViewType_descriptor(), enum_t_value);
}
inline bool ViewType_Parse(
    const std::string& name, ViewType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ViewType>(
    ViewType_descriptor(), name, value);
}
// ===================================================================

class SetDeploymentWorkerFlagsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerFlagsRequest) */ {
 public:
  inline SetDeploymentWorkerFlagsRequest() : SetDeploymentWorkerFlagsRequest(nullptr) {};
  virtual ~SetDeploymentWorkerFlagsRequest();

  SetDeploymentWorkerFlagsRequest(const SetDeploymentWorkerFlagsRequest& from);
  SetDeploymentWorkerFlagsRequest(SetDeploymentWorkerFlagsRequest&& from) noexcept
    : SetDeploymentWorkerFlagsRequest() {
    *this = ::std::move(from);
  }

  inline SetDeploymentWorkerFlagsRequest& operator=(const SetDeploymentWorkerFlagsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDeploymentWorkerFlagsRequest& operator=(SetDeploymentWorkerFlagsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDeploymentWorkerFlagsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetDeploymentWorkerFlagsRequest* internal_default_instance() {
    return reinterpret_cast<const SetDeploymentWorkerFlagsRequest*>(
               &_SetDeploymentWorkerFlagsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetDeploymentWorkerFlagsRequest& a, SetDeploymentWorkerFlagsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDeploymentWorkerFlagsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDeploymentWorkerFlagsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetDeploymentWorkerFlagsRequest* New() const final {
    return CreateMaybeMessage<SetDeploymentWorkerFlagsRequest>(nullptr);
  }

  SetDeploymentWorkerFlagsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDeploymentWorkerFlagsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDeploymentWorkerFlagsRequest& from);
  void MergeFrom(const SetDeploymentWorkerFlagsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDeploymentWorkerFlagsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerFlagsRequest";
  }
  protected:
  explicit SetDeploymentWorkerFlagsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerFlagsFieldNumber = 2,
    kDeploymentIdFieldNumber = 1,
  };
  // repeated .improbable.spatialos.deployment.v1alpha1.WorkerFlag worker_flags = 2;
  int worker_flags_size() const;
  private:
  int _internal_worker_flags_size() const;
  public:
  void clear_worker_flags();
  ::improbable::spatialos::deployment::v1alpha1::WorkerFlag* mutable_worker_flags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerFlag >*
      mutable_worker_flags();
  private:
  const ::improbable::spatialos::deployment::v1alpha1::WorkerFlag& _internal_worker_flags(int index) const;
  ::improbable::spatialos::deployment::v1alpha1::WorkerFlag* _internal_add_worker_flags();
  public:
  const ::improbable::spatialos::deployment::v1alpha1::WorkerFlag& worker_flags(int index) const;
  ::improbable::spatialos::deployment::v1alpha1::WorkerFlag* add_worker_flags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerFlag >&
      worker_flags() const;

  // int64 deployment_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_deployment_id();
  ::PROTOBUF_NAMESPACE_ID::int64 deployment_id() const;
  void set_deployment_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_deployment_id() const;
  void _internal_set_deployment_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerFlagsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerFlag > worker_flags_;
  ::PROTOBUF_NAMESPACE_ID::int64 deployment_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class SetDeploymentWorkerFlagsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerFlagsResponse) */ {
 public:
  inline SetDeploymentWorkerFlagsResponse() : SetDeploymentWorkerFlagsResponse(nullptr) {};
  virtual ~SetDeploymentWorkerFlagsResponse();

  SetDeploymentWorkerFlagsResponse(const SetDeploymentWorkerFlagsResponse& from);
  SetDeploymentWorkerFlagsResponse(SetDeploymentWorkerFlagsResponse&& from) noexcept
    : SetDeploymentWorkerFlagsResponse() {
    *this = ::std::move(from);
  }

  inline SetDeploymentWorkerFlagsResponse& operator=(const SetDeploymentWorkerFlagsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDeploymentWorkerFlagsResponse& operator=(SetDeploymentWorkerFlagsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDeploymentWorkerFlagsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetDeploymentWorkerFlagsResponse* internal_default_instance() {
    return reinterpret_cast<const SetDeploymentWorkerFlagsResponse*>(
               &_SetDeploymentWorkerFlagsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetDeploymentWorkerFlagsResponse& a, SetDeploymentWorkerFlagsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDeploymentWorkerFlagsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDeploymentWorkerFlagsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetDeploymentWorkerFlagsResponse* New() const final {
    return CreateMaybeMessage<SetDeploymentWorkerFlagsResponse>(nullptr);
  }

  SetDeploymentWorkerFlagsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDeploymentWorkerFlagsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDeploymentWorkerFlagsResponse& from);
  void MergeFrom(const SetDeploymentWorkerFlagsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDeploymentWorkerFlagsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerFlagsResponse";
  }
  protected:
  explicit SetDeploymentWorkerFlagsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerFlagsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class SetDeploymentTagsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsRequest) */ {
 public:
  inline SetDeploymentTagsRequest() : SetDeploymentTagsRequest(nullptr) {};
  virtual ~SetDeploymentTagsRequest();

  SetDeploymentTagsRequest(const SetDeploymentTagsRequest& from);
  SetDeploymentTagsRequest(SetDeploymentTagsRequest&& from) noexcept
    : SetDeploymentTagsRequest() {
    *this = ::std::move(from);
  }

  inline SetDeploymentTagsRequest& operator=(const SetDeploymentTagsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDeploymentTagsRequest& operator=(SetDeploymentTagsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDeploymentTagsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetDeploymentTagsRequest* internal_default_instance() {
    return reinterpret_cast<const SetDeploymentTagsRequest*>(
               &_SetDeploymentTagsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetDeploymentTagsRequest& a, SetDeploymentTagsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDeploymentTagsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDeploymentTagsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetDeploymentTagsRequest* New() const final {
    return CreateMaybeMessage<SetDeploymentTagsRequest>(nullptr);
  }

  SetDeploymentTagsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDeploymentTagsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDeploymentTagsRequest& from);
  void MergeFrom(const SetDeploymentTagsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDeploymentTagsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsRequest";
  }
  protected:
  explicit SetDeploymentTagsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 2,
    kDeploymentIdFieldNumber = 1,
  };
  // repeated string tags = 2;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // int64 deployment_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_deployment_id();
  ::PROTOBUF_NAMESPACE_ID::int64 deployment_id() const;
  void set_deployment_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_deployment_id() const;
  void _internal_set_deployment_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::int64 deployment_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class SetDeploymentTagsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsResponse) */ {
 public:
  inline SetDeploymentTagsResponse() : SetDeploymentTagsResponse(nullptr) {};
  virtual ~SetDeploymentTagsResponse();

  SetDeploymentTagsResponse(const SetDeploymentTagsResponse& from);
  SetDeploymentTagsResponse(SetDeploymentTagsResponse&& from) noexcept
    : SetDeploymentTagsResponse() {
    *this = ::std::move(from);
  }

  inline SetDeploymentTagsResponse& operator=(const SetDeploymentTagsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDeploymentTagsResponse& operator=(SetDeploymentTagsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDeploymentTagsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetDeploymentTagsResponse* internal_default_instance() {
    return reinterpret_cast<const SetDeploymentTagsResponse*>(
               &_SetDeploymentTagsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetDeploymentTagsResponse& a, SetDeploymentTagsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDeploymentTagsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDeploymentTagsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetDeploymentTagsResponse* New() const final {
    return CreateMaybeMessage<SetDeploymentTagsResponse>(nullptr);
  }

  SetDeploymentTagsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDeploymentTagsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDeploymentTagsResponse& from);
  void MergeFrom(const SetDeploymentTagsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDeploymentTagsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsResponse";
  }
  protected:
  explicit SetDeploymentTagsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class SetDeploymentWorkerCapacitiesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerCapacitiesRequest) */ {
 public:
  inline SetDeploymentWorkerCapacitiesRequest() : SetDeploymentWorkerCapacitiesRequest(nullptr) {};
  virtual ~SetDeploymentWorkerCapacitiesRequest();

  SetDeploymentWorkerCapacitiesRequest(const SetDeploymentWorkerCapacitiesRequest& from);
  SetDeploymentWorkerCapacitiesRequest(SetDeploymentWorkerCapacitiesRequest&& from) noexcept
    : SetDeploymentWorkerCapacitiesRequest() {
    *this = ::std::move(from);
  }

  inline SetDeploymentWorkerCapacitiesRequest& operator=(const SetDeploymentWorkerCapacitiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDeploymentWorkerCapacitiesRequest& operator=(SetDeploymentWorkerCapacitiesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDeploymentWorkerCapacitiesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetDeploymentWorkerCapacitiesRequest* internal_default_instance() {
    return reinterpret_cast<const SetDeploymentWorkerCapacitiesRequest*>(
               &_SetDeploymentWorkerCapacitiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetDeploymentWorkerCapacitiesRequest& a, SetDeploymentWorkerCapacitiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDeploymentWorkerCapacitiesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDeploymentWorkerCapacitiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetDeploymentWorkerCapacitiesRequest* New() const final {
    return CreateMaybeMessage<SetDeploymentWorkerCapacitiesRequest>(nullptr);
  }

  SetDeploymentWorkerCapacitiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDeploymentWorkerCapacitiesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDeploymentWorkerCapacitiesRequest& from);
  void MergeFrom(const SetDeploymentWorkerCapacitiesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDeploymentWorkerCapacitiesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerCapacitiesRequest";
  }
  protected:
  explicit SetDeploymentWorkerCapacitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerConnectionCapacitiesFieldNumber = 2,
    kDeploymentIdFieldNumber = 1,
  };
  // repeated .improbable.spatialos.deployment.v1alpha1.WorkerCapacity worker_connection_capacities = 2;
  int worker_connection_capacities_size() const;
  private:
  int _internal_worker_connection_capacities_size() const;
  public:
  void clear_worker_connection_capacities();
  ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity* mutable_worker_connection_capacities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity >*
      mutable_worker_connection_capacities();
  private:
  const ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity& _internal_worker_connection_capacities(int index) const;
  ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity* _internal_add_worker_connection_capacities();
  public:
  const ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity& worker_connection_capacities(int index) const;
  ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity* add_worker_connection_capacities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity >&
      worker_connection_capacities() const;

  // int64 deployment_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_deployment_id();
  ::PROTOBUF_NAMESPACE_ID::int64 deployment_id() const;
  void set_deployment_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_deployment_id() const;
  void _internal_set_deployment_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerCapacitiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity > worker_connection_capacities_;
  ::PROTOBUF_NAMESPACE_ID::int64 deployment_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class SetDeploymentWorkerCapacitiesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerCapacitiesResponse) */ {
 public:
  inline SetDeploymentWorkerCapacitiesResponse() : SetDeploymentWorkerCapacitiesResponse(nullptr) {};
  virtual ~SetDeploymentWorkerCapacitiesResponse();

  SetDeploymentWorkerCapacitiesResponse(const SetDeploymentWorkerCapacitiesResponse& from);
  SetDeploymentWorkerCapacitiesResponse(SetDeploymentWorkerCapacitiesResponse&& from) noexcept
    : SetDeploymentWorkerCapacitiesResponse() {
    *this = ::std::move(from);
  }

  inline SetDeploymentWorkerCapacitiesResponse& operator=(const SetDeploymentWorkerCapacitiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDeploymentWorkerCapacitiesResponse& operator=(SetDeploymentWorkerCapacitiesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDeploymentWorkerCapacitiesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetDeploymentWorkerCapacitiesResponse* internal_default_instance() {
    return reinterpret_cast<const SetDeploymentWorkerCapacitiesResponse*>(
               &_SetDeploymentWorkerCapacitiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SetDeploymentWorkerCapacitiesResponse& a, SetDeploymentWorkerCapacitiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDeploymentWorkerCapacitiesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDeploymentWorkerCapacitiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetDeploymentWorkerCapacitiesResponse* New() const final {
    return CreateMaybeMessage<SetDeploymentWorkerCapacitiesResponse>(nullptr);
  }

  SetDeploymentWorkerCapacitiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDeploymentWorkerCapacitiesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDeploymentWorkerCapacitiesResponse& from);
  void MergeFrom(const SetDeploymentWorkerCapacitiesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDeploymentWorkerCapacitiesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerCapacitiesResponse";
  }
  protected:
  explicit SetDeploymentWorkerCapacitiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerCapacitiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class SetDeploymentWorkerRateLimitsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerRateLimitsRequest) */ {
 public:
  inline SetDeploymentWorkerRateLimitsRequest() : SetDeploymentWorkerRateLimitsRequest(nullptr) {};
  virtual ~SetDeploymentWorkerRateLimitsRequest();

  SetDeploymentWorkerRateLimitsRequest(const SetDeploymentWorkerRateLimitsRequest& from);
  SetDeploymentWorkerRateLimitsRequest(SetDeploymentWorkerRateLimitsRequest&& from) noexcept
    : SetDeploymentWorkerRateLimitsRequest() {
    *this = ::std::move(from);
  }

  inline SetDeploymentWorkerRateLimitsRequest& operator=(const SetDeploymentWorkerRateLimitsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDeploymentWorkerRateLimitsRequest& operator=(SetDeploymentWorkerRateLimitsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDeploymentWorkerRateLimitsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetDeploymentWorkerRateLimitsRequest* internal_default_instance() {
    return reinterpret_cast<const SetDeploymentWorkerRateLimitsRequest*>(
               &_SetDeploymentWorkerRateLimitsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetDeploymentWorkerRateLimitsRequest& a, SetDeploymentWorkerRateLimitsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDeploymentWorkerRateLimitsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDeploymentWorkerRateLimitsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetDeploymentWorkerRateLimitsRequest* New() const final {
    return CreateMaybeMessage<SetDeploymentWorkerRateLimitsRequest>(nullptr);
  }

  SetDeploymentWorkerRateLimitsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDeploymentWorkerRateLimitsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDeploymentWorkerRateLimitsRequest& from);
  void MergeFrom(const SetDeploymentWorkerRateLimitsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDeploymentWorkerRateLimitsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerRateLimitsRequest";
  }
  protected:
  explicit SetDeploymentWorkerRateLimitsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerConnectionRateLimitsFieldNumber = 2,
    kDeploymentIdFieldNumber = 1,
  };
  // repeated .improbable.spatialos.deployment.v1alpha1.WorkerRateLimit worker_connection_rate_limits = 2;
  int worker_connection_rate_limits_size() const;
  private:
  int _internal_worker_connection_rate_limits_size() const;
  public:
  void clear_worker_connection_rate_limits();
  ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit* mutable_worker_connection_rate_limits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit >*
      mutable_worker_connection_rate_limits();
  private:
  const ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit& _internal_worker_connection_rate_limits(int index) const;
  ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit* _internal_add_worker_connection_rate_limits();
  public:
  const ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit& worker_connection_rate_limits(int index) const;
  ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit* add_worker_connection_rate_limits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit >&
      worker_connection_rate_limits() const;

  // int64 deployment_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_deployment_id();
  ::PROTOBUF_NAMESPACE_ID::int64 deployment_id() const;
  void set_deployment_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_deployment_id() const;
  void _internal_set_deployment_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerRateLimitsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit > worker_connection_rate_limits_;
  ::PROTOBUF_NAMESPACE_ID::int64 deployment_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class SetDeploymentWorkerRateLimitsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerRateLimitsResponse) */ {
 public:
  inline SetDeploymentWorkerRateLimitsResponse() : SetDeploymentWorkerRateLimitsResponse(nullptr) {};
  virtual ~SetDeploymentWorkerRateLimitsResponse();

  SetDeploymentWorkerRateLimitsResponse(const SetDeploymentWorkerRateLimitsResponse& from);
  SetDeploymentWorkerRateLimitsResponse(SetDeploymentWorkerRateLimitsResponse&& from) noexcept
    : SetDeploymentWorkerRateLimitsResponse() {
    *this = ::std::move(from);
  }

  inline SetDeploymentWorkerRateLimitsResponse& operator=(const SetDeploymentWorkerRateLimitsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDeploymentWorkerRateLimitsResponse& operator=(SetDeploymentWorkerRateLimitsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDeploymentWorkerRateLimitsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetDeploymentWorkerRateLimitsResponse* internal_default_instance() {
    return reinterpret_cast<const SetDeploymentWorkerRateLimitsResponse*>(
               &_SetDeploymentWorkerRateLimitsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SetDeploymentWorkerRateLimitsResponse& a, SetDeploymentWorkerRateLimitsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDeploymentWorkerRateLimitsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDeploymentWorkerRateLimitsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetDeploymentWorkerRateLimitsResponse* New() const final {
    return CreateMaybeMessage<SetDeploymentWorkerRateLimitsResponse>(nullptr);
  }

  SetDeploymentWorkerRateLimitsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDeploymentWorkerRateLimitsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDeploymentWorkerRateLimitsResponse& from);
  void MergeFrom(const SetDeploymentWorkerRateLimitsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDeploymentWorkerRateLimitsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerRateLimitsResponse";
  }
  protected:
  explicit SetDeploymentWorkerRateLimitsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerRateLimitsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class Deployment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.Deployment) */ {
 public:
  inline Deployment() : Deployment(nullptr) {};
  virtual ~Deployment();

  Deployment(const Deployment& from);
  Deployment(Deployment&& from) noexcept
    : Deployment() {
    *this = ::std::move(from);
  }

  inline Deployment& operator=(const Deployment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Deployment& operator=(Deployment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Deployment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Deployment* internal_default_instance() {
    return reinterpret_cast<const Deployment*>(
               &_Deployment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Deployment& a, Deployment& b) {
    a.Swap(&b);
  }
  inline void Swap(Deployment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Deployment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Deployment* New() const final {
    return CreateMaybeMessage<Deployment>(nullptr);
  }

  Deployment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Deployment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Deployment& from);
  void MergeFrom(const Deployment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Deployment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.Deployment";
  }
  protected:
  explicit Deployment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Deployment_Status Status;
  static constexpr Status UNKNOWN =
    Deployment_Status_UNKNOWN;
  static constexpr Status STARTING =
    Deployment_Status_STARTING;
  static constexpr Status RUNNING =
    Deployment_Status_RUNNING;
  static constexpr Status STOPPING =
    Deployment_Status_STOPPING;
  static constexpr Status STOPPED =
    Deployment_Status_STOPPED;
  static constexpr Status ERROR =
    Deployment_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return Deployment_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    Deployment_Status_Status_MIN;
  static constexpr Status Status_MAX =
    Deployment_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    Deployment_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return Deployment_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return Deployment_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return Deployment_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 9,
    kWorkerFlagsFieldNumber = 12,
    kWorkerConnectionCapacitiesFieldNumber = 16,
    kWorkerConnectionRateLimitsFieldNumber = 17,
    kIdFieldNumber = 1,
    kProjectNameFieldNumber = 2,
    kNameFieldNumber = 3,
    kRegionCodeFieldNumber = 4,
    kClusterCodeFieldNumber = 5,
    kAssemblyIdFieldNumber = 7,
    kStartingSnapshotIdFieldNumber = 8,
    kDescriptionFieldNumber = 18,
    kRuntimeVersionFieldNumber = 19,
    kLaunchConfigFieldNumber = 11,
    kStartTimeFieldNumber = 14,
    kStopTimeFieldNumber = 15,
    kExpiryTimeFieldNumber = 20,
    kStatusFieldNumber = 10,
  };
  // repeated string tag = 9 [(.validator.field) = {
  int tag_size() const;
  private:
  int _internal_tag_size() const;
  public:
  void clear_tag();
  const std::string& tag(int index) const;
  std::string* mutable_tag(int index);
  void set_tag(int index, const std::string& value);
  void set_tag(int index, std::string&& value);
  void set_tag(int index, const char* value);
  void set_tag(int index, const char* value, size_t size);
  std::string* add_tag();
  void add_tag(const std::string& value);
  void add_tag(std::string&& value);
  void add_tag(const char* value);
  void add_tag(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tag() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tag();
  private:
  const std::string& _internal_tag(int index) const;
  std::string* _internal_add_tag();
  public:

  // repeated .improbable.spatialos.deployment.v1alpha1.WorkerFlag worker_flags = 12;
  int worker_flags_size() const;
  private:
  int _internal_worker_flags_size() const;
  public:
  void clear_worker_flags();
  ::improbable::spatialos::deployment::v1alpha1::WorkerFlag* mutable_worker_flags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerFlag >*
      mutable_worker_flags();
  private:
  const ::improbable::spatialos::deployment::v1alpha1::WorkerFlag& _internal_worker_flags(int index) const;
  ::improbable::spatialos::deployment::v1alpha1::WorkerFlag* _internal_add_worker_flags();
  public:
  const ::improbable::spatialos::deployment::v1alpha1::WorkerFlag& worker_flags(int index) const;
  ::improbable::spatialos::deployment::v1alpha1::WorkerFlag* add_worker_flags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerFlag >&
      worker_flags() const;

  // repeated .improbable.spatialos.deployment.v1alpha1.WorkerCapacity worker_connection_capacities = 16;
  int worker_connection_capacities_size() const;
  private:
  int _internal_worker_connection_capacities_size() const;
  public:
  void clear_worker_connection_capacities();
  ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity* mutable_worker_connection_capacities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity >*
      mutable_worker_connection_capacities();
  private:
  const ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity& _internal_worker_connection_capacities(int index) const;
  ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity* _internal_add_worker_connection_capacities();
  public:
  const ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity& worker_connection_capacities(int index) const;
  ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity* add_worker_connection_capacities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity >&
      worker_connection_capacities() const;

  // repeated .improbable.spatialos.deployment.v1alpha1.WorkerRateLimit worker_connection_rate_limits = 17;
  int worker_connection_rate_limits_size() const;
  private:
  int _internal_worker_connection_rate_limits_size() const;
  public:
  void clear_worker_connection_rate_limits();
  ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit* mutable_worker_connection_rate_limits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit >*
      mutable_worker_connection_rate_limits();
  private:
  const ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit& _internal_worker_connection_rate_limits(int index) const;
  ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit* _internal_add_worker_connection_rate_limits();
  public:
  const ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit& worker_connection_rate_limits(int index) const;
  ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit* add_worker_connection_rate_limits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit >&
      worker_connection_rate_limits() const;

  // string id = 1 [(.improbable.logfield) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string project_name = 2 [(.improbable.logfield) = {
  void clear_project_name();
  const std::string& project_name() const;
  void set_project_name(const std::string& value);
  void set_project_name(std::string&& value);
  void set_project_name(const char* value);
  void set_project_name(const char* value, size_t size);
  std::string* mutable_project_name();
  std::string* release_project_name();
  void set_allocated_project_name(std::string* project_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_project_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project_name(
      std::string* project_name);
  private:
  const std::string& _internal_project_name() const;
  void _internal_set_project_name(const std::string& value);
  std::string* _internal_mutable_project_name();
  public:

  // string name = 3 [(.improbable.logfield) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string region_code = 4;
  void clear_region_code();
  const std::string& region_code() const;
  void set_region_code(const std::string& value);
  void set_region_code(std::string&& value);
  void set_region_code(const char* value);
  void set_region_code(const char* value, size_t size);
  std::string* mutable_region_code();
  std::string* release_region_code();
  void set_allocated_region_code(std::string* region_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_region_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_region_code(
      std::string* region_code);
  private:
  const std::string& _internal_region_code() const;
  void _internal_set_region_code(const std::string& value);
  std::string* _internal_mutable_region_code();
  public:

  // string cluster_code = 5;
  void clear_cluster_code();
  const std::string& cluster_code() const;
  void set_cluster_code(const std::string& value);
  void set_cluster_code(std::string&& value);
  void set_cluster_code(const char* value);
  void set_cluster_code(const char* value, size_t size);
  std::string* mutable_cluster_code();
  std::string* release_cluster_code();
  void set_allocated_cluster_code(std::string* cluster_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cluster_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cluster_code(
      std::string* cluster_code);
  private:
  const std::string& _internal_cluster_code() const;
  void _internal_set_cluster_code(const std::string& value);
  std::string* _internal_mutable_cluster_code();
  public:

  // string assembly_id = 7 [(.cli.flag) = {
  void clear_assembly_id();
  const std::string& assembly_id() const;
  void set_assembly_id(const std::string& value);
  void set_assembly_id(std::string&& value);
  void set_assembly_id(const char* value);
  void set_assembly_id(const char* value, size_t size);
  std::string* mutable_assembly_id();
  std::string* release_assembly_id();
  void set_allocated_assembly_id(std::string* assembly_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_assembly_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_assembly_id(
      std::string* assembly_id);
  private:
  const std::string& _internal_assembly_id() const;
  void _internal_set_assembly_id(const std::string& value);
  std::string* _internal_mutable_assembly_id();
  public:

  // string starting_snapshot_id = 8 [(.cli.flag) = {
  void clear_starting_snapshot_id();
  const std::string& starting_snapshot_id() const;
  void set_starting_snapshot_id(const std::string& value);
  void set_starting_snapshot_id(std::string&& value);
  void set_starting_snapshot_id(const char* value);
  void set_starting_snapshot_id(const char* value, size_t size);
  std::string* mutable_starting_snapshot_id();
  std::string* release_starting_snapshot_id();
  void set_allocated_starting_snapshot_id(std::string* starting_snapshot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_starting_snapshot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_starting_snapshot_id(
      std::string* starting_snapshot_id);
  private:
  const std::string& _internal_starting_snapshot_id() const;
  void _internal_set_starting_snapshot_id(const std::string& value);
  std::string* _internal_mutable_starting_snapshot_id();
  public:

  // string description = 18;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string runtime_version = 19 [(.cli.flag) = {
  void clear_runtime_version();
  const std::string& runtime_version() const;
  void set_runtime_version(const std::string& value);
  void set_runtime_version(std::string&& value);
  void set_runtime_version(const char* value);
  void set_runtime_version(const char* value, size_t size);
  std::string* mutable_runtime_version();
  std::string* release_runtime_version();
  void set_allocated_runtime_version(std::string* runtime_version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_runtime_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_runtime_version(
      std::string* runtime_version);
  private:
  const std::string& _internal_runtime_version() const;
  void _internal_set_runtime_version(const std::string& value);
  std::string* _internal_mutable_runtime_version();
  public:

  // .improbable.spatialos.deployment.v1alpha1.LaunchConfig launch_config = 11 [(.cli.flag) = {
  bool has_launch_config() const;
  private:
  bool _internal_has_launch_config() const;
  public:
  void clear_launch_config();
  const ::improbable::spatialos::deployment::v1alpha1::LaunchConfig& launch_config() const;
  ::improbable::spatialos::deployment::v1alpha1::LaunchConfig* release_launch_config();
  ::improbable::spatialos::deployment::v1alpha1::LaunchConfig* mutable_launch_config();
  void set_allocated_launch_config(::improbable::spatialos::deployment::v1alpha1::LaunchConfig* launch_config);
  private:
  const ::improbable::spatialos::deployment::v1alpha1::LaunchConfig& _internal_launch_config() const;
  ::improbable::spatialos::deployment::v1alpha1::LaunchConfig* _internal_mutable_launch_config();
  public:
  void unsafe_arena_set_allocated_launch_config(
      ::improbable::spatialos::deployment::v1alpha1::LaunchConfig* launch_config);
  ::improbable::spatialos::deployment::v1alpha1::LaunchConfig* unsafe_arena_release_launch_config();

  // .google.protobuf.Timestamp start_time = 14;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp stop_time = 15;
  bool has_stop_time() const;
  private:
  bool _internal_has_stop_time() const;
  public:
  void clear_stop_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& stop_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_stop_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_stop_time();
  void set_allocated_stop_time(PROTOBUF_NAMESPACE_ID::Timestamp* stop_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_stop_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_stop_time();
  public:
  void unsafe_arena_set_allocated_stop_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* stop_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_stop_time();

  // .google.protobuf.Timestamp expiry_time = 20;
  bool has_expiry_time() const;
  private:
  bool _internal_has_expiry_time() const;
  public:
  void clear_expiry_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expiry_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expiry_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiry_time();
  void set_allocated_expiry_time(PROTOBUF_NAMESPACE_ID::Timestamp* expiry_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiry_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiry_time();
  public:
  void unsafe_arena_set_allocated_expiry_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* expiry_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiry_time();

  // .improbable.spatialos.deployment.v1alpha1.Deployment.Status status = 10;
  void clear_status();
  ::improbable::spatialos::deployment::v1alpha1::Deployment_Status status() const;
  void set_status(::improbable::spatialos::deployment::v1alpha1::Deployment_Status value);
  private:
  ::improbable::spatialos::deployment::v1alpha1::Deployment_Status _internal_status() const;
  void _internal_set_status(::improbable::spatialos::deployment::v1alpha1::Deployment_Status value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.Deployment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tag_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerFlag > worker_flags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity > worker_connection_capacities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit > worker_connection_rate_limits_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cluster_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assembly_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starting_snapshot_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_version_;
  ::improbable::spatialos::deployment::v1alpha1::LaunchConfig* launch_config_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* stop_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expiry_time_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class WorkerCapacity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.WorkerCapacity) */ {
 public:
  inline WorkerCapacity() : WorkerCapacity(nullptr) {};
  virtual ~WorkerCapacity();

  WorkerCapacity(const WorkerCapacity& from);
  WorkerCapacity(WorkerCapacity&& from) noexcept
    : WorkerCapacity() {
    *this = ::std::move(from);
  }

  inline WorkerCapacity& operator=(const WorkerCapacity& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerCapacity& operator=(WorkerCapacity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerCapacity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkerCapacity* internal_default_instance() {
    return reinterpret_cast<const WorkerCapacity*>(
               &_WorkerCapacity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(WorkerCapacity& a, WorkerCapacity& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerCapacity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerCapacity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerCapacity* New() const final {
    return CreateMaybeMessage<WorkerCapacity>(nullptr);
  }

  WorkerCapacity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerCapacity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerCapacity& from);
  void MergeFrom(const WorkerCapacity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerCapacity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.WorkerCapacity";
  }
  protected:
  explicit WorkerCapacity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerTypeFieldNumber = 1,
    kMaxCapacityFieldNumber = 2,
    kRemainingCapacityFieldNumber = 3,
  };
  // string worker_type = 1;
  void clear_worker_type();
  const std::string& worker_type() const;
  void set_worker_type(const std::string& value);
  void set_worker_type(std::string&& value);
  void set_worker_type(const char* value);
  void set_worker_type(const char* value, size_t size);
  std::string* mutable_worker_type();
  std::string* release_worker_type();
  void set_allocated_worker_type(std::string* worker_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_worker_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_worker_type(
      std::string* worker_type);
  private:
  const std::string& _internal_worker_type() const;
  void _internal_set_worker_type(const std::string& value);
  std::string* _internal_mutable_worker_type();
  public:

  // int32 max_capacity = 2 [(.validator.field) = {
  void clear_max_capacity();
  ::PROTOBUF_NAMESPACE_ID::int32 max_capacity() const;
  void set_max_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_capacity() const;
  void _internal_set_max_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 remaining_capacity = 3;
  void clear_remaining_capacity();
  ::PROTOBUF_NAMESPACE_ID::int32 remaining_capacity() const;
  void set_remaining_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remaining_capacity() const;
  void _internal_set_remaining_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.WorkerCapacity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_capacity_;
  ::PROTOBUF_NAMESPACE_ID::int32 remaining_capacity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class WorkerRateLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.WorkerRateLimit) */ {
 public:
  inline WorkerRateLimit() : WorkerRateLimit(nullptr) {};
  virtual ~WorkerRateLimit();

  WorkerRateLimit(const WorkerRateLimit& from);
  WorkerRateLimit(WorkerRateLimit&& from) noexcept
    : WorkerRateLimit() {
    *this = ::std::move(from);
  }

  inline WorkerRateLimit& operator=(const WorkerRateLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerRateLimit& operator=(WorkerRateLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerRateLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkerRateLimit* internal_default_instance() {
    return reinterpret_cast<const WorkerRateLimit*>(
               &_WorkerRateLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(WorkerRateLimit& a, WorkerRateLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerRateLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerRateLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerRateLimit* New() const final {
    return CreateMaybeMessage<WorkerRateLimit>(nullptr);
  }

  WorkerRateLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerRateLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerRateLimit& from);
  void MergeFrom(const WorkerRateLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerRateLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.WorkerRateLimit";
  }
  protected:
  explicit WorkerRateLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerTypeFieldNumber = 1,
    kDurationFieldNumber = 2,
    kRequestsInDurationFieldNumber = 3,
  };
  // string worker_type = 1;
  void clear_worker_type();
  const std::string& worker_type() const;
  void set_worker_type(const std::string& value);
  void set_worker_type(std::string&& value);
  void set_worker_type(const char* value);
  void set_worker_type(const char* value, size_t size);
  std::string* mutable_worker_type();
  std::string* release_worker_type();
  void set_allocated_worker_type(std::string* worker_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_worker_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_worker_type(
      std::string* worker_type);
  private:
  const std::string& _internal_worker_type() const;
  void _internal_set_worker_type(const std::string& value);
  std::string* _internal_mutable_worker_type();
  public:

  // .google.protobuf.Duration duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      PROTOBUF_NAMESPACE_ID::Duration* duration);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // uint32 requests_in_duration = 3;
  void clear_requests_in_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 requests_in_duration() const;
  void set_requests_in_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_requests_in_duration() const;
  void _internal_set_requests_in_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.WorkerRateLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_type_;
  PROTOBUF_NAMESPACE_ID::Duration* duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 requests_in_duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class LaunchConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.LaunchConfig) */ {
 public:
  inline LaunchConfig() : LaunchConfig(nullptr) {};
  virtual ~LaunchConfig();

  LaunchConfig(const LaunchConfig& from);
  LaunchConfig(LaunchConfig&& from) noexcept
    : LaunchConfig() {
    *this = ::std::move(from);
  }

  inline LaunchConfig& operator=(const LaunchConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaunchConfig& operator=(LaunchConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaunchConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaunchConfig* internal_default_instance() {
    return reinterpret_cast<const LaunchConfig*>(
               &_LaunchConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LaunchConfig& a, LaunchConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LaunchConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaunchConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaunchConfig* New() const final {
    return CreateMaybeMessage<LaunchConfig>(nullptr);
  }

  LaunchConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaunchConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaunchConfig& from);
  void MergeFrom(const LaunchConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaunchConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.LaunchConfig";
  }
  protected:
  explicit LaunchConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigJsonFieldNumber = 1,
  };
  // string config_json = 1 [(.cli.flag) = {
  void clear_config_json();
  const std::string& config_json() const;
  void set_config_json(const std::string& value);
  void set_config_json(std::string&& value);
  void set_config_json(const char* value);
  void set_config_json(const char* value, size_t size);
  std::string* mutable_config_json();
  std::string* release_config_json();
  void set_allocated_config_json(std::string* config_json);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_config_json();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_config_json(
      std::string* config_json);
  private:
  const std::string& _internal_config_json() const;
  void _internal_set_config_json(const std::string& value);
  std::string* _internal_mutable_config_json();
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.LaunchConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_json_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class WorkerFlag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.WorkerFlag) */ {
 public:
  inline WorkerFlag() : WorkerFlag(nullptr) {};
  virtual ~WorkerFlag();

  WorkerFlag(const WorkerFlag& from);
  WorkerFlag(WorkerFlag&& from) noexcept
    : WorkerFlag() {
    *this = ::std::move(from);
  }

  inline WorkerFlag& operator=(const WorkerFlag& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerFlag& operator=(WorkerFlag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerFlag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkerFlag* internal_default_instance() {
    return reinterpret_cast<const WorkerFlag*>(
               &_WorkerFlag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(WorkerFlag& a, WorkerFlag& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerFlag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerFlag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerFlag* New() const final {
    return CreateMaybeMessage<WorkerFlag>(nullptr);
  }

  WorkerFlag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerFlag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerFlag& from);
  void MergeFrom(const WorkerFlag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerFlag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.WorkerFlag";
  }
  protected:
  explicit WorkerFlag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerTypeFieldNumber = 1,
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string worker_type = 1;
  void clear_worker_type();
  const std::string& worker_type() const;
  void set_worker_type(const std::string& value);
  void set_worker_type(std::string&& value);
  void set_worker_type(const char* value);
  void set_worker_type(const char* value, size_t size);
  std::string* mutable_worker_type();
  std::string* release_worker_type();
  void set_allocated_worker_type(std::string* worker_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_worker_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_worker_type(
      std::string* worker_type);
  private:
  const std::string& _internal_worker_type() const;
  void _internal_set_worker_type(const std::string& value);
  std::string* _internal_mutable_worker_type();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.WorkerFlag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {};
  virtual ~PlayerInfo();

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInfo* New() const final {
    return CreateMaybeMessage<PlayerInfo>(nullptr);
  }

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivePlayersFieldNumber = 1,
    kCapacityFieldNumber = 2,
    kQueueLengthFieldNumber = 3,
  };
  // int64 active_players = 1;
  void clear_active_players();
  ::PROTOBUF_NAMESPACE_ID::int64 active_players() const;
  void set_active_players(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_active_players() const;
  void _internal_set_active_players(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 capacity = 2;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::int64 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 queue_length = 3;
  void clear_queue_length();
  ::PROTOBUF_NAMESPACE_ID::int64 queue_length() const;
  void set_queue_length(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_queue_length() const;
  void _internal_set_queue_length(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 active_players_;
  ::PROTOBUF_NAMESPACE_ID::int64 capacity_;
  ::PROTOBUF_NAMESPACE_ID::int64 queue_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class ListDeploymentsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest) */ {
 public:
  inline ListDeploymentsRequest() : ListDeploymentsRequest(nullptr) {};
  virtual ~ListDeploymentsRequest();

  ListDeploymentsRequest(const ListDeploymentsRequest& from);
  ListDeploymentsRequest(ListDeploymentsRequest&& from) noexcept
    : ListDeploymentsRequest() {
    *this = ::std::move(from);
  }

  inline ListDeploymentsRequest& operator=(const ListDeploymentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDeploymentsRequest& operator=(ListDeploymentsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDeploymentsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDeploymentsRequest* internal_default_instance() {
    return reinterpret_cast<const ListDeploymentsRequest*>(
               &_ListDeploymentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ListDeploymentsRequest& a, ListDeploymentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDeploymentsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDeploymentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDeploymentsRequest* New() const final {
    return CreateMaybeMessage<ListDeploymentsRequest>(nullptr);
  }

  ListDeploymentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDeploymentsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDeploymentsRequest& from);
  void MergeFrom(const ListDeploymentsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDeploymentsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest";
  }
  protected:
  explicit ListDeploymentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListDeploymentsRequest_DeploymentStoppedStatusFilter DeploymentStoppedStatusFilter;
  static constexpr DeploymentStoppedStatusFilter ALL_DEPLOYMENTS =
    ListDeploymentsRequest_DeploymentStoppedStatusFilter_ALL_DEPLOYMENTS;
  static constexpr DeploymentStoppedStatusFilter NOT_STOPPED_DEPLOYMENTS =
    ListDeploymentsRequest_DeploymentStoppedStatusFilter_NOT_STOPPED_DEPLOYMENTS;
  static constexpr DeploymentStoppedStatusFilter STOPPED_DEPLOYMENTS =
    ListDeploymentsRequest_DeploymentStoppedStatusFilter_STOPPED_DEPLOYMENTS;
  static inline bool DeploymentStoppedStatusFilter_IsValid(int value) {
    return ListDeploymentsRequest_DeploymentStoppedStatusFilter_IsValid(value);
  }
  static constexpr DeploymentStoppedStatusFilter DeploymentStoppedStatusFilter_MIN =
    ListDeploymentsRequest_DeploymentStoppedStatusFilter_DeploymentStoppedStatusFilter_MIN;
  static constexpr DeploymentStoppedStatusFilter DeploymentStoppedStatusFilter_MAX =
    ListDeploymentsRequest_DeploymentStoppedStatusFilter_DeploymentStoppedStatusFilter_MAX;
  static constexpr int DeploymentStoppedStatusFilter_ARRAYSIZE =
    ListDeploymentsRequest_DeploymentStoppedStatusFilter_DeploymentStoppedStatusFilter_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DeploymentStoppedStatusFilter_descriptor() {
    return ListDeploymentsRequest_DeploymentStoppedStatusFilter_descriptor();
  }
  template<typename T>
  static inline const std::string& DeploymentStoppedStatusFilter_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeploymentStoppedStatusFilter>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeploymentStoppedStatusFilter_Name.");
    return ListDeploymentsRequest_DeploymentStoppedStatusFilter_Name(enum_t_value);
  }
  static inline bool DeploymentStoppedStatusFilter_Parse(const std::string& name,
      DeploymentStoppedStatusFilter* value) {
    return ListDeploymentsRequest_DeploymentStoppedStatusFilter_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFiltersFieldNumber = 7,
    kProjectNameFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kDeploymentNameFieldNumber = 4,
    kPageSizeFieldNumber = 2,
    kViewFieldNumber = 5,
    kDeploymentStoppedStatusFilterFieldNumber = 6,
  };
  // repeated .improbable.spatialos.deployment.v1alpha1.Filter filters = 7;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  ::improbable::spatialos::deployment::v1alpha1::Filter* mutable_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::Filter >*
      mutable_filters();
  private:
  const ::improbable::spatialos::deployment::v1alpha1::Filter& _internal_filters(int index) const;
  ::improbable::spatialos::deployment::v1alpha1::Filter* _internal_add_filters();
  public:
  const ::improbable::spatialos::deployment::v1alpha1::Filter& filters(int index) const;
  ::improbable::spatialos::deployment::v1alpha1::Filter* add_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::Filter >&
      filters() const;

  // string project_name = 1 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
  void clear_project_name();
  const std::string& project_name() const;
  void set_project_name(const std::string& value);
  void set_project_name(std::string&& value);
  void set_project_name(const char* value);
  void set_project_name(const char* value, size_t size);
  std::string* mutable_project_name();
  std::string* release_project_name();
  void set_allocated_project_name(std::string* project_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_project_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project_name(
      std::string* project_name);
  private:
  const std::string& _internal_project_name() const;
  void _internal_set_project_name(const std::string& value);
  std::string* _internal_mutable_project_name();
  public:

  // string page_token = 3 [(.cli.flag) = {
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string deployment_name = 4 [(.improbable.logfield) = {
  void clear_deployment_name();
  const std::string& deployment_name() const;
  void set_deployment_name(const std::string& value);
  void set_deployment_name(std::string&& value);
  void set_deployment_name(const char* value);
  void set_deployment_name(const char* value, size_t size);
  std::string* mutable_deployment_name();
  std::string* release_deployment_name();
  void set_allocated_deployment_name(std::string* deployment_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_deployment_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_deployment_name(
      std::string* deployment_name);
  private:
  const std::string& _internal_deployment_name() const;
  void _internal_set_deployment_name(const std::string& value);
  std::string* _internal_mutable_deployment_name();
  public:

  // int32 page_size = 2 [(.validator.field) = {
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .improbable.spatialos.deployment.v1alpha1.ViewType view = 5 [(.cli.flag) = {
  void clear_view();
  ::improbable::spatialos::deployment::v1alpha1::ViewType view() const;
  void set_view(::improbable::spatialos::deployment::v1alpha1::ViewType value);
  private:
  ::improbable::spatialos::deployment::v1alpha1::ViewType _internal_view() const;
  void _internal_set_view(::improbable::spatialos::deployment::v1alpha1::ViewType value);
  public:

  // .improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.DeploymentStoppedStatusFilter deployment_stopped_status_filter = 6 [(.cli.flag) = {
  void clear_deployment_stopped_status_filter();
  ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest_DeploymentStoppedStatusFilter deployment_stopped_status_filter() const;
  void set_deployment_stopped_status_filter(::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest_DeploymentStoppedStatusFilter value);
  private:
  ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest_DeploymentStoppedStatusFilter _internal_deployment_stopped_status_filter() const;
  void _internal_set_deployment_stopped_status_filter(::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest_DeploymentStoppedStatusFilter value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::Filter > filters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deployment_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  int view_;
  int deployment_stopped_status_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class ListDeploymentsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.ListDeploymentsResponse) */ {
 public:
  inline ListDeploymentsResponse() : ListDeploymentsResponse(nullptr) {};
  virtual ~ListDeploymentsResponse();

  ListDeploymentsResponse(const ListDeploymentsResponse& from);
  ListDeploymentsResponse(ListDeploymentsResponse&& from) noexcept
    : ListDeploymentsResponse() {
    *this = ::std::move(from);
  }

  inline ListDeploymentsResponse& operator=(const ListDeploymentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDeploymentsResponse& operator=(ListDeploymentsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDeploymentsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDeploymentsResponse* internal_default_instance() {
    return reinterpret_cast<const ListDeploymentsResponse*>(
               &_ListDeploymentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ListDeploymentsResponse& a, ListDeploymentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDeploymentsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDeploymentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDeploymentsResponse* New() const final {
    return CreateMaybeMessage<ListDeploymentsResponse>(nullptr);
  }

  ListDeploymentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDeploymentsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDeploymentsResponse& from);
  void MergeFrom(const ListDeploymentsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDeploymentsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.ListDeploymentsResponse";
  }
  protected:
  explicit ListDeploymentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeploymentsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .improbable.spatialos.deployment.v1alpha1.Deployment deployments = 1;
  int deployments_size() const;
  private:
  int _internal_deployments_size() const;
  public:
  void clear_deployments();
  ::improbable::spatialos::deployment::v1alpha1::Deployment* mutable_deployments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::Deployment >*
      mutable_deployments();
  private:
  const ::improbable::spatialos::deployment::v1alpha1::Deployment& _internal_deployments(int index) const;
  ::improbable::spatialos::deployment::v1alpha1::Deployment* _internal_add_deployments();
  public:
  const ::improbable::spatialos::deployment::v1alpha1::Deployment& deployments(int index) const;
  ::improbable::spatialos::deployment::v1alpha1::Deployment* add_deployments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::Deployment >&
      deployments() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_next_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.ListDeploymentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::Deployment > deployments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class GetDeploymentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest) */ {
 public:
  inline GetDeploymentRequest() : GetDeploymentRequest(nullptr) {};
  virtual ~GetDeploymentRequest();

  GetDeploymentRequest(const GetDeploymentRequest& from);
  GetDeploymentRequest(GetDeploymentRequest&& from) noexcept
    : GetDeploymentRequest() {
    *this = ::std::move(from);
  }

  inline GetDeploymentRequest& operator=(const GetDeploymentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeploymentRequest& operator=(GetDeploymentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeploymentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeploymentRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeploymentRequest*>(
               &_GetDeploymentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetDeploymentRequest& a, GetDeploymentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeploymentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeploymentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeploymentRequest* New() const final {
    return CreateMaybeMessage<GetDeploymentRequest>(nullptr);
  }

  GetDeploymentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeploymentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeploymentRequest& from);
  void MergeFrom(const GetDeploymentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeploymentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest";
  }
  protected:
  explicit GetDeploymentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kViewFieldNumber = 3,
  };
  // string project_name = 1 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
  void clear_project_name();
  const std::string& project_name() const;
  void set_project_name(const std::string& value);
  void set_project_name(std::string&& value);
  void set_project_name(const char* value);
  void set_project_name(const char* value, size_t size);
  std::string* mutable_project_name();
  std::string* release_project_name();
  void set_allocated_project_name(std::string* project_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_project_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project_name(
      std::string* project_name);
  private:
  const std::string& _internal_project_name() const;
  void _internal_set_project_name(const std::string& value);
  std::string* _internal_mutable_project_name();
  public:

  // string id = 2 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .improbable.spatialos.deployment.v1alpha1.ViewType view = 3 [(.cli.flag) = {
  void clear_view();
  ::improbable::spatialos::deployment::v1alpha1::ViewType view() const;
  void set_view(::improbable::spatialos::deployment::v1alpha1::ViewType value);
  private:
  ::improbable::spatialos::deployment::v1alpha1::ViewType _internal_view() const;
  void _internal_set_view(::improbable::spatialos::deployment::v1alpha1::ViewType value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int view_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class GetDeploymentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.GetDeploymentResponse) */ {
 public:
  inline GetDeploymentResponse() : GetDeploymentResponse(nullptr) {};
  virtual ~GetDeploymentResponse();

  GetDeploymentResponse(const GetDeploymentResponse& from);
  GetDeploymentResponse(GetDeploymentResponse&& from) noexcept
    : GetDeploymentResponse() {
    *this = ::std::move(from);
  }

  inline GetDeploymentResponse& operator=(const GetDeploymentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeploymentResponse& operator=(GetDeploymentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeploymentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeploymentResponse* internal_default_instance() {
    return reinterpret_cast<const GetDeploymentResponse*>(
               &_GetDeploymentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetDeploymentResponse& a, GetDeploymentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeploymentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeploymentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeploymentResponse* New() const final {
    return CreateMaybeMessage<GetDeploymentResponse>(nullptr);
  }

  GetDeploymentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeploymentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeploymentResponse& from);
  void MergeFrom(const GetDeploymentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeploymentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.GetDeploymentResponse";
  }
  protected:
  explicit GetDeploymentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeploymentFieldNumber = 1,
  };
  // .improbable.spatialos.deployment.v1alpha1.Deployment deployment = 1;
  bool has_deployment() const;
  private:
  bool _internal_has_deployment() const;
  public:
  void clear_deployment();
  const ::improbable::spatialos::deployment::v1alpha1::Deployment& deployment() const;
  ::improbable::spatialos::deployment::v1alpha1::Deployment* release_deployment();
  ::improbable::spatialos::deployment::v1alpha1::Deployment* mutable_deployment();
  void set_allocated_deployment(::improbable::spatialos::deployment::v1alpha1::Deployment* deployment);
  private:
  const ::improbable::spatialos::deployment::v1alpha1::Deployment& _internal_deployment() const;
  ::improbable::spatialos::deployment::v1alpha1::Deployment* _internal_mutable_deployment();
  public:
  void unsafe_arena_set_allocated_deployment(
      ::improbable::spatialos::deployment::v1alpha1::Deployment* deployment);
  ::improbable::spatialos::deployment::v1alpha1::Deployment* unsafe_arena_release_deployment();

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.GetDeploymentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::spatialos::deployment::v1alpha1::Deployment* deployment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class GetRunningDeploymentByNameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest) */ {
 public:
  inline GetRunningDeploymentByNameRequest() : GetRunningDeploymentByNameRequest(nullptr) {};
  virtual ~GetRunningDeploymentByNameRequest();

  GetRunningDeploymentByNameRequest(const GetRunningDeploymentByNameRequest& from);
  GetRunningDeploymentByNameRequest(GetRunningDeploymentByNameRequest&& from) noexcept
    : GetRunningDeploymentByNameRequest() {
    *this = ::std::move(from);
  }

  inline GetRunningDeploymentByNameRequest& operator=(const GetRunningDeploymentByNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRunningDeploymentByNameRequest& operator=(GetRunningDeploymentByNameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRunningDeploymentByNameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRunningDeploymentByNameRequest* internal_default_instance() {
    return reinterpret_cast<const GetRunningDeploymentByNameRequest*>(
               &_GetRunningDeploymentByNameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetRunningDeploymentByNameRequest& a, GetRunningDeploymentByNameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRunningDeploymentByNameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRunningDeploymentByNameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRunningDeploymentByNameRequest* New() const final {
    return CreateMaybeMessage<GetRunningDeploymentByNameRequest>(nullptr);
  }

  GetRunningDeploymentByNameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRunningDeploymentByNameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRunningDeploymentByNameRequest& from);
  void MergeFrom(const GetRunningDeploymentByNameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRunningDeploymentByNameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest";
  }
  protected:
  explicit GetRunningDeploymentByNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectNameFieldNumber = 1,
    kDeploymentNameFieldNumber = 2,
  };
  // string project_name = 1 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
  void clear_project_name();
  const std::string& project_name() const;
  void set_project_name(const std::string& value);
  void set_project_name(std::string&& value);
  void set_project_name(const char* value);
  void set_project_name(const char* value, size_t size);
  std::string* mutable_project_name();
  std::string* release_project_name();
  void set_allocated_project_name(std::string* project_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_project_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project_name(
      std::string* project_name);
  private:
  const std::string& _internal_project_name() const;
  void _internal_set_project_name(const std::string& value);
  std::string* _internal_mutable_project_name();
  public:

  // string deployment_name = 2 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
  void clear_deployment_name();
  const std::string& deployment_name() const;
  void set_deployment_name(const std::string& value);
  void set_deployment_name(std::string&& value);
  void set_deployment_name(const char* value);
  void set_deployment_name(const char* value, size_t size);
  std::string* mutable_deployment_name();
  std::string* release_deployment_name();
  void set_allocated_deployment_name(std::string* deployment_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_deployment_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_deployment_name(
      std::string* deployment_name);
  private:
  const std::string& _internal_deployment_name() const;
  void _internal_set_deployment_name(const std::string& value);
  std::string* _internal_mutable_deployment_name();
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deployment_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class CreateDeploymentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.CreateDeploymentRequest) */ {
 public:
  inline CreateDeploymentRequest() : CreateDeploymentRequest(nullptr) {};
  virtual ~CreateDeploymentRequest();

  CreateDeploymentRequest(const CreateDeploymentRequest& from);
  CreateDeploymentRequest(CreateDeploymentRequest&& from) noexcept
    : CreateDeploymentRequest() {
    *this = ::std::move(from);
  }

  inline CreateDeploymentRequest& operator=(const CreateDeploymentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDeploymentRequest& operator=(CreateDeploymentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDeploymentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDeploymentRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDeploymentRequest*>(
               &_CreateDeploymentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CreateDeploymentRequest& a, CreateDeploymentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDeploymentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDeploymentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDeploymentRequest* New() const final {
    return CreateMaybeMessage<CreateDeploymentRequest>(nullptr);
  }

  CreateDeploymentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDeploymentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDeploymentRequest& from);
  void MergeFrom(const CreateDeploymentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDeploymentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.CreateDeploymentRequest";
  }
  protected:
  explicit CreateDeploymentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeploymentFieldNumber = 2,
  };
  // .improbable.spatialos.deployment.v1alpha1.Deployment deployment = 2 [(.google.api.field_behavior) = REQUIRED, (.validator.field) = {
  bool has_deployment() const;
  private:
  bool _internal_has_deployment() const;
  public:
  void clear_deployment();
  const ::improbable::spatialos::deployment::v1alpha1::Deployment& deployment() const;
  ::improbable::spatialos::deployment::v1alpha1::Deployment* release_deployment();
  ::improbable::spatialos::deployment::v1alpha1::Deployment* mutable_deployment();
  void set_allocated_deployment(::improbable::spatialos::deployment::v1alpha1::Deployment* deployment);
  private:
  const ::improbable::spatialos::deployment::v1alpha1::Deployment& _internal_deployment() const;
  ::improbable::spatialos::deployment::v1alpha1::Deployment* _internal_mutable_deployment();
  public:
  void unsafe_arena_set_allocated_deployment(
      ::improbable::spatialos::deployment::v1alpha1::Deployment* deployment);
  ::improbable::spatialos::deployment::v1alpha1::Deployment* unsafe_arena_release_deployment();

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.CreateDeploymentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::spatialos::deployment::v1alpha1::Deployment* deployment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class CreateDeploymentMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.CreateDeploymentMetadata) */ {
 public:
  inline CreateDeploymentMetadata() : CreateDeploymentMetadata(nullptr) {};
  virtual ~CreateDeploymentMetadata();

  CreateDeploymentMetadata(const CreateDeploymentMetadata& from);
  CreateDeploymentMetadata(CreateDeploymentMetadata&& from) noexcept
    : CreateDeploymentMetadata() {
    *this = ::std::move(from);
  }

  inline CreateDeploymentMetadata& operator=(const CreateDeploymentMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDeploymentMetadata& operator=(CreateDeploymentMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDeploymentMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDeploymentMetadata* internal_default_instance() {
    return reinterpret_cast<const CreateDeploymentMetadata*>(
               &_CreateDeploymentMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CreateDeploymentMetadata& a, CreateDeploymentMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDeploymentMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDeploymentMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDeploymentMetadata* New() const final {
    return CreateMaybeMessage<CreateDeploymentMetadata>(nullptr);
  }

  CreateDeploymentMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDeploymentMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDeploymentMetadata& from);
  void MergeFrom(const CreateDeploymentMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDeploymentMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.CreateDeploymentMetadata";
  }
  protected:
  explicit CreateDeploymentMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.CreateDeploymentMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class UpdateDeploymentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.UpdateDeploymentRequest) */ {
 public:
  inline UpdateDeploymentRequest() : UpdateDeploymentRequest(nullptr) {};
  virtual ~UpdateDeploymentRequest();

  UpdateDeploymentRequest(const UpdateDeploymentRequest& from);
  UpdateDeploymentRequest(UpdateDeploymentRequest&& from) noexcept
    : UpdateDeploymentRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDeploymentRequest& operator=(const UpdateDeploymentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDeploymentRequest& operator=(UpdateDeploymentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDeploymentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDeploymentRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDeploymentRequest*>(
               &_UpdateDeploymentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(UpdateDeploymentRequest& a, UpdateDeploymentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDeploymentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDeploymentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDeploymentRequest* New() const final {
    return CreateMaybeMessage<UpdateDeploymentRequest>(nullptr);
  }

  UpdateDeploymentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDeploymentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDeploymentRequest& from);
  void MergeFrom(const UpdateDeploymentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDeploymentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.UpdateDeploymentRequest";
  }
  protected:
  explicit UpdateDeploymentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeploymentFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .improbable.spatialos.deployment.v1alpha1.Deployment deployment = 1 [(.google.api.field_behavior) = REQUIRED, (.validator.field) = {
  bool has_deployment() const;
  private:
  bool _internal_has_deployment() const;
  public:
  void clear_deployment();
  const ::improbable::spatialos::deployment::v1alpha1::Deployment& deployment() const;
  ::improbable::spatialos::deployment::v1alpha1::Deployment* release_deployment();
  ::improbable::spatialos::deployment::v1alpha1::Deployment* mutable_deployment();
  void set_allocated_deployment(::improbable::spatialos::deployment::v1alpha1::Deployment* deployment);
  private:
  const ::improbable::spatialos::deployment::v1alpha1::Deployment& _internal_deployment() const;
  ::improbable::spatialos::deployment::v1alpha1::Deployment* _internal_mutable_deployment();
  public:
  void unsafe_arena_set_allocated_deployment(
      ::improbable::spatialos::deployment::v1alpha1::Deployment* deployment);
  ::improbable::spatialos::deployment::v1alpha1::Deployment* unsafe_arena_release_deployment();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.UpdateDeploymentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::spatialos::deployment::v1alpha1::Deployment* deployment_;
  PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class UpdateDeploymentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.UpdateDeploymentResponse) */ {
 public:
  inline UpdateDeploymentResponse() : UpdateDeploymentResponse(nullptr) {};
  virtual ~UpdateDeploymentResponse();

  UpdateDeploymentResponse(const UpdateDeploymentResponse& from);
  UpdateDeploymentResponse(UpdateDeploymentResponse&& from) noexcept
    : UpdateDeploymentResponse() {
    *this = ::std::move(from);
  }

  inline UpdateDeploymentResponse& operator=(const UpdateDeploymentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDeploymentResponse& operator=(UpdateDeploymentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDeploymentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDeploymentResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateDeploymentResponse*>(
               &_UpdateDeploymentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UpdateDeploymentResponse& a, UpdateDeploymentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDeploymentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDeploymentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDeploymentResponse* New() const final {
    return CreateMaybeMessage<UpdateDeploymentResponse>(nullptr);
  }

  UpdateDeploymentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDeploymentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDeploymentResponse& from);
  void MergeFrom(const UpdateDeploymentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDeploymentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.UpdateDeploymentResponse";
  }
  protected:
  explicit UpdateDeploymentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeploymentFieldNumber = 1,
  };
  // .improbable.spatialos.deployment.v1alpha1.Deployment deployment = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_deployment() const;
  private:
  bool _internal_has_deployment() const;
  public:
  void clear_deployment();
  const ::improbable::spatialos::deployment::v1alpha1::Deployment& deployment() const;
  ::improbable::spatialos::deployment::v1alpha1::Deployment* release_deployment();
  ::improbable::spatialos::deployment::v1alpha1::Deployment* mutable_deployment();
  void set_allocated_deployment(::improbable::spatialos::deployment::v1alpha1::Deployment* deployment);
  private:
  const ::improbable::spatialos::deployment::v1alpha1::Deployment& _internal_deployment() const;
  ::improbable::spatialos::deployment::v1alpha1::Deployment* _internal_mutable_deployment();
  public:
  void unsafe_arena_set_allocated_deployment(
      ::improbable::spatialos::deployment::v1alpha1::Deployment* deployment);
  ::improbable::spatialos::deployment::v1alpha1::Deployment* unsafe_arena_release_deployment();

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.UpdateDeploymentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::spatialos::deployment::v1alpha1::Deployment* deployment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class StopDeploymentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest) */ {
 public:
  inline StopDeploymentRequest() : StopDeploymentRequest(nullptr) {};
  virtual ~StopDeploymentRequest();

  StopDeploymentRequest(const StopDeploymentRequest& from);
  StopDeploymentRequest(StopDeploymentRequest&& from) noexcept
    : StopDeploymentRequest() {
    *this = ::std::move(from);
  }

  inline StopDeploymentRequest& operator=(const StopDeploymentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopDeploymentRequest& operator=(StopDeploymentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopDeploymentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopDeploymentRequest* internal_default_instance() {
    return reinterpret_cast<const StopDeploymentRequest*>(
               &_StopDeploymentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(StopDeploymentRequest& a, StopDeploymentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopDeploymentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopDeploymentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopDeploymentRequest* New() const final {
    return CreateMaybeMessage<StopDeploymentRequest>(nullptr);
  }

  StopDeploymentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopDeploymentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopDeploymentRequest& from);
  void MergeFrom(const StopDeploymentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopDeploymentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest";
  }
  protected:
  explicit StopDeploymentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectNameFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string project_name = 1 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
  void clear_project_name();
  const std::string& project_name() const;
  void set_project_name(const std::string& value);
  void set_project_name(std::string&& value);
  void set_project_name(const char* value);
  void set_project_name(const char* value, size_t size);
  std::string* mutable_project_name();
  std::string* release_project_name();
  void set_allocated_project_name(std::string* project_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_project_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project_name(
      std::string* project_name);
  private:
  const std::string& _internal_project_name() const;
  void _internal_set_project_name(const std::string& value);
  std::string* _internal_mutable_project_name();
  public:

  // string id = 2 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class StopDeploymentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.StopDeploymentResponse) */ {
 public:
  inline StopDeploymentResponse() : StopDeploymentResponse(nullptr) {};
  virtual ~StopDeploymentResponse();

  StopDeploymentResponse(const StopDeploymentResponse& from);
  StopDeploymentResponse(StopDeploymentResponse&& from) noexcept
    : StopDeploymentResponse() {
    *this = ::std::move(from);
  }

  inline StopDeploymentResponse& operator=(const StopDeploymentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopDeploymentResponse& operator=(StopDeploymentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopDeploymentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopDeploymentResponse* internal_default_instance() {
    return reinterpret_cast<const StopDeploymentResponse*>(
               &_StopDeploymentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(StopDeploymentResponse& a, StopDeploymentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopDeploymentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopDeploymentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopDeploymentResponse* New() const final {
    return CreateMaybeMessage<StopDeploymentResponse>(nullptr);
  }

  StopDeploymentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopDeploymentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopDeploymentResponse& from);
  void MergeFrom(const StopDeploymentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopDeploymentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.StopDeploymentResponse";
  }
  protected:
  explicit StopDeploymentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.StopDeploymentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class DeleteDeploymentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.DeleteDeploymentRequest) */ {
 public:
  inline DeleteDeploymentRequest() : DeleteDeploymentRequest(nullptr) {};
  virtual ~DeleteDeploymentRequest();

  DeleteDeploymentRequest(const DeleteDeploymentRequest& from);
  DeleteDeploymentRequest(DeleteDeploymentRequest&& from) noexcept
    : DeleteDeploymentRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDeploymentRequest& operator=(const DeleteDeploymentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDeploymentRequest& operator=(DeleteDeploymentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDeploymentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDeploymentRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDeploymentRequest*>(
               &_DeleteDeploymentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DeleteDeploymentRequest& a, DeleteDeploymentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDeploymentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDeploymentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDeploymentRequest* New() const final {
    return CreateMaybeMessage<DeleteDeploymentRequest>(nullptr);
  }

  DeleteDeploymentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDeploymentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDeploymentRequest& from);
  void MergeFrom(const DeleteDeploymentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDeploymentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.DeleteDeploymentRequest";
  }
  protected:
  explicit DeleteDeploymentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.DeleteDeploymentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class DeleteDeploymentMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.DeleteDeploymentMetadata) */ {
 public:
  inline DeleteDeploymentMetadata() : DeleteDeploymentMetadata(nullptr) {};
  virtual ~DeleteDeploymentMetadata();

  DeleteDeploymentMetadata(const DeleteDeploymentMetadata& from);
  DeleteDeploymentMetadata(DeleteDeploymentMetadata&& from) noexcept
    : DeleteDeploymentMetadata() {
    *this = ::std::move(from);
  }

  inline DeleteDeploymentMetadata& operator=(const DeleteDeploymentMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDeploymentMetadata& operator=(DeleteDeploymentMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDeploymentMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDeploymentMetadata* internal_default_instance() {
    return reinterpret_cast<const DeleteDeploymentMetadata*>(
               &_DeleteDeploymentMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DeleteDeploymentMetadata& a, DeleteDeploymentMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDeploymentMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDeploymentMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDeploymentMetadata* New() const final {
    return CreateMaybeMessage<DeleteDeploymentMetadata>(nullptr);
  }

  DeleteDeploymentMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDeploymentMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDeploymentMetadata& from);
  void MergeFrom(const DeleteDeploymentMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDeploymentMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.DeleteDeploymentMetadata";
  }
  protected:
  explicit DeleteDeploymentMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.DeleteDeploymentMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class Filter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.Filter) */ {
 public:
  inline Filter() : Filter(nullptr) {};
  virtual ~Filter();

  Filter(const Filter& from);
  Filter(Filter&& from) noexcept
    : Filter() {
    *this = ::std::move(from);
  }

  inline Filter& operator=(const Filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Filter& operator=(Filter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Filter& default_instance();

  enum FilterTypeCase {
    kStoppedStatusPropertyFilter = 1,
    kTagsPropertyFilter = 2,
    kCreateTimePropertyFilter = 3,
    kStoppedTimePropertyFilter = 4,
    kDeploymentNamePropertyFilter = 5,
    FILTER_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Filter* internal_default_instance() {
    return reinterpret_cast<const Filter*>(
               &_Filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Filter& a, Filter& b) {
    a.Swap(&b);
  }
  inline void Swap(Filter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Filter* New() const final {
    return CreateMaybeMessage<Filter>(nullptr);
  }

  Filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Filter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Filter& from);
  void MergeFrom(const Filter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Filter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.Filter";
  }
  protected:
  explicit Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoppedStatusPropertyFilterFieldNumber = 1,
    kTagsPropertyFilterFieldNumber = 2,
    kCreateTimePropertyFilterFieldNumber = 3,
    kStoppedTimePropertyFilterFieldNumber = 4,
    kDeploymentNamePropertyFilterFieldNumber = 5,
  };
  // .improbable.spatialos.deployment.v1alpha1.StoppedStatusPropertyFilter stopped_status_property_filter = 1;
  bool has_stopped_status_property_filter() const;
  private:
  bool _internal_has_stopped_status_property_filter() const;
  public:
  void clear_stopped_status_property_filter();
  const ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter& stopped_status_property_filter() const;
  ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter* release_stopped_status_property_filter();
  ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter* mutable_stopped_status_property_filter();
  void set_allocated_stopped_status_property_filter(::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter* stopped_status_property_filter);
  private:
  const ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter& _internal_stopped_status_property_filter() const;
  ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter* _internal_mutable_stopped_status_property_filter();
  public:
  void unsafe_arena_set_allocated_stopped_status_property_filter(
      ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter* stopped_status_property_filter);
  ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter* unsafe_arena_release_stopped_status_property_filter();

  // .improbable.spatialos.deployment.v1alpha1.TagsPropertyFilter tags_property_filter = 2;
  bool has_tags_property_filter() const;
  private:
  bool _internal_has_tags_property_filter() const;
  public:
  void clear_tags_property_filter();
  const ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter& tags_property_filter() const;
  ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter* release_tags_property_filter();
  ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter* mutable_tags_property_filter();
  void set_allocated_tags_property_filter(::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter* tags_property_filter);
  private:
  const ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter& _internal_tags_property_filter() const;
  ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter* _internal_mutable_tags_property_filter();
  public:
  void unsafe_arena_set_allocated_tags_property_filter(
      ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter* tags_property_filter);
  ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter* unsafe_arena_release_tags_property_filter();

  // .improbable.spatialos.deployment.v1alpha1.CreateTimePropertyFilter create_time_property_filter = 3;
  bool has_create_time_property_filter() const;
  private:
  bool _internal_has_create_time_property_filter() const;
  public:
  void clear_create_time_property_filter();
  const ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter& create_time_property_filter() const;
  ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter* release_create_time_property_filter();
  ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter* mutable_create_time_property_filter();
  void set_allocated_create_time_property_filter(::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter* create_time_property_filter);
  private:
  const ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter& _internal_create_time_property_filter() const;
  ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter* _internal_mutable_create_time_property_filter();
  public:
  void unsafe_arena_set_allocated_create_time_property_filter(
      ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter* create_time_property_filter);
  ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter* unsafe_arena_release_create_time_property_filter();

  // .improbable.spatialos.deployment.v1alpha1.StoppedTimePropertyFilter stopped_time_property_filter = 4;
  bool has_stopped_time_property_filter() const;
  private:
  bool _internal_has_stopped_time_property_filter() const;
  public:
  void clear_stopped_time_property_filter();
  const ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter& stopped_time_property_filter() const;
  ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter* release_stopped_time_property_filter();
  ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter* mutable_stopped_time_property_filter();
  void set_allocated_stopped_time_property_filter(::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter* stopped_time_property_filter);
  private:
  const ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter& _internal_stopped_time_property_filter() const;
  ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter* _internal_mutable_stopped_time_property_filter();
  public:
  void unsafe_arena_set_allocated_stopped_time_property_filter(
      ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter* stopped_time_property_filter);
  ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter* unsafe_arena_release_stopped_time_property_filter();

  // .improbable.spatialos.deployment.v1alpha1.DeploymentNamePropertyFilter deployment_name_property_filter = 5;
  bool has_deployment_name_property_filter() const;
  private:
  bool _internal_has_deployment_name_property_filter() const;
  public:
  void clear_deployment_name_property_filter();
  const ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter& deployment_name_property_filter() const;
  ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter* release_deployment_name_property_filter();
  ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter* mutable_deployment_name_property_filter();
  void set_allocated_deployment_name_property_filter(::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter* deployment_name_property_filter);
  private:
  const ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter& _internal_deployment_name_property_filter() const;
  ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter* _internal_mutable_deployment_name_property_filter();
  public:
  void unsafe_arena_set_allocated_deployment_name_property_filter(
      ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter* deployment_name_property_filter);
  ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter* unsafe_arena_release_deployment_name_property_filter();

  void clear_filter_type();
  FilterTypeCase filter_type_case() const;
  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.Filter)
 private:
  class _Internal;
  void set_has_stopped_status_property_filter();
  void set_has_tags_property_filter();
  void set_has_create_time_property_filter();
  void set_has_stopped_time_property_filter();
  void set_has_deployment_name_property_filter();

  inline bool has_filter_type() const;
  inline void clear_has_filter_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union FilterTypeUnion {
    FilterTypeUnion() {}
    ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter* stopped_status_property_filter_;
    ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter* tags_property_filter_;
    ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter* create_time_property_filter_;
    ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter* stopped_time_property_filter_;
    ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter* deployment_name_property_filter_;
  } filter_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class StoppedStatusPropertyFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.StoppedStatusPropertyFilter) */ {
 public:
  inline StoppedStatusPropertyFilter() : StoppedStatusPropertyFilter(nullptr) {};
  virtual ~StoppedStatusPropertyFilter();

  StoppedStatusPropertyFilter(const StoppedStatusPropertyFilter& from);
  StoppedStatusPropertyFilter(StoppedStatusPropertyFilter&& from) noexcept
    : StoppedStatusPropertyFilter() {
    *this = ::std::move(from);
  }

  inline StoppedStatusPropertyFilter& operator=(const StoppedStatusPropertyFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoppedStatusPropertyFilter& operator=(StoppedStatusPropertyFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoppedStatusPropertyFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoppedStatusPropertyFilter* internal_default_instance() {
    return reinterpret_cast<const StoppedStatusPropertyFilter*>(
               &_StoppedStatusPropertyFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(StoppedStatusPropertyFilter& a, StoppedStatusPropertyFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(StoppedStatusPropertyFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoppedStatusPropertyFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoppedStatusPropertyFilter* New() const final {
    return CreateMaybeMessage<StoppedStatusPropertyFilter>(nullptr);
  }

  StoppedStatusPropertyFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoppedStatusPropertyFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoppedStatusPropertyFilter& from);
  void MergeFrom(const StoppedStatusPropertyFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoppedStatusPropertyFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.StoppedStatusPropertyFilter";
  }
  protected:
  explicit StoppedStatusPropertyFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StoppedStatusPropertyFilter_StoppedStatus StoppedStatus;
  static constexpr StoppedStatus ALL_DEPLOYMENTS =
    StoppedStatusPropertyFilter_StoppedStatus_ALL_DEPLOYMENTS;
  static constexpr StoppedStatus STOPPED_DEPLOYMENTS =
    StoppedStatusPropertyFilter_StoppedStatus_STOPPED_DEPLOYMENTS;
  static constexpr StoppedStatus NOT_STOPPED_DEPLOYMENTS =
    StoppedStatusPropertyFilter_StoppedStatus_NOT_STOPPED_DEPLOYMENTS;
  static inline bool StoppedStatus_IsValid(int value) {
    return StoppedStatusPropertyFilter_StoppedStatus_IsValid(value);
  }
  static constexpr StoppedStatus StoppedStatus_MIN =
    StoppedStatusPropertyFilter_StoppedStatus_StoppedStatus_MIN;
  static constexpr StoppedStatus StoppedStatus_MAX =
    StoppedStatusPropertyFilter_StoppedStatus_StoppedStatus_MAX;
  static constexpr int StoppedStatus_ARRAYSIZE =
    StoppedStatusPropertyFilter_StoppedStatus_StoppedStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StoppedStatus_descriptor() {
    return StoppedStatusPropertyFilter_StoppedStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& StoppedStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StoppedStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StoppedStatus_Name.");
    return StoppedStatusPropertyFilter_StoppedStatus_Name(enum_t_value);
  }
  static inline bool StoppedStatus_Parse(const std::string& name,
      StoppedStatus* value) {
    return StoppedStatusPropertyFilter_StoppedStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStoppedStatusFieldNumber = 1,
  };
  // .improbable.spatialos.deployment.v1alpha1.StoppedStatusPropertyFilter.StoppedStatus stopped_status = 1;
  void clear_stopped_status();
  ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter_StoppedStatus stopped_status() const;
  void set_stopped_status(::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter_StoppedStatus value);
  private:
  ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter_StoppedStatus _internal_stopped_status() const;
  void _internal_set_stopped_status(::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter_StoppedStatus value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.StoppedStatusPropertyFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int stopped_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class DeploymentNamePropertyFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.DeploymentNamePropertyFilter) */ {
 public:
  inline DeploymentNamePropertyFilter() : DeploymentNamePropertyFilter(nullptr) {};
  virtual ~DeploymentNamePropertyFilter();

  DeploymentNamePropertyFilter(const DeploymentNamePropertyFilter& from);
  DeploymentNamePropertyFilter(DeploymentNamePropertyFilter&& from) noexcept
    : DeploymentNamePropertyFilter() {
    *this = ::std::move(from);
  }

  inline DeploymentNamePropertyFilter& operator=(const DeploymentNamePropertyFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeploymentNamePropertyFilter& operator=(DeploymentNamePropertyFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeploymentNamePropertyFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeploymentNamePropertyFilter* internal_default_instance() {
    return reinterpret_cast<const DeploymentNamePropertyFilter*>(
               &_DeploymentNamePropertyFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(DeploymentNamePropertyFilter& a, DeploymentNamePropertyFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(DeploymentNamePropertyFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeploymentNamePropertyFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeploymentNamePropertyFilter* New() const final {
    return CreateMaybeMessage<DeploymentNamePropertyFilter>(nullptr);
  }

  DeploymentNamePropertyFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeploymentNamePropertyFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeploymentNamePropertyFilter& from);
  void MergeFrom(const DeploymentNamePropertyFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeploymentNamePropertyFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.DeploymentNamePropertyFilter";
  }
  protected:
  explicit DeploymentNamePropertyFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeploymentNamePropertyFilter_Operator Operator;
  static constexpr Operator EQUAL =
    DeploymentNamePropertyFilter_Operator_EQUAL;
  static constexpr Operator CONTAINS =
    DeploymentNamePropertyFilter_Operator_CONTAINS;
  static constexpr Operator NOT_CONTAINS =
    DeploymentNamePropertyFilter_Operator_NOT_CONTAINS;
  static inline bool Operator_IsValid(int value) {
    return DeploymentNamePropertyFilter_Operator_IsValid(value);
  }
  static constexpr Operator Operator_MIN =
    DeploymentNamePropertyFilter_Operator_Operator_MIN;
  static constexpr Operator Operator_MAX =
    DeploymentNamePropertyFilter_Operator_Operator_MAX;
  static constexpr int Operator_ARRAYSIZE =
    DeploymentNamePropertyFilter_Operator_Operator_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operator_descriptor() {
    return DeploymentNamePropertyFilter_Operator_descriptor();
  }
  template<typename T>
  static inline const std::string& Operator_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operator>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operator_Name.");
    return DeploymentNamePropertyFilter_Operator_Name(enum_t_value);
  }
  static inline bool Operator_Parse(const std::string& name,
      Operator* value) {
    return DeploymentNamePropertyFilter_Operator_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDeploymentNameFieldNumber = 2,
    kOperatorFieldNumber = 1,
  };
  // string deployment_name = 2;
  void clear_deployment_name();
  const std::string& deployment_name() const;
  void set_deployment_name(const std::string& value);
  void set_deployment_name(std::string&& value);
  void set_deployment_name(const char* value);
  void set_deployment_name(const char* value, size_t size);
  std::string* mutable_deployment_name();
  std::string* release_deployment_name();
  void set_allocated_deployment_name(std::string* deployment_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_deployment_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_deployment_name(
      std::string* deployment_name);
  private:
  const std::string& _internal_deployment_name() const;
  void _internal_set_deployment_name(const std::string& value);
  std::string* _internal_mutable_deployment_name();
  public:

  // .improbable.spatialos.deployment.v1alpha1.DeploymentNamePropertyFilter.Operator operator = 1;
  void clear_operator_();
  ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter_Operator operator_() const;
  void set_operator_(::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter_Operator value);
  private:
  ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter_Operator _internal_operator_() const;
  void _internal_set_operator_(::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter_Operator value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.DeploymentNamePropertyFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deployment_name_;
  int operator__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class TagsPropertyFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.TagsPropertyFilter) */ {
 public:
  inline TagsPropertyFilter() : TagsPropertyFilter(nullptr) {};
  virtual ~TagsPropertyFilter();

  TagsPropertyFilter(const TagsPropertyFilter& from);
  TagsPropertyFilter(TagsPropertyFilter&& from) noexcept
    : TagsPropertyFilter() {
    *this = ::std::move(from);
  }

  inline TagsPropertyFilter& operator=(const TagsPropertyFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TagsPropertyFilter& operator=(TagsPropertyFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TagsPropertyFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TagsPropertyFilter* internal_default_instance() {
    return reinterpret_cast<const TagsPropertyFilter*>(
               &_TagsPropertyFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(TagsPropertyFilter& a, TagsPropertyFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(TagsPropertyFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TagsPropertyFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TagsPropertyFilter* New() const final {
    return CreateMaybeMessage<TagsPropertyFilter>(nullptr);
  }

  TagsPropertyFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TagsPropertyFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TagsPropertyFilter& from);
  void MergeFrom(const TagsPropertyFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TagsPropertyFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.TagsPropertyFilter";
  }
  protected:
  explicit TagsPropertyFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TagsPropertyFilter_Operator Operator;
  static constexpr Operator EQUAL =
    TagsPropertyFilter_Operator_EQUAL;
  static constexpr Operator CONTAINS =
    TagsPropertyFilter_Operator_CONTAINS;
  static constexpr Operator NOT_CONTAINS =
    TagsPropertyFilter_Operator_NOT_CONTAINS;
  static inline bool Operator_IsValid(int value) {
    return TagsPropertyFilter_Operator_IsValid(value);
  }
  static constexpr Operator Operator_MIN =
    TagsPropertyFilter_Operator_Operator_MIN;
  static constexpr Operator Operator_MAX =
    TagsPropertyFilter_Operator_Operator_MAX;
  static constexpr int Operator_ARRAYSIZE =
    TagsPropertyFilter_Operator_Operator_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operator_descriptor() {
    return TagsPropertyFilter_Operator_descriptor();
  }
  template<typename T>
  static inline const std::string& Operator_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operator>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operator_Name.");
    return TagsPropertyFilter_Operator_Name(enum_t_value);
  }
  static inline bool Operator_Parse(const std::string& name,
      Operator* value) {
    return TagsPropertyFilter_Operator_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 2,
    kOperatorFieldNumber = 1,
  };
  // string tag = 2;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tag(
      std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // .improbable.spatialos.deployment.v1alpha1.TagsPropertyFilter.Operator operator = 1;
  void clear_operator_();
  ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter_Operator operator_() const;
  void set_operator_(::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter_Operator value);
  private:
  ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter_Operator _internal_operator_() const;
  void _internal_set_operator_(::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter_Operator value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.TagsPropertyFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  int operator__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class CreateTimePropertyFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.CreateTimePropertyFilter) */ {
 public:
  inline CreateTimePropertyFilter() : CreateTimePropertyFilter(nullptr) {};
  virtual ~CreateTimePropertyFilter();

  CreateTimePropertyFilter(const CreateTimePropertyFilter& from);
  CreateTimePropertyFilter(CreateTimePropertyFilter&& from) noexcept
    : CreateTimePropertyFilter() {
    *this = ::std::move(from);
  }

  inline CreateTimePropertyFilter& operator=(const CreateTimePropertyFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTimePropertyFilter& operator=(CreateTimePropertyFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTimePropertyFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTimePropertyFilter* internal_default_instance() {
    return reinterpret_cast<const CreateTimePropertyFilter*>(
               &_CreateTimePropertyFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CreateTimePropertyFilter& a, CreateTimePropertyFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTimePropertyFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTimePropertyFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTimePropertyFilter* New() const final {
    return CreateMaybeMessage<CreateTimePropertyFilter>(nullptr);
  }

  CreateTimePropertyFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTimePropertyFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTimePropertyFilter& from);
  void MergeFrom(const CreateTimePropertyFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTimePropertyFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.CreateTimePropertyFilter";
  }
  protected:
  explicit CreateTimePropertyFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateTimePropertyFilter_Operator Operator;
  static constexpr Operator EQUAL =
    CreateTimePropertyFilter_Operator_EQUAL;
  static constexpr Operator LESS_THAN =
    CreateTimePropertyFilter_Operator_LESS_THAN;
  static constexpr Operator LESS_THAN_OR_EQUAL =
    CreateTimePropertyFilter_Operator_LESS_THAN_OR_EQUAL;
  static constexpr Operator GREATER_THAN =
    CreateTimePropertyFilter_Operator_GREATER_THAN;
  static constexpr Operator GREATER_THAN_OR_EQUAL =
    CreateTimePropertyFilter_Operator_GREATER_THAN_OR_EQUAL;
  static inline bool Operator_IsValid(int value) {
    return CreateTimePropertyFilter_Operator_IsValid(value);
  }
  static constexpr Operator Operator_MIN =
    CreateTimePropertyFilter_Operator_Operator_MIN;
  static constexpr Operator Operator_MAX =
    CreateTimePropertyFilter_Operator_Operator_MAX;
  static constexpr int Operator_ARRAYSIZE =
    CreateTimePropertyFilter_Operator_Operator_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operator_descriptor() {
    return CreateTimePropertyFilter_Operator_descriptor();
  }
  template<typename T>
  static inline const std::string& Operator_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operator>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operator_Name.");
    return CreateTimePropertyFilter_Operator_Name(enum_t_value);
  }
  static inline bool Operator_Parse(const std::string& name,
      Operator* value) {
    return CreateTimePropertyFilter_Operator_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCreateTimeFieldNumber = 2,
    kOperatorFieldNumber = 1,
  };
  // .google.protobuf.Timestamp create_time = 2;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .improbable.spatialos.deployment.v1alpha1.CreateTimePropertyFilter.Operator operator = 1;
  void clear_operator_();
  ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter_Operator operator_() const;
  void set_operator_(::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter_Operator value);
  private:
  ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter_Operator _internal_operator_() const;
  void _internal_set_operator_(::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter_Operator value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.CreateTimePropertyFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  int operator__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// -------------------------------------------------------------------

class StoppedTimePropertyFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.deployment.v1alpha1.StoppedTimePropertyFilter) */ {
 public:
  inline StoppedTimePropertyFilter() : StoppedTimePropertyFilter(nullptr) {};
  virtual ~StoppedTimePropertyFilter();

  StoppedTimePropertyFilter(const StoppedTimePropertyFilter& from);
  StoppedTimePropertyFilter(StoppedTimePropertyFilter&& from) noexcept
    : StoppedTimePropertyFilter() {
    *this = ::std::move(from);
  }

  inline StoppedTimePropertyFilter& operator=(const StoppedTimePropertyFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoppedTimePropertyFilter& operator=(StoppedTimePropertyFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoppedTimePropertyFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoppedTimePropertyFilter* internal_default_instance() {
    return reinterpret_cast<const StoppedTimePropertyFilter*>(
               &_StoppedTimePropertyFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(StoppedTimePropertyFilter& a, StoppedTimePropertyFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(StoppedTimePropertyFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoppedTimePropertyFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoppedTimePropertyFilter* New() const final {
    return CreateMaybeMessage<StoppedTimePropertyFilter>(nullptr);
  }

  StoppedTimePropertyFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoppedTimePropertyFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoppedTimePropertyFilter& from);
  void MergeFrom(const StoppedTimePropertyFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoppedTimePropertyFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.deployment.v1alpha1.StoppedTimePropertyFilter";
  }
  protected:
  explicit StoppedTimePropertyFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StoppedTimePropertyFilter_Operator Operator;
  static constexpr Operator EQUAL =
    StoppedTimePropertyFilter_Operator_EQUAL;
  static constexpr Operator LESS_THAN =
    StoppedTimePropertyFilter_Operator_LESS_THAN;
  static constexpr Operator LESS_THAN_OR_EQUAL =
    StoppedTimePropertyFilter_Operator_LESS_THAN_OR_EQUAL;
  static constexpr Operator GREATER_THAN =
    StoppedTimePropertyFilter_Operator_GREATER_THAN;
  static constexpr Operator GREATER_THAN_OR_EQUAL =
    StoppedTimePropertyFilter_Operator_GREATER_THAN_OR_EQUAL;
  static inline bool Operator_IsValid(int value) {
    return StoppedTimePropertyFilter_Operator_IsValid(value);
  }
  static constexpr Operator Operator_MIN =
    StoppedTimePropertyFilter_Operator_Operator_MIN;
  static constexpr Operator Operator_MAX =
    StoppedTimePropertyFilter_Operator_Operator_MAX;
  static constexpr int Operator_ARRAYSIZE =
    StoppedTimePropertyFilter_Operator_Operator_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operator_descriptor() {
    return StoppedTimePropertyFilter_Operator_descriptor();
  }
  template<typename T>
  static inline const std::string& Operator_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operator>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operator_Name.");
    return StoppedTimePropertyFilter_Operator_Name(enum_t_value);
  }
  static inline bool Operator_Parse(const std::string& name,
      Operator* value) {
    return StoppedTimePropertyFilter_Operator_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStoppedTimeFieldNumber = 2,
    kOperatorFieldNumber = 1,
  };
  // .google.protobuf.Timestamp stopped_time = 2;
  bool has_stopped_time() const;
  private:
  bool _internal_has_stopped_time() const;
  public:
  void clear_stopped_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& stopped_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_stopped_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_stopped_time();
  void set_allocated_stopped_time(PROTOBUF_NAMESPACE_ID::Timestamp* stopped_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_stopped_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_stopped_time();
  public:
  void unsafe_arena_set_allocated_stopped_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* stopped_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_stopped_time();

  // .improbable.spatialos.deployment.v1alpha1.StoppedTimePropertyFilter.Operator operator = 1;
  void clear_operator_();
  ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter_Operator operator_() const;
  void set_operator_(::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter_Operator value);
  private:
  ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter_Operator _internal_operator_() const;
  void _internal_set_operator_(::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter_Operator value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.deployment.v1alpha1.StoppedTimePropertyFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* stopped_time_;
  int operator__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetDeploymentWorkerFlagsRequest

// int64 deployment_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void SetDeploymentWorkerFlagsRequest::clear_deployment_id() {
  deployment_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetDeploymentWorkerFlagsRequest::_internal_deployment_id() const {
  return deployment_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetDeploymentWorkerFlagsRequest::deployment_id() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerFlagsRequest.deployment_id)
  return _internal_deployment_id();
}
inline void SetDeploymentWorkerFlagsRequest::_internal_set_deployment_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  deployment_id_ = value;
}
inline void SetDeploymentWorkerFlagsRequest::set_deployment_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_deployment_id(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerFlagsRequest.deployment_id)
}

// repeated .improbable.spatialos.deployment.v1alpha1.WorkerFlag worker_flags = 2;
inline int SetDeploymentWorkerFlagsRequest::_internal_worker_flags_size() const {
  return worker_flags_.size();
}
inline int SetDeploymentWorkerFlagsRequest::worker_flags_size() const {
  return _internal_worker_flags_size();
}
inline void SetDeploymentWorkerFlagsRequest::clear_worker_flags() {
  worker_flags_.Clear();
}
inline ::improbable::spatialos::deployment::v1alpha1::WorkerFlag* SetDeploymentWorkerFlagsRequest::mutable_worker_flags(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerFlagsRequest.worker_flags)
  return worker_flags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerFlag >*
SetDeploymentWorkerFlagsRequest::mutable_worker_flags() {
  // @@protoc_insertion_point(field_mutable_list:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerFlagsRequest.worker_flags)
  return &worker_flags_;
}
inline const ::improbable::spatialos::deployment::v1alpha1::WorkerFlag& SetDeploymentWorkerFlagsRequest::_internal_worker_flags(int index) const {
  return worker_flags_.Get(index);
}
inline const ::improbable::spatialos::deployment::v1alpha1::WorkerFlag& SetDeploymentWorkerFlagsRequest::worker_flags(int index) const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerFlagsRequest.worker_flags)
  return _internal_worker_flags(index);
}
inline ::improbable::spatialos::deployment::v1alpha1::WorkerFlag* SetDeploymentWorkerFlagsRequest::_internal_add_worker_flags() {
  return worker_flags_.Add();
}
inline ::improbable::spatialos::deployment::v1alpha1::WorkerFlag* SetDeploymentWorkerFlagsRequest::add_worker_flags() {
  // @@protoc_insertion_point(field_add:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerFlagsRequest.worker_flags)
  return _internal_add_worker_flags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerFlag >&
SetDeploymentWorkerFlagsRequest::worker_flags() const {
  // @@protoc_insertion_point(field_list:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerFlagsRequest.worker_flags)
  return worker_flags_;
}

// -------------------------------------------------------------------

// SetDeploymentWorkerFlagsResponse

// -------------------------------------------------------------------

// SetDeploymentTagsRequest

// int64 deployment_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void SetDeploymentTagsRequest::clear_deployment_id() {
  deployment_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetDeploymentTagsRequest::_internal_deployment_id() const {
  return deployment_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetDeploymentTagsRequest::deployment_id() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsRequest.deployment_id)
  return _internal_deployment_id();
}
inline void SetDeploymentTagsRequest::_internal_set_deployment_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  deployment_id_ = value;
}
inline void SetDeploymentTagsRequest::set_deployment_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_deployment_id(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsRequest.deployment_id)
}

// repeated string tags = 2;
inline int SetDeploymentTagsRequest::_internal_tags_size() const {
  return tags_.size();
}
inline int SetDeploymentTagsRequest::tags_size() const {
  return _internal_tags_size();
}
inline void SetDeploymentTagsRequest::clear_tags() {
  tags_.Clear();
}
inline std::string* SetDeploymentTagsRequest::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsRequest.tags)
  return _internal_add_tags();
}
inline const std::string& SetDeploymentTagsRequest::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& SetDeploymentTagsRequest::tags(int index) const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsRequest.tags)
  return _internal_tags(index);
}
inline std::string* SetDeploymentTagsRequest::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsRequest.tags)
  return tags_.Mutable(index);
}
inline void SetDeploymentTagsRequest::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsRequest.tags)
  tags_.Mutable(index)->assign(value);
}
inline void SetDeploymentTagsRequest::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsRequest.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void SetDeploymentTagsRequest::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsRequest.tags)
}
inline void SetDeploymentTagsRequest::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsRequest.tags)
}
inline std::string* SetDeploymentTagsRequest::_internal_add_tags() {
  return tags_.Add();
}
inline void SetDeploymentTagsRequest::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsRequest.tags)
}
inline void SetDeploymentTagsRequest::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsRequest.tags)
}
inline void SetDeploymentTagsRequest::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsRequest.tags)
}
inline void SetDeploymentTagsRequest::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsRequest.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SetDeploymentTagsRequest::tags() const {
  // @@protoc_insertion_point(field_list:improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsRequest.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SetDeploymentTagsRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:improbable.spatialos.deployment.v1alpha1.SetDeploymentTagsRequest.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// SetDeploymentTagsResponse

// -------------------------------------------------------------------

// SetDeploymentWorkerCapacitiesRequest

// int64 deployment_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void SetDeploymentWorkerCapacitiesRequest::clear_deployment_id() {
  deployment_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetDeploymentWorkerCapacitiesRequest::_internal_deployment_id() const {
  return deployment_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetDeploymentWorkerCapacitiesRequest::deployment_id() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerCapacitiesRequest.deployment_id)
  return _internal_deployment_id();
}
inline void SetDeploymentWorkerCapacitiesRequest::_internal_set_deployment_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  deployment_id_ = value;
}
inline void SetDeploymentWorkerCapacitiesRequest::set_deployment_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_deployment_id(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerCapacitiesRequest.deployment_id)
}

// repeated .improbable.spatialos.deployment.v1alpha1.WorkerCapacity worker_connection_capacities = 2;
inline int SetDeploymentWorkerCapacitiesRequest::_internal_worker_connection_capacities_size() const {
  return worker_connection_capacities_.size();
}
inline int SetDeploymentWorkerCapacitiesRequest::worker_connection_capacities_size() const {
  return _internal_worker_connection_capacities_size();
}
inline void SetDeploymentWorkerCapacitiesRequest::clear_worker_connection_capacities() {
  worker_connection_capacities_.Clear();
}
inline ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity* SetDeploymentWorkerCapacitiesRequest::mutable_worker_connection_capacities(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerCapacitiesRequest.worker_connection_capacities)
  return worker_connection_capacities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity >*
SetDeploymentWorkerCapacitiesRequest::mutable_worker_connection_capacities() {
  // @@protoc_insertion_point(field_mutable_list:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerCapacitiesRequest.worker_connection_capacities)
  return &worker_connection_capacities_;
}
inline const ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity& SetDeploymentWorkerCapacitiesRequest::_internal_worker_connection_capacities(int index) const {
  return worker_connection_capacities_.Get(index);
}
inline const ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity& SetDeploymentWorkerCapacitiesRequest::worker_connection_capacities(int index) const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerCapacitiesRequest.worker_connection_capacities)
  return _internal_worker_connection_capacities(index);
}
inline ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity* SetDeploymentWorkerCapacitiesRequest::_internal_add_worker_connection_capacities() {
  return worker_connection_capacities_.Add();
}
inline ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity* SetDeploymentWorkerCapacitiesRequest::add_worker_connection_capacities() {
  // @@protoc_insertion_point(field_add:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerCapacitiesRequest.worker_connection_capacities)
  return _internal_add_worker_connection_capacities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity >&
SetDeploymentWorkerCapacitiesRequest::worker_connection_capacities() const {
  // @@protoc_insertion_point(field_list:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerCapacitiesRequest.worker_connection_capacities)
  return worker_connection_capacities_;
}

// -------------------------------------------------------------------

// SetDeploymentWorkerCapacitiesResponse

// -------------------------------------------------------------------

// SetDeploymentWorkerRateLimitsRequest

// int64 deployment_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void SetDeploymentWorkerRateLimitsRequest::clear_deployment_id() {
  deployment_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetDeploymentWorkerRateLimitsRequest::_internal_deployment_id() const {
  return deployment_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetDeploymentWorkerRateLimitsRequest::deployment_id() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerRateLimitsRequest.deployment_id)
  return _internal_deployment_id();
}
inline void SetDeploymentWorkerRateLimitsRequest::_internal_set_deployment_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  deployment_id_ = value;
}
inline void SetDeploymentWorkerRateLimitsRequest::set_deployment_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_deployment_id(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerRateLimitsRequest.deployment_id)
}

// repeated .improbable.spatialos.deployment.v1alpha1.WorkerRateLimit worker_connection_rate_limits = 2;
inline int SetDeploymentWorkerRateLimitsRequest::_internal_worker_connection_rate_limits_size() const {
  return worker_connection_rate_limits_.size();
}
inline int SetDeploymentWorkerRateLimitsRequest::worker_connection_rate_limits_size() const {
  return _internal_worker_connection_rate_limits_size();
}
inline void SetDeploymentWorkerRateLimitsRequest::clear_worker_connection_rate_limits() {
  worker_connection_rate_limits_.Clear();
}
inline ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit* SetDeploymentWorkerRateLimitsRequest::mutable_worker_connection_rate_limits(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerRateLimitsRequest.worker_connection_rate_limits)
  return worker_connection_rate_limits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit >*
SetDeploymentWorkerRateLimitsRequest::mutable_worker_connection_rate_limits() {
  // @@protoc_insertion_point(field_mutable_list:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerRateLimitsRequest.worker_connection_rate_limits)
  return &worker_connection_rate_limits_;
}
inline const ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit& SetDeploymentWorkerRateLimitsRequest::_internal_worker_connection_rate_limits(int index) const {
  return worker_connection_rate_limits_.Get(index);
}
inline const ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit& SetDeploymentWorkerRateLimitsRequest::worker_connection_rate_limits(int index) const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerRateLimitsRequest.worker_connection_rate_limits)
  return _internal_worker_connection_rate_limits(index);
}
inline ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit* SetDeploymentWorkerRateLimitsRequest::_internal_add_worker_connection_rate_limits() {
  return worker_connection_rate_limits_.Add();
}
inline ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit* SetDeploymentWorkerRateLimitsRequest::add_worker_connection_rate_limits() {
  // @@protoc_insertion_point(field_add:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerRateLimitsRequest.worker_connection_rate_limits)
  return _internal_add_worker_connection_rate_limits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit >&
SetDeploymentWorkerRateLimitsRequest::worker_connection_rate_limits() const {
  // @@protoc_insertion_point(field_list:improbable.spatialos.deployment.v1alpha1.SetDeploymentWorkerRateLimitsRequest.worker_connection_rate_limits)
  return worker_connection_rate_limits_;
}

// -------------------------------------------------------------------

// SetDeploymentWorkerRateLimitsResponse

// -------------------------------------------------------------------

// Deployment

// string id = 1 [(.improbable.logfield) = {
inline void Deployment::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Deployment::id() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Deployment.id)
  return _internal_id();
}
inline void Deployment::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.Deployment.id)
}
inline std::string* Deployment::mutable_id() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Deployment.id)
  return _internal_mutable_id();
}
inline const std::string& Deployment::_internal_id() const {
  return id_.Get();
}
inline void Deployment::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Deployment::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.Deployment.id)
}
inline void Deployment::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.Deployment.id)
}
inline void Deployment::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.Deployment.id)
}
inline std::string* Deployment::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Deployment::release_id() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.Deployment.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deployment::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.id)
}
inline std::string* Deployment::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.Deployment.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Deployment::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.id)
}

// string project_name = 2 [(.improbable.logfield) = {
inline void Deployment::clear_project_name() {
  project_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Deployment::project_name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Deployment.project_name)
  return _internal_project_name();
}
inline void Deployment::set_project_name(const std::string& value) {
  _internal_set_project_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.Deployment.project_name)
}
inline std::string* Deployment::mutable_project_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Deployment.project_name)
  return _internal_mutable_project_name();
}
inline const std::string& Deployment::_internal_project_name() const {
  return project_name_.Get();
}
inline void Deployment::_internal_set_project_name(const std::string& value) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Deployment::set_project_name(std::string&& value) {
  
  project_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.Deployment.project_name)
}
inline void Deployment::set_project_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.Deployment.project_name)
}
inline void Deployment::set_project_name(const char* value,
    size_t size) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.Deployment.project_name)
}
inline std::string* Deployment::_internal_mutable_project_name() {
  
  return project_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Deployment::release_project_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.Deployment.project_name)
  return project_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deployment::set_allocated_project_name(std::string* project_name) {
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.project_name)
}
inline std::string* Deployment::unsafe_arena_release_project_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.Deployment.project_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return project_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Deployment::unsafe_arena_set_allocated_project_name(
    std::string* project_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      project_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.project_name)
}

// string name = 3 [(.improbable.logfield) = {
inline void Deployment::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Deployment::name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Deployment.name)
  return _internal_name();
}
inline void Deployment::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.Deployment.name)
}
inline std::string* Deployment::mutable_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Deployment.name)
  return _internal_mutable_name();
}
inline const std::string& Deployment::_internal_name() const {
  return name_.Get();
}
inline void Deployment::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Deployment::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.Deployment.name)
}
inline void Deployment::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.Deployment.name)
}
inline void Deployment::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.Deployment.name)
}
inline std::string* Deployment::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Deployment::release_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.Deployment.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deployment::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.name)
}
inline std::string* Deployment::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.Deployment.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Deployment::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.name)
}

// string region_code = 4;
inline void Deployment::clear_region_code() {
  region_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Deployment::region_code() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Deployment.region_code)
  return _internal_region_code();
}
inline void Deployment::set_region_code(const std::string& value) {
  _internal_set_region_code(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.Deployment.region_code)
}
inline std::string* Deployment::mutable_region_code() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Deployment.region_code)
  return _internal_mutable_region_code();
}
inline const std::string& Deployment::_internal_region_code() const {
  return region_code_.Get();
}
inline void Deployment::_internal_set_region_code(const std::string& value) {
  
  region_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Deployment::set_region_code(std::string&& value) {
  
  region_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.Deployment.region_code)
}
inline void Deployment::set_region_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  region_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.Deployment.region_code)
}
inline void Deployment::set_region_code(const char* value,
    size_t size) {
  
  region_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.Deployment.region_code)
}
inline std::string* Deployment::_internal_mutable_region_code() {
  
  return region_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Deployment::release_region_code() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.Deployment.region_code)
  return region_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deployment::set_allocated_region_code(std::string* region_code) {
  if (region_code != nullptr) {
    
  } else {
    
  }
  region_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), region_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.region_code)
}
inline std::string* Deployment::unsafe_arena_release_region_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.Deployment.region_code)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return region_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Deployment::unsafe_arena_set_allocated_region_code(
    std::string* region_code) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (region_code != nullptr) {
    
  } else {
    
  }
  region_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      region_code, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.region_code)
}

// string cluster_code = 5;
inline void Deployment::clear_cluster_code() {
  cluster_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Deployment::cluster_code() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Deployment.cluster_code)
  return _internal_cluster_code();
}
inline void Deployment::set_cluster_code(const std::string& value) {
  _internal_set_cluster_code(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.Deployment.cluster_code)
}
inline std::string* Deployment::mutable_cluster_code() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Deployment.cluster_code)
  return _internal_mutable_cluster_code();
}
inline const std::string& Deployment::_internal_cluster_code() const {
  return cluster_code_.Get();
}
inline void Deployment::_internal_set_cluster_code(const std::string& value) {
  
  cluster_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Deployment::set_cluster_code(std::string&& value) {
  
  cluster_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.Deployment.cluster_code)
}
inline void Deployment::set_cluster_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.Deployment.cluster_code)
}
inline void Deployment::set_cluster_code(const char* value,
    size_t size) {
  
  cluster_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.Deployment.cluster_code)
}
inline std::string* Deployment::_internal_mutable_cluster_code() {
  
  return cluster_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Deployment::release_cluster_code() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.Deployment.cluster_code)
  return cluster_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deployment::set_allocated_cluster_code(std::string* cluster_code) {
  if (cluster_code != nullptr) {
    
  } else {
    
  }
  cluster_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cluster_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.cluster_code)
}
inline std::string* Deployment::unsafe_arena_release_cluster_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.Deployment.cluster_code)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cluster_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Deployment::unsafe_arena_set_allocated_cluster_code(
    std::string* cluster_code) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cluster_code != nullptr) {
    
  } else {
    
  }
  cluster_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cluster_code, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.cluster_code)
}

// string assembly_id = 7 [(.cli.flag) = {
inline void Deployment::clear_assembly_id() {
  assembly_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Deployment::assembly_id() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Deployment.assembly_id)
  return _internal_assembly_id();
}
inline void Deployment::set_assembly_id(const std::string& value) {
  _internal_set_assembly_id(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.Deployment.assembly_id)
}
inline std::string* Deployment::mutable_assembly_id() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Deployment.assembly_id)
  return _internal_mutable_assembly_id();
}
inline const std::string& Deployment::_internal_assembly_id() const {
  return assembly_id_.Get();
}
inline void Deployment::_internal_set_assembly_id(const std::string& value) {
  
  assembly_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Deployment::set_assembly_id(std::string&& value) {
  
  assembly_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.Deployment.assembly_id)
}
inline void Deployment::set_assembly_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assembly_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.Deployment.assembly_id)
}
inline void Deployment::set_assembly_id(const char* value,
    size_t size) {
  
  assembly_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.Deployment.assembly_id)
}
inline std::string* Deployment::_internal_mutable_assembly_id() {
  
  return assembly_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Deployment::release_assembly_id() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.Deployment.assembly_id)
  return assembly_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deployment::set_allocated_assembly_id(std::string* assembly_id) {
  if (assembly_id != nullptr) {
    
  } else {
    
  }
  assembly_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assembly_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.assembly_id)
}
inline std::string* Deployment::unsafe_arena_release_assembly_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.Deployment.assembly_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return assembly_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Deployment::unsafe_arena_set_allocated_assembly_id(
    std::string* assembly_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (assembly_id != nullptr) {
    
  } else {
    
  }
  assembly_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      assembly_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.assembly_id)
}

// string starting_snapshot_id = 8 [(.cli.flag) = {
inline void Deployment::clear_starting_snapshot_id() {
  starting_snapshot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Deployment::starting_snapshot_id() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Deployment.starting_snapshot_id)
  return _internal_starting_snapshot_id();
}
inline void Deployment::set_starting_snapshot_id(const std::string& value) {
  _internal_set_starting_snapshot_id(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.Deployment.starting_snapshot_id)
}
inline std::string* Deployment::mutable_starting_snapshot_id() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Deployment.starting_snapshot_id)
  return _internal_mutable_starting_snapshot_id();
}
inline const std::string& Deployment::_internal_starting_snapshot_id() const {
  return starting_snapshot_id_.Get();
}
inline void Deployment::_internal_set_starting_snapshot_id(const std::string& value) {
  
  starting_snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Deployment::set_starting_snapshot_id(std::string&& value) {
  
  starting_snapshot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.Deployment.starting_snapshot_id)
}
inline void Deployment::set_starting_snapshot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  starting_snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.Deployment.starting_snapshot_id)
}
inline void Deployment::set_starting_snapshot_id(const char* value,
    size_t size) {
  
  starting_snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.Deployment.starting_snapshot_id)
}
inline std::string* Deployment::_internal_mutable_starting_snapshot_id() {
  
  return starting_snapshot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Deployment::release_starting_snapshot_id() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.Deployment.starting_snapshot_id)
  return starting_snapshot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deployment::set_allocated_starting_snapshot_id(std::string* starting_snapshot_id) {
  if (starting_snapshot_id != nullptr) {
    
  } else {
    
  }
  starting_snapshot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), starting_snapshot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.starting_snapshot_id)
}
inline std::string* Deployment::unsafe_arena_release_starting_snapshot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.Deployment.starting_snapshot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return starting_snapshot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Deployment::unsafe_arena_set_allocated_starting_snapshot_id(
    std::string* starting_snapshot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (starting_snapshot_id != nullptr) {
    
  } else {
    
  }
  starting_snapshot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      starting_snapshot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.starting_snapshot_id)
}

// repeated string tag = 9 [(.validator.field) = {
inline int Deployment::_internal_tag_size() const {
  return tag_.size();
}
inline int Deployment::tag_size() const {
  return _internal_tag_size();
}
inline void Deployment::clear_tag() {
  tag_.Clear();
}
inline std::string* Deployment::add_tag() {
  // @@protoc_insertion_point(field_add_mutable:improbable.spatialos.deployment.v1alpha1.Deployment.tag)
  return _internal_add_tag();
}
inline const std::string& Deployment::_internal_tag(int index) const {
  return tag_.Get(index);
}
inline const std::string& Deployment::tag(int index) const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Deployment.tag)
  return _internal_tag(index);
}
inline std::string* Deployment::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Deployment.tag)
  return tag_.Mutable(index);
}
inline void Deployment::set_tag(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.Deployment.tag)
  tag_.Mutable(index)->assign(value);
}
inline void Deployment::set_tag(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.Deployment.tag)
  tag_.Mutable(index)->assign(std::move(value));
}
inline void Deployment::set_tag(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.Deployment.tag)
}
inline void Deployment::set_tag(int index, const char* value, size_t size) {
  tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.Deployment.tag)
}
inline std::string* Deployment::_internal_add_tag() {
  return tag_.Add();
}
inline void Deployment::add_tag(const std::string& value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:improbable.spatialos.deployment.v1alpha1.Deployment.tag)
}
inline void Deployment::add_tag(std::string&& value) {
  tag_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:improbable.spatialos.deployment.v1alpha1.Deployment.tag)
}
inline void Deployment::add_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:improbable.spatialos.deployment.v1alpha1.Deployment.tag)
}
inline void Deployment::add_tag(const char* value, size_t size) {
  tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:improbable.spatialos.deployment.v1alpha1.Deployment.tag)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Deployment::tag() const {
  // @@protoc_insertion_point(field_list:improbable.spatialos.deployment.v1alpha1.Deployment.tag)
  return tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Deployment::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:improbable.spatialos.deployment.v1alpha1.Deployment.tag)
  return &tag_;
}

// .improbable.spatialos.deployment.v1alpha1.Deployment.Status status = 10;
inline void Deployment::clear_status() {
  status_ = 0;
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment_Status Deployment::_internal_status() const {
  return static_cast< ::improbable::spatialos::deployment::v1alpha1::Deployment_Status >(status_);
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment_Status Deployment::status() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Deployment.status)
  return _internal_status();
}
inline void Deployment::_internal_set_status(::improbable::spatialos::deployment::v1alpha1::Deployment_Status value) {
  
  status_ = value;
}
inline void Deployment::set_status(::improbable::spatialos::deployment::v1alpha1::Deployment_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.Deployment.status)
}

// .improbable.spatialos.deployment.v1alpha1.LaunchConfig launch_config = 11 [(.cli.flag) = {
inline bool Deployment::_internal_has_launch_config() const {
  return this != internal_default_instance() && launch_config_ != nullptr;
}
inline bool Deployment::has_launch_config() const {
  return _internal_has_launch_config();
}
inline void Deployment::clear_launch_config() {
  if (GetArena() == nullptr && launch_config_ != nullptr) {
    delete launch_config_;
  }
  launch_config_ = nullptr;
}
inline const ::improbable::spatialos::deployment::v1alpha1::LaunchConfig& Deployment::_internal_launch_config() const {
  const ::improbable::spatialos::deployment::v1alpha1::LaunchConfig* p = launch_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::improbable::spatialos::deployment::v1alpha1::LaunchConfig*>(
      &::improbable::spatialos::deployment::v1alpha1::_LaunchConfig_default_instance_);
}
inline const ::improbable::spatialos::deployment::v1alpha1::LaunchConfig& Deployment::launch_config() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Deployment.launch_config)
  return _internal_launch_config();
}
inline void Deployment::unsafe_arena_set_allocated_launch_config(
    ::improbable::spatialos::deployment::v1alpha1::LaunchConfig* launch_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(launch_config_);
  }
  launch_config_ = launch_config;
  if (launch_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.launch_config)
}
inline ::improbable::spatialos::deployment::v1alpha1::LaunchConfig* Deployment::release_launch_config() {
  auto temp = unsafe_arena_release_launch_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::spatialos::deployment::v1alpha1::LaunchConfig* Deployment::unsafe_arena_release_launch_config() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.Deployment.launch_config)
  
  ::improbable::spatialos::deployment::v1alpha1::LaunchConfig* temp = launch_config_;
  launch_config_ = nullptr;
  return temp;
}
inline ::improbable::spatialos::deployment::v1alpha1::LaunchConfig* Deployment::_internal_mutable_launch_config() {
  
  if (launch_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::LaunchConfig>(GetArena());
    launch_config_ = p;
  }
  return launch_config_;
}
inline ::improbable::spatialos::deployment::v1alpha1::LaunchConfig* Deployment::mutable_launch_config() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Deployment.launch_config)
  return _internal_mutable_launch_config();
}
inline void Deployment::set_allocated_launch_config(::improbable::spatialos::deployment::v1alpha1::LaunchConfig* launch_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete launch_config_;
  }
  if (launch_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(launch_config);
    if (message_arena != submessage_arena) {
      launch_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, launch_config, submessage_arena);
    }
    
  } else {
    
  }
  launch_config_ = launch_config;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.launch_config)
}

// repeated .improbable.spatialos.deployment.v1alpha1.WorkerFlag worker_flags = 12;
inline int Deployment::_internal_worker_flags_size() const {
  return worker_flags_.size();
}
inline int Deployment::worker_flags_size() const {
  return _internal_worker_flags_size();
}
inline void Deployment::clear_worker_flags() {
  worker_flags_.Clear();
}
inline ::improbable::spatialos::deployment::v1alpha1::WorkerFlag* Deployment::mutable_worker_flags(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Deployment.worker_flags)
  return worker_flags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerFlag >*
Deployment::mutable_worker_flags() {
  // @@protoc_insertion_point(field_mutable_list:improbable.spatialos.deployment.v1alpha1.Deployment.worker_flags)
  return &worker_flags_;
}
inline const ::improbable::spatialos::deployment::v1alpha1::WorkerFlag& Deployment::_internal_worker_flags(int index) const {
  return worker_flags_.Get(index);
}
inline const ::improbable::spatialos::deployment::v1alpha1::WorkerFlag& Deployment::worker_flags(int index) const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Deployment.worker_flags)
  return _internal_worker_flags(index);
}
inline ::improbable::spatialos::deployment::v1alpha1::WorkerFlag* Deployment::_internal_add_worker_flags() {
  return worker_flags_.Add();
}
inline ::improbable::spatialos::deployment::v1alpha1::WorkerFlag* Deployment::add_worker_flags() {
  // @@protoc_insertion_point(field_add:improbable.spatialos.deployment.v1alpha1.Deployment.worker_flags)
  return _internal_add_worker_flags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerFlag >&
Deployment::worker_flags() const {
  // @@protoc_insertion_point(field_list:improbable.spatialos.deployment.v1alpha1.Deployment.worker_flags)
  return worker_flags_;
}

// .google.protobuf.Timestamp start_time = 14;
inline bool Deployment::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool Deployment::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Deployment::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Deployment::start_time() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Deployment.start_time)
  return _internal_start_time();
}
inline void Deployment::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.start_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Deployment::release_start_time() {
  auto temp = unsafe_arena_release_start_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Deployment::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.Deployment.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Deployment::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Deployment::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Deployment.start_time)
  return _internal_mutable_start_time();
}
inline void Deployment::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.start_time)
}

// .google.protobuf.Timestamp stop_time = 15;
inline bool Deployment::_internal_has_stop_time() const {
  return this != internal_default_instance() && stop_time_ != nullptr;
}
inline bool Deployment::has_stop_time() const {
  return _internal_has_stop_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Deployment::_internal_stop_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = stop_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Deployment::stop_time() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Deployment.stop_time)
  return _internal_stop_time();
}
inline void Deployment::unsafe_arena_set_allocated_stop_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* stop_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_time_);
  }
  stop_time_ = stop_time;
  if (stop_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.stop_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Deployment::release_stop_time() {
  auto temp = unsafe_arena_release_stop_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Deployment::unsafe_arena_release_stop_time() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.Deployment.stop_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = stop_time_;
  stop_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Deployment::_internal_mutable_stop_time() {
  
  if (stop_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    stop_time_ = p;
  }
  return stop_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Deployment::mutable_stop_time() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Deployment.stop_time)
  return _internal_mutable_stop_time();
}
inline void Deployment::set_allocated_stop_time(PROTOBUF_NAMESPACE_ID::Timestamp* stop_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_time_);
  }
  if (stop_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_time)->GetArena();
    if (message_arena != submessage_arena) {
      stop_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_time, submessage_arena);
    }
    
  } else {
    
  }
  stop_time_ = stop_time;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.stop_time)
}

// repeated .improbable.spatialos.deployment.v1alpha1.WorkerCapacity worker_connection_capacities = 16;
inline int Deployment::_internal_worker_connection_capacities_size() const {
  return worker_connection_capacities_.size();
}
inline int Deployment::worker_connection_capacities_size() const {
  return _internal_worker_connection_capacities_size();
}
inline void Deployment::clear_worker_connection_capacities() {
  worker_connection_capacities_.Clear();
}
inline ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity* Deployment::mutable_worker_connection_capacities(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Deployment.worker_connection_capacities)
  return worker_connection_capacities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity >*
Deployment::mutable_worker_connection_capacities() {
  // @@protoc_insertion_point(field_mutable_list:improbable.spatialos.deployment.v1alpha1.Deployment.worker_connection_capacities)
  return &worker_connection_capacities_;
}
inline const ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity& Deployment::_internal_worker_connection_capacities(int index) const {
  return worker_connection_capacities_.Get(index);
}
inline const ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity& Deployment::worker_connection_capacities(int index) const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Deployment.worker_connection_capacities)
  return _internal_worker_connection_capacities(index);
}
inline ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity* Deployment::_internal_add_worker_connection_capacities() {
  return worker_connection_capacities_.Add();
}
inline ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity* Deployment::add_worker_connection_capacities() {
  // @@protoc_insertion_point(field_add:improbable.spatialos.deployment.v1alpha1.Deployment.worker_connection_capacities)
  return _internal_add_worker_connection_capacities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerCapacity >&
Deployment::worker_connection_capacities() const {
  // @@protoc_insertion_point(field_list:improbable.spatialos.deployment.v1alpha1.Deployment.worker_connection_capacities)
  return worker_connection_capacities_;
}

// repeated .improbable.spatialos.deployment.v1alpha1.WorkerRateLimit worker_connection_rate_limits = 17;
inline int Deployment::_internal_worker_connection_rate_limits_size() const {
  return worker_connection_rate_limits_.size();
}
inline int Deployment::worker_connection_rate_limits_size() const {
  return _internal_worker_connection_rate_limits_size();
}
inline void Deployment::clear_worker_connection_rate_limits() {
  worker_connection_rate_limits_.Clear();
}
inline ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit* Deployment::mutable_worker_connection_rate_limits(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Deployment.worker_connection_rate_limits)
  return worker_connection_rate_limits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit >*
Deployment::mutable_worker_connection_rate_limits() {
  // @@protoc_insertion_point(field_mutable_list:improbable.spatialos.deployment.v1alpha1.Deployment.worker_connection_rate_limits)
  return &worker_connection_rate_limits_;
}
inline const ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit& Deployment::_internal_worker_connection_rate_limits(int index) const {
  return worker_connection_rate_limits_.Get(index);
}
inline const ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit& Deployment::worker_connection_rate_limits(int index) const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Deployment.worker_connection_rate_limits)
  return _internal_worker_connection_rate_limits(index);
}
inline ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit* Deployment::_internal_add_worker_connection_rate_limits() {
  return worker_connection_rate_limits_.Add();
}
inline ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit* Deployment::add_worker_connection_rate_limits() {
  // @@protoc_insertion_point(field_add:improbable.spatialos.deployment.v1alpha1.Deployment.worker_connection_rate_limits)
  return _internal_add_worker_connection_rate_limits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::WorkerRateLimit >&
Deployment::worker_connection_rate_limits() const {
  // @@protoc_insertion_point(field_list:improbable.spatialos.deployment.v1alpha1.Deployment.worker_connection_rate_limits)
  return worker_connection_rate_limits_;
}

// string description = 18;
inline void Deployment::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Deployment::description() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Deployment.description)
  return _internal_description();
}
inline void Deployment::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.Deployment.description)
}
inline std::string* Deployment::mutable_description() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Deployment.description)
  return _internal_mutable_description();
}
inline const std::string& Deployment::_internal_description() const {
  return description_.Get();
}
inline void Deployment::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Deployment::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.Deployment.description)
}
inline void Deployment::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.Deployment.description)
}
inline void Deployment::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.Deployment.description)
}
inline std::string* Deployment::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Deployment::release_description() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.Deployment.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deployment::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.description)
}
inline std::string* Deployment::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.Deployment.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Deployment::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.description)
}

// string runtime_version = 19 [(.cli.flag) = {
inline void Deployment::clear_runtime_version() {
  runtime_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Deployment::runtime_version() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Deployment.runtime_version)
  return _internal_runtime_version();
}
inline void Deployment::set_runtime_version(const std::string& value) {
  _internal_set_runtime_version(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.Deployment.runtime_version)
}
inline std::string* Deployment::mutable_runtime_version() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Deployment.runtime_version)
  return _internal_mutable_runtime_version();
}
inline const std::string& Deployment::_internal_runtime_version() const {
  return runtime_version_.Get();
}
inline void Deployment::_internal_set_runtime_version(const std::string& value) {
  
  runtime_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Deployment::set_runtime_version(std::string&& value) {
  
  runtime_version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.Deployment.runtime_version)
}
inline void Deployment::set_runtime_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runtime_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.Deployment.runtime_version)
}
inline void Deployment::set_runtime_version(const char* value,
    size_t size) {
  
  runtime_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.Deployment.runtime_version)
}
inline std::string* Deployment::_internal_mutable_runtime_version() {
  
  return runtime_version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Deployment::release_runtime_version() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.Deployment.runtime_version)
  return runtime_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Deployment::set_allocated_runtime_version(std::string* runtime_version) {
  if (runtime_version != nullptr) {
    
  } else {
    
  }
  runtime_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.runtime_version)
}
inline std::string* Deployment::unsafe_arena_release_runtime_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.Deployment.runtime_version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return runtime_version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Deployment::unsafe_arena_set_allocated_runtime_version(
    std::string* runtime_version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (runtime_version != nullptr) {
    
  } else {
    
  }
  runtime_version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      runtime_version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.runtime_version)
}

// .google.protobuf.Timestamp expiry_time = 20;
inline bool Deployment::_internal_has_expiry_time() const {
  return this != internal_default_instance() && expiry_time_ != nullptr;
}
inline bool Deployment::has_expiry_time() const {
  return _internal_has_expiry_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Deployment::_internal_expiry_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expiry_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Deployment::expiry_time() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Deployment.expiry_time)
  return _internal_expiry_time();
}
inline void Deployment::unsafe_arena_set_allocated_expiry_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* expiry_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_time_);
  }
  expiry_time_ = expiry_time;
  if (expiry_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.expiry_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Deployment::release_expiry_time() {
  auto temp = unsafe_arena_release_expiry_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Deployment::unsafe_arena_release_expiry_time() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.Deployment.expiry_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiry_time_;
  expiry_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Deployment::_internal_mutable_expiry_time() {
  
  if (expiry_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expiry_time_ = p;
  }
  return expiry_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Deployment::mutable_expiry_time() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Deployment.expiry_time)
  return _internal_mutable_expiry_time();
}
inline void Deployment::set_allocated_expiry_time(PROTOBUF_NAMESPACE_ID::Timestamp* expiry_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_time_);
  }
  if (expiry_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_time)->GetArena();
    if (message_arena != submessage_arena) {
      expiry_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiry_time, submessage_arena);
    }
    
  } else {
    
  }
  expiry_time_ = expiry_time;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.Deployment.expiry_time)
}

// -------------------------------------------------------------------

// WorkerCapacity

// string worker_type = 1;
inline void WorkerCapacity::clear_worker_type() {
  worker_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WorkerCapacity::worker_type() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.WorkerCapacity.worker_type)
  return _internal_worker_type();
}
inline void WorkerCapacity::set_worker_type(const std::string& value) {
  _internal_set_worker_type(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.WorkerCapacity.worker_type)
}
inline std::string* WorkerCapacity::mutable_worker_type() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.WorkerCapacity.worker_type)
  return _internal_mutable_worker_type();
}
inline const std::string& WorkerCapacity::_internal_worker_type() const {
  return worker_type_.Get();
}
inline void WorkerCapacity::_internal_set_worker_type(const std::string& value) {
  
  worker_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WorkerCapacity::set_worker_type(std::string&& value) {
  
  worker_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.WorkerCapacity.worker_type)
}
inline void WorkerCapacity::set_worker_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.WorkerCapacity.worker_type)
}
inline void WorkerCapacity::set_worker_type(const char* value,
    size_t size) {
  
  worker_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.WorkerCapacity.worker_type)
}
inline std::string* WorkerCapacity::_internal_mutable_worker_type() {
  
  return worker_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WorkerCapacity::release_worker_type() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.WorkerCapacity.worker_type)
  return worker_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkerCapacity::set_allocated_worker_type(std::string* worker_type) {
  if (worker_type != nullptr) {
    
  } else {
    
  }
  worker_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.WorkerCapacity.worker_type)
}
inline std::string* WorkerCapacity::unsafe_arena_release_worker_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.WorkerCapacity.worker_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return worker_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WorkerCapacity::unsafe_arena_set_allocated_worker_type(
    std::string* worker_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (worker_type != nullptr) {
    
  } else {
    
  }
  worker_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      worker_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.WorkerCapacity.worker_type)
}

// int32 max_capacity = 2 [(.validator.field) = {
inline void WorkerCapacity::clear_max_capacity() {
  max_capacity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkerCapacity::_internal_max_capacity() const {
  return max_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkerCapacity::max_capacity() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.WorkerCapacity.max_capacity)
  return _internal_max_capacity();
}
inline void WorkerCapacity::_internal_set_max_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_capacity_ = value;
}
inline void WorkerCapacity::set_max_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_capacity(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.WorkerCapacity.max_capacity)
}

// int32 remaining_capacity = 3;
inline void WorkerCapacity::clear_remaining_capacity() {
  remaining_capacity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkerCapacity::_internal_remaining_capacity() const {
  return remaining_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkerCapacity::remaining_capacity() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.WorkerCapacity.remaining_capacity)
  return _internal_remaining_capacity();
}
inline void WorkerCapacity::_internal_set_remaining_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remaining_capacity_ = value;
}
inline void WorkerCapacity::set_remaining_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remaining_capacity(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.WorkerCapacity.remaining_capacity)
}

// -------------------------------------------------------------------

// WorkerRateLimit

// string worker_type = 1;
inline void WorkerRateLimit::clear_worker_type() {
  worker_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WorkerRateLimit::worker_type() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.WorkerRateLimit.worker_type)
  return _internal_worker_type();
}
inline void WorkerRateLimit::set_worker_type(const std::string& value) {
  _internal_set_worker_type(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.WorkerRateLimit.worker_type)
}
inline std::string* WorkerRateLimit::mutable_worker_type() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.WorkerRateLimit.worker_type)
  return _internal_mutable_worker_type();
}
inline const std::string& WorkerRateLimit::_internal_worker_type() const {
  return worker_type_.Get();
}
inline void WorkerRateLimit::_internal_set_worker_type(const std::string& value) {
  
  worker_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WorkerRateLimit::set_worker_type(std::string&& value) {
  
  worker_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.WorkerRateLimit.worker_type)
}
inline void WorkerRateLimit::set_worker_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.WorkerRateLimit.worker_type)
}
inline void WorkerRateLimit::set_worker_type(const char* value,
    size_t size) {
  
  worker_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.WorkerRateLimit.worker_type)
}
inline std::string* WorkerRateLimit::_internal_mutable_worker_type() {
  
  return worker_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WorkerRateLimit::release_worker_type() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.WorkerRateLimit.worker_type)
  return worker_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkerRateLimit::set_allocated_worker_type(std::string* worker_type) {
  if (worker_type != nullptr) {
    
  } else {
    
  }
  worker_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.WorkerRateLimit.worker_type)
}
inline std::string* WorkerRateLimit::unsafe_arena_release_worker_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.WorkerRateLimit.worker_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return worker_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WorkerRateLimit::unsafe_arena_set_allocated_worker_type(
    std::string* worker_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (worker_type != nullptr) {
    
  } else {
    
  }
  worker_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      worker_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.WorkerRateLimit.worker_type)
}

// .google.protobuf.Duration duration = 2;
inline bool WorkerRateLimit::_internal_has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline bool WorkerRateLimit::has_duration() const {
  return _internal_has_duration();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& WorkerRateLimit::_internal_duration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& WorkerRateLimit::duration() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.WorkerRateLimit.duration)
  return _internal_duration();
}
inline void WorkerRateLimit::unsafe_arena_set_allocated_duration(
    PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.WorkerRateLimit.duration)
}
inline PROTOBUF_NAMESPACE_ID::Duration* WorkerRateLimit::release_duration() {
  auto temp = unsafe_arena_release_duration();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* WorkerRateLimit::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.WorkerRateLimit.duration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* WorkerRateLimit::_internal_mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    duration_ = p;
  }
  return duration_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* WorkerRateLimit::mutable_duration() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.WorkerRateLimit.duration)
  return _internal_mutable_duration();
}
inline void WorkerRateLimit::set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.WorkerRateLimit.duration)
}

// uint32 requests_in_duration = 3;
inline void WorkerRateLimit::clear_requests_in_duration() {
  requests_in_duration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WorkerRateLimit::_internal_requests_in_duration() const {
  return requests_in_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WorkerRateLimit::requests_in_duration() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.WorkerRateLimit.requests_in_duration)
  return _internal_requests_in_duration();
}
inline void WorkerRateLimit::_internal_set_requests_in_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  requests_in_duration_ = value;
}
inline void WorkerRateLimit::set_requests_in_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_requests_in_duration(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.WorkerRateLimit.requests_in_duration)
}

// -------------------------------------------------------------------

// LaunchConfig

// string config_json = 1 [(.cli.flag) = {
inline void LaunchConfig::clear_config_json() {
  config_json_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LaunchConfig::config_json() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.LaunchConfig.config_json)
  return _internal_config_json();
}
inline void LaunchConfig::set_config_json(const std::string& value) {
  _internal_set_config_json(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.LaunchConfig.config_json)
}
inline std::string* LaunchConfig::mutable_config_json() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.LaunchConfig.config_json)
  return _internal_mutable_config_json();
}
inline const std::string& LaunchConfig::_internal_config_json() const {
  return config_json_.Get();
}
inline void LaunchConfig::_internal_set_config_json(const std::string& value) {
  
  config_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LaunchConfig::set_config_json(std::string&& value) {
  
  config_json_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.LaunchConfig.config_json)
}
inline void LaunchConfig::set_config_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.LaunchConfig.config_json)
}
inline void LaunchConfig::set_config_json(const char* value,
    size_t size) {
  
  config_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.LaunchConfig.config_json)
}
inline std::string* LaunchConfig::_internal_mutable_config_json() {
  
  return config_json_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LaunchConfig::release_config_json() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.LaunchConfig.config_json)
  return config_json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LaunchConfig::set_allocated_config_json(std::string* config_json) {
  if (config_json != nullptr) {
    
  } else {
    
  }
  config_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_json,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.LaunchConfig.config_json)
}
inline std::string* LaunchConfig::unsafe_arena_release_config_json() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.LaunchConfig.config_json)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return config_json_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LaunchConfig::unsafe_arena_set_allocated_config_json(
    std::string* config_json) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (config_json != nullptr) {
    
  } else {
    
  }
  config_json_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      config_json, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.LaunchConfig.config_json)
}

// -------------------------------------------------------------------

// WorkerFlag

// string worker_type = 1;
inline void WorkerFlag::clear_worker_type() {
  worker_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WorkerFlag::worker_type() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.WorkerFlag.worker_type)
  return _internal_worker_type();
}
inline void WorkerFlag::set_worker_type(const std::string& value) {
  _internal_set_worker_type(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.WorkerFlag.worker_type)
}
inline std::string* WorkerFlag::mutable_worker_type() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.WorkerFlag.worker_type)
  return _internal_mutable_worker_type();
}
inline const std::string& WorkerFlag::_internal_worker_type() const {
  return worker_type_.Get();
}
inline void WorkerFlag::_internal_set_worker_type(const std::string& value) {
  
  worker_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WorkerFlag::set_worker_type(std::string&& value) {
  
  worker_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.WorkerFlag.worker_type)
}
inline void WorkerFlag::set_worker_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.WorkerFlag.worker_type)
}
inline void WorkerFlag::set_worker_type(const char* value,
    size_t size) {
  
  worker_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.WorkerFlag.worker_type)
}
inline std::string* WorkerFlag::_internal_mutable_worker_type() {
  
  return worker_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WorkerFlag::release_worker_type() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.WorkerFlag.worker_type)
  return worker_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkerFlag::set_allocated_worker_type(std::string* worker_type) {
  if (worker_type != nullptr) {
    
  } else {
    
  }
  worker_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.WorkerFlag.worker_type)
}
inline std::string* WorkerFlag::unsafe_arena_release_worker_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.WorkerFlag.worker_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return worker_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WorkerFlag::unsafe_arena_set_allocated_worker_type(
    std::string* worker_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (worker_type != nullptr) {
    
  } else {
    
  }
  worker_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      worker_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.WorkerFlag.worker_type)
}

// string key = 2;
inline void WorkerFlag::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WorkerFlag::key() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.WorkerFlag.key)
  return _internal_key();
}
inline void WorkerFlag::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.WorkerFlag.key)
}
inline std::string* WorkerFlag::mutable_key() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.WorkerFlag.key)
  return _internal_mutable_key();
}
inline const std::string& WorkerFlag::_internal_key() const {
  return key_.Get();
}
inline void WorkerFlag::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WorkerFlag::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.WorkerFlag.key)
}
inline void WorkerFlag::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.WorkerFlag.key)
}
inline void WorkerFlag::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.WorkerFlag.key)
}
inline std::string* WorkerFlag::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WorkerFlag::release_key() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.WorkerFlag.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkerFlag::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.WorkerFlag.key)
}
inline std::string* WorkerFlag::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.WorkerFlag.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WorkerFlag::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.WorkerFlag.key)
}

// string value = 3;
inline void WorkerFlag::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WorkerFlag::value() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.WorkerFlag.value)
  return _internal_value();
}
inline void WorkerFlag::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.WorkerFlag.value)
}
inline std::string* WorkerFlag::mutable_value() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.WorkerFlag.value)
  return _internal_mutable_value();
}
inline const std::string& WorkerFlag::_internal_value() const {
  return value_.Get();
}
inline void WorkerFlag::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WorkerFlag::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.WorkerFlag.value)
}
inline void WorkerFlag::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.WorkerFlag.value)
}
inline void WorkerFlag::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.WorkerFlag.value)
}
inline std::string* WorkerFlag::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WorkerFlag::release_value() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.WorkerFlag.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkerFlag::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.WorkerFlag.value)
}
inline std::string* WorkerFlag::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.WorkerFlag.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WorkerFlag::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.WorkerFlag.value)
}

// -------------------------------------------------------------------

// PlayerInfo

// int64 active_players = 1;
inline void PlayerInfo::clear_active_players() {
  active_players_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::_internal_active_players() const {
  return active_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::active_players() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.PlayerInfo.active_players)
  return _internal_active_players();
}
inline void PlayerInfo::_internal_set_active_players(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  active_players_ = value;
}
inline void PlayerInfo::set_active_players(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_active_players(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.PlayerInfo.active_players)
}

// int64 capacity = 2;
inline void PlayerInfo::clear_capacity() {
  capacity_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::capacity() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.PlayerInfo.capacity)
  return _internal_capacity();
}
inline void PlayerInfo::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  capacity_ = value;
}
inline void PlayerInfo::set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.PlayerInfo.capacity)
}

// int64 queue_length = 3;
inline void PlayerInfo::clear_queue_length() {
  queue_length_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::_internal_queue_length() const {
  return queue_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::queue_length() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.PlayerInfo.queue_length)
  return _internal_queue_length();
}
inline void PlayerInfo::_internal_set_queue_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  queue_length_ = value;
}
inline void PlayerInfo::set_queue_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_queue_length(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.PlayerInfo.queue_length)
}

// -------------------------------------------------------------------

// ListDeploymentsRequest

// string project_name = 1 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
inline void ListDeploymentsRequest::clear_project_name() {
  project_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListDeploymentsRequest::project_name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.project_name)
  return _internal_project_name();
}
inline void ListDeploymentsRequest::set_project_name(const std::string& value) {
  _internal_set_project_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.project_name)
}
inline std::string* ListDeploymentsRequest::mutable_project_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.project_name)
  return _internal_mutable_project_name();
}
inline const std::string& ListDeploymentsRequest::_internal_project_name() const {
  return project_name_.Get();
}
inline void ListDeploymentsRequest::_internal_set_project_name(const std::string& value) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListDeploymentsRequest::set_project_name(std::string&& value) {
  
  project_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.project_name)
}
inline void ListDeploymentsRequest::set_project_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.project_name)
}
inline void ListDeploymentsRequest::set_project_name(const char* value,
    size_t size) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.project_name)
}
inline std::string* ListDeploymentsRequest::_internal_mutable_project_name() {
  
  return project_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListDeploymentsRequest::release_project_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.project_name)
  return project_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDeploymentsRequest::set_allocated_project_name(std::string* project_name) {
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.project_name)
}
inline std::string* ListDeploymentsRequest::unsafe_arena_release_project_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.project_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return project_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListDeploymentsRequest::unsafe_arena_set_allocated_project_name(
    std::string* project_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      project_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.project_name)
}

// int32 page_size = 2 [(.validator.field) = {
inline void ListDeploymentsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDeploymentsRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDeploymentsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.page_size)
  return _internal_page_size();
}
inline void ListDeploymentsRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListDeploymentsRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.page_size)
}

// string page_token = 3 [(.cli.flag) = {
inline void ListDeploymentsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListDeploymentsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.page_token)
  return _internal_page_token();
}
inline void ListDeploymentsRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.page_token)
}
inline std::string* ListDeploymentsRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListDeploymentsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListDeploymentsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListDeploymentsRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.page_token)
}
inline void ListDeploymentsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.page_token)
}
inline void ListDeploymentsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.page_token)
}
inline std::string* ListDeploymentsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListDeploymentsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDeploymentsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.page_token)
}
inline std::string* ListDeploymentsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.page_token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return page_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListDeploymentsRequest::unsafe_arena_set_allocated_page_token(
    std::string* page_token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.page_token)
}

// string deployment_name = 4 [(.improbable.logfield) = {
inline void ListDeploymentsRequest::clear_deployment_name() {
  deployment_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListDeploymentsRequest::deployment_name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.deployment_name)
  return _internal_deployment_name();
}
inline void ListDeploymentsRequest::set_deployment_name(const std::string& value) {
  _internal_set_deployment_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.deployment_name)
}
inline std::string* ListDeploymentsRequest::mutable_deployment_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.deployment_name)
  return _internal_mutable_deployment_name();
}
inline const std::string& ListDeploymentsRequest::_internal_deployment_name() const {
  return deployment_name_.Get();
}
inline void ListDeploymentsRequest::_internal_set_deployment_name(const std::string& value) {
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListDeploymentsRequest::set_deployment_name(std::string&& value) {
  
  deployment_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.deployment_name)
}
inline void ListDeploymentsRequest::set_deployment_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.deployment_name)
}
inline void ListDeploymentsRequest::set_deployment_name(const char* value,
    size_t size) {
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.deployment_name)
}
inline std::string* ListDeploymentsRequest::_internal_mutable_deployment_name() {
  
  return deployment_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListDeploymentsRequest::release_deployment_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.deployment_name)
  return deployment_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDeploymentsRequest::set_allocated_deployment_name(std::string* deployment_name) {
  if (deployment_name != nullptr) {
    
  } else {
    
  }
  deployment_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deployment_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.deployment_name)
}
inline std::string* ListDeploymentsRequest::unsafe_arena_release_deployment_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.deployment_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return deployment_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListDeploymentsRequest::unsafe_arena_set_allocated_deployment_name(
    std::string* deployment_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (deployment_name != nullptr) {
    
  } else {
    
  }
  deployment_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      deployment_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.deployment_name)
}

// .improbable.spatialos.deployment.v1alpha1.ViewType view = 5 [(.cli.flag) = {
inline void ListDeploymentsRequest::clear_view() {
  view_ = 0;
}
inline ::improbable::spatialos::deployment::v1alpha1::ViewType ListDeploymentsRequest::_internal_view() const {
  return static_cast< ::improbable::spatialos::deployment::v1alpha1::ViewType >(view_);
}
inline ::improbable::spatialos::deployment::v1alpha1::ViewType ListDeploymentsRequest::view() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.view)
  return _internal_view();
}
inline void ListDeploymentsRequest::_internal_set_view(::improbable::spatialos::deployment::v1alpha1::ViewType value) {
  
  view_ = value;
}
inline void ListDeploymentsRequest::set_view(::improbable::spatialos::deployment::v1alpha1::ViewType value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.view)
}

// .improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.DeploymentStoppedStatusFilter deployment_stopped_status_filter = 6 [(.cli.flag) = {
inline void ListDeploymentsRequest::clear_deployment_stopped_status_filter() {
  deployment_stopped_status_filter_ = 0;
}
inline ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest_DeploymentStoppedStatusFilter ListDeploymentsRequest::_internal_deployment_stopped_status_filter() const {
  return static_cast< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest_DeploymentStoppedStatusFilter >(deployment_stopped_status_filter_);
}
inline ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest_DeploymentStoppedStatusFilter ListDeploymentsRequest::deployment_stopped_status_filter() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.deployment_stopped_status_filter)
  return _internal_deployment_stopped_status_filter();
}
inline void ListDeploymentsRequest::_internal_set_deployment_stopped_status_filter(::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest_DeploymentStoppedStatusFilter value) {
  
  deployment_stopped_status_filter_ = value;
}
inline void ListDeploymentsRequest::set_deployment_stopped_status_filter(::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest_DeploymentStoppedStatusFilter value) {
  _internal_set_deployment_stopped_status_filter(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.deployment_stopped_status_filter)
}

// repeated .improbable.spatialos.deployment.v1alpha1.Filter filters = 7;
inline int ListDeploymentsRequest::_internal_filters_size() const {
  return filters_.size();
}
inline int ListDeploymentsRequest::filters_size() const {
  return _internal_filters_size();
}
inline void ListDeploymentsRequest::clear_filters() {
  filters_.Clear();
}
inline ::improbable::spatialos::deployment::v1alpha1::Filter* ListDeploymentsRequest::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.filters)
  return filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::Filter >*
ListDeploymentsRequest::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.filters)
  return &filters_;
}
inline const ::improbable::spatialos::deployment::v1alpha1::Filter& ListDeploymentsRequest::_internal_filters(int index) const {
  return filters_.Get(index);
}
inline const ::improbable::spatialos::deployment::v1alpha1::Filter& ListDeploymentsRequest::filters(int index) const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.filters)
  return _internal_filters(index);
}
inline ::improbable::spatialos::deployment::v1alpha1::Filter* ListDeploymentsRequest::_internal_add_filters() {
  return filters_.Add();
}
inline ::improbable::spatialos::deployment::v1alpha1::Filter* ListDeploymentsRequest::add_filters() {
  // @@protoc_insertion_point(field_add:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.filters)
  return _internal_add_filters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::Filter >&
ListDeploymentsRequest::filters() const {
  // @@protoc_insertion_point(field_list:improbable.spatialos.deployment.v1alpha1.ListDeploymentsRequest.filters)
  return filters_;
}

// -------------------------------------------------------------------

// ListDeploymentsResponse

// repeated .improbable.spatialos.deployment.v1alpha1.Deployment deployments = 1;
inline int ListDeploymentsResponse::_internal_deployments_size() const {
  return deployments_.size();
}
inline int ListDeploymentsResponse::deployments_size() const {
  return _internal_deployments_size();
}
inline void ListDeploymentsResponse::clear_deployments() {
  deployments_.Clear();
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment* ListDeploymentsResponse::mutable_deployments(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.ListDeploymentsResponse.deployments)
  return deployments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::Deployment >*
ListDeploymentsResponse::mutable_deployments() {
  // @@protoc_insertion_point(field_mutable_list:improbable.spatialos.deployment.v1alpha1.ListDeploymentsResponse.deployments)
  return &deployments_;
}
inline const ::improbable::spatialos::deployment::v1alpha1::Deployment& ListDeploymentsResponse::_internal_deployments(int index) const {
  return deployments_.Get(index);
}
inline const ::improbable::spatialos::deployment::v1alpha1::Deployment& ListDeploymentsResponse::deployments(int index) const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.ListDeploymentsResponse.deployments)
  return _internal_deployments(index);
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment* ListDeploymentsResponse::_internal_add_deployments() {
  return deployments_.Add();
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment* ListDeploymentsResponse::add_deployments() {
  // @@protoc_insertion_point(field_add:improbable.spatialos.deployment.v1alpha1.ListDeploymentsResponse.deployments)
  return _internal_add_deployments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::deployment::v1alpha1::Deployment >&
ListDeploymentsResponse::deployments() const {
  // @@protoc_insertion_point(field_list:improbable.spatialos.deployment.v1alpha1.ListDeploymentsResponse.deployments)
  return deployments_;
}

// string next_page_token = 2;
inline void ListDeploymentsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListDeploymentsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.ListDeploymentsResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListDeploymentsResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.ListDeploymentsResponse.next_page_token)
}
inline std::string* ListDeploymentsResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.ListDeploymentsResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListDeploymentsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListDeploymentsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListDeploymentsResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.ListDeploymentsResponse.next_page_token)
}
inline void ListDeploymentsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.ListDeploymentsResponse.next_page_token)
}
inline void ListDeploymentsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.ListDeploymentsResponse.next_page_token)
}
inline std::string* ListDeploymentsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListDeploymentsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.ListDeploymentsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDeploymentsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.ListDeploymentsResponse.next_page_token)
}
inline std::string* ListDeploymentsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.ListDeploymentsResponse.next_page_token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return next_page_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListDeploymentsResponse::unsafe_arena_set_allocated_next_page_token(
    std::string* next_page_token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.ListDeploymentsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetDeploymentRequest

// string project_name = 1 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
inline void GetDeploymentRequest::clear_project_name() {
  project_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetDeploymentRequest::project_name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.project_name)
  return _internal_project_name();
}
inline void GetDeploymentRequest::set_project_name(const std::string& value) {
  _internal_set_project_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.project_name)
}
inline std::string* GetDeploymentRequest::mutable_project_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.project_name)
  return _internal_mutable_project_name();
}
inline const std::string& GetDeploymentRequest::_internal_project_name() const {
  return project_name_.Get();
}
inline void GetDeploymentRequest::_internal_set_project_name(const std::string& value) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetDeploymentRequest::set_project_name(std::string&& value) {
  
  project_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.project_name)
}
inline void GetDeploymentRequest::set_project_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.project_name)
}
inline void GetDeploymentRequest::set_project_name(const char* value,
    size_t size) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.project_name)
}
inline std::string* GetDeploymentRequest::_internal_mutable_project_name() {
  
  return project_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetDeploymentRequest::release_project_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.project_name)
  return project_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDeploymentRequest::set_allocated_project_name(std::string* project_name) {
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.project_name)
}
inline std::string* GetDeploymentRequest::unsafe_arena_release_project_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.project_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return project_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetDeploymentRequest::unsafe_arena_set_allocated_project_name(
    std::string* project_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      project_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.project_name)
}

// string id = 2 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
inline void GetDeploymentRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetDeploymentRequest::id() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.id)
  return _internal_id();
}
inline void GetDeploymentRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.id)
}
inline std::string* GetDeploymentRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetDeploymentRequest::_internal_id() const {
  return id_.Get();
}
inline void GetDeploymentRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetDeploymentRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.id)
}
inline void GetDeploymentRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.id)
}
inline void GetDeploymentRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.id)
}
inline std::string* GetDeploymentRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetDeploymentRequest::release_id() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDeploymentRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.id)
}
inline std::string* GetDeploymentRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetDeploymentRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.id)
}

// .improbable.spatialos.deployment.v1alpha1.ViewType view = 3 [(.cli.flag) = {
inline void GetDeploymentRequest::clear_view() {
  view_ = 0;
}
inline ::improbable::spatialos::deployment::v1alpha1::ViewType GetDeploymentRequest::_internal_view() const {
  return static_cast< ::improbable::spatialos::deployment::v1alpha1::ViewType >(view_);
}
inline ::improbable::spatialos::deployment::v1alpha1::ViewType GetDeploymentRequest::view() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.view)
  return _internal_view();
}
inline void GetDeploymentRequest::_internal_set_view(::improbable::spatialos::deployment::v1alpha1::ViewType value) {
  
  view_ = value;
}
inline void GetDeploymentRequest::set_view(::improbable::spatialos::deployment::v1alpha1::ViewType value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.GetDeploymentRequest.view)
}

// -------------------------------------------------------------------

// GetDeploymentResponse

// .improbable.spatialos.deployment.v1alpha1.Deployment deployment = 1;
inline bool GetDeploymentResponse::_internal_has_deployment() const {
  return this != internal_default_instance() && deployment_ != nullptr;
}
inline bool GetDeploymentResponse::has_deployment() const {
  return _internal_has_deployment();
}
inline void GetDeploymentResponse::clear_deployment() {
  if (GetArena() == nullptr && deployment_ != nullptr) {
    delete deployment_;
  }
  deployment_ = nullptr;
}
inline const ::improbable::spatialos::deployment::v1alpha1::Deployment& GetDeploymentResponse::_internal_deployment() const {
  const ::improbable::spatialos::deployment::v1alpha1::Deployment* p = deployment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::improbable::spatialos::deployment::v1alpha1::Deployment*>(
      &::improbable::spatialos::deployment::v1alpha1::_Deployment_default_instance_);
}
inline const ::improbable::spatialos::deployment::v1alpha1::Deployment& GetDeploymentResponse::deployment() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.GetDeploymentResponse.deployment)
  return _internal_deployment();
}
inline void GetDeploymentResponse::unsafe_arena_set_allocated_deployment(
    ::improbable::spatialos::deployment::v1alpha1::Deployment* deployment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deployment_);
  }
  deployment_ = deployment;
  if (deployment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.GetDeploymentResponse.deployment)
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment* GetDeploymentResponse::release_deployment() {
  auto temp = unsafe_arena_release_deployment();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment* GetDeploymentResponse::unsafe_arena_release_deployment() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.GetDeploymentResponse.deployment)
  
  ::improbable::spatialos::deployment::v1alpha1::Deployment* temp = deployment_;
  deployment_ = nullptr;
  return temp;
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment* GetDeploymentResponse::_internal_mutable_deployment() {
  
  if (deployment_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::Deployment>(GetArena());
    deployment_ = p;
  }
  return deployment_;
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment* GetDeploymentResponse::mutable_deployment() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.GetDeploymentResponse.deployment)
  return _internal_mutable_deployment();
}
inline void GetDeploymentResponse::set_allocated_deployment(::improbable::spatialos::deployment::v1alpha1::Deployment* deployment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deployment_;
  }
  if (deployment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deployment);
    if (message_arena != submessage_arena) {
      deployment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deployment, submessage_arena);
    }
    
  } else {
    
  }
  deployment_ = deployment;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.GetDeploymentResponse.deployment)
}

// -------------------------------------------------------------------

// GetRunningDeploymentByNameRequest

// string project_name = 1 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
inline void GetRunningDeploymentByNameRequest::clear_project_name() {
  project_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRunningDeploymentByNameRequest::project_name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest.project_name)
  return _internal_project_name();
}
inline void GetRunningDeploymentByNameRequest::set_project_name(const std::string& value) {
  _internal_set_project_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest.project_name)
}
inline std::string* GetRunningDeploymentByNameRequest::mutable_project_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest.project_name)
  return _internal_mutable_project_name();
}
inline const std::string& GetRunningDeploymentByNameRequest::_internal_project_name() const {
  return project_name_.Get();
}
inline void GetRunningDeploymentByNameRequest::_internal_set_project_name(const std::string& value) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRunningDeploymentByNameRequest::set_project_name(std::string&& value) {
  
  project_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest.project_name)
}
inline void GetRunningDeploymentByNameRequest::set_project_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest.project_name)
}
inline void GetRunningDeploymentByNameRequest::set_project_name(const char* value,
    size_t size) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest.project_name)
}
inline std::string* GetRunningDeploymentByNameRequest::_internal_mutable_project_name() {
  
  return project_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRunningDeploymentByNameRequest::release_project_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest.project_name)
  return project_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRunningDeploymentByNameRequest::set_allocated_project_name(std::string* project_name) {
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest.project_name)
}
inline std::string* GetRunningDeploymentByNameRequest::unsafe_arena_release_project_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest.project_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return project_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRunningDeploymentByNameRequest::unsafe_arena_set_allocated_project_name(
    std::string* project_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      project_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest.project_name)
}

// string deployment_name = 2 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
inline void GetRunningDeploymentByNameRequest::clear_deployment_name() {
  deployment_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRunningDeploymentByNameRequest::deployment_name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest.deployment_name)
  return _internal_deployment_name();
}
inline void GetRunningDeploymentByNameRequest::set_deployment_name(const std::string& value) {
  _internal_set_deployment_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest.deployment_name)
}
inline std::string* GetRunningDeploymentByNameRequest::mutable_deployment_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest.deployment_name)
  return _internal_mutable_deployment_name();
}
inline const std::string& GetRunningDeploymentByNameRequest::_internal_deployment_name() const {
  return deployment_name_.Get();
}
inline void GetRunningDeploymentByNameRequest::_internal_set_deployment_name(const std::string& value) {
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRunningDeploymentByNameRequest::set_deployment_name(std::string&& value) {
  
  deployment_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest.deployment_name)
}
inline void GetRunningDeploymentByNameRequest::set_deployment_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest.deployment_name)
}
inline void GetRunningDeploymentByNameRequest::set_deployment_name(const char* value,
    size_t size) {
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest.deployment_name)
}
inline std::string* GetRunningDeploymentByNameRequest::_internal_mutable_deployment_name() {
  
  return deployment_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRunningDeploymentByNameRequest::release_deployment_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest.deployment_name)
  return deployment_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRunningDeploymentByNameRequest::set_allocated_deployment_name(std::string* deployment_name) {
  if (deployment_name != nullptr) {
    
  } else {
    
  }
  deployment_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deployment_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest.deployment_name)
}
inline std::string* GetRunningDeploymentByNameRequest::unsafe_arena_release_deployment_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest.deployment_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return deployment_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRunningDeploymentByNameRequest::unsafe_arena_set_allocated_deployment_name(
    std::string* deployment_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (deployment_name != nullptr) {
    
  } else {
    
  }
  deployment_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      deployment_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.GetRunningDeploymentByNameRequest.deployment_name)
}

// -------------------------------------------------------------------

// CreateDeploymentRequest

// .improbable.spatialos.deployment.v1alpha1.Deployment deployment = 2 [(.google.api.field_behavior) = REQUIRED, (.validator.field) = {
inline bool CreateDeploymentRequest::_internal_has_deployment() const {
  return this != internal_default_instance() && deployment_ != nullptr;
}
inline bool CreateDeploymentRequest::has_deployment() const {
  return _internal_has_deployment();
}
inline void CreateDeploymentRequest::clear_deployment() {
  if (GetArena() == nullptr && deployment_ != nullptr) {
    delete deployment_;
  }
  deployment_ = nullptr;
}
inline const ::improbable::spatialos::deployment::v1alpha1::Deployment& CreateDeploymentRequest::_internal_deployment() const {
  const ::improbable::spatialos::deployment::v1alpha1::Deployment* p = deployment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::improbable::spatialos::deployment::v1alpha1::Deployment*>(
      &::improbable::spatialos::deployment::v1alpha1::_Deployment_default_instance_);
}
inline const ::improbable::spatialos::deployment::v1alpha1::Deployment& CreateDeploymentRequest::deployment() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.CreateDeploymentRequest.deployment)
  return _internal_deployment();
}
inline void CreateDeploymentRequest::unsafe_arena_set_allocated_deployment(
    ::improbable::spatialos::deployment::v1alpha1::Deployment* deployment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deployment_);
  }
  deployment_ = deployment;
  if (deployment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.CreateDeploymentRequest.deployment)
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment* CreateDeploymentRequest::release_deployment() {
  auto temp = unsafe_arena_release_deployment();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment* CreateDeploymentRequest::unsafe_arena_release_deployment() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.CreateDeploymentRequest.deployment)
  
  ::improbable::spatialos::deployment::v1alpha1::Deployment* temp = deployment_;
  deployment_ = nullptr;
  return temp;
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment* CreateDeploymentRequest::_internal_mutable_deployment() {
  
  if (deployment_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::Deployment>(GetArena());
    deployment_ = p;
  }
  return deployment_;
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment* CreateDeploymentRequest::mutable_deployment() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.CreateDeploymentRequest.deployment)
  return _internal_mutable_deployment();
}
inline void CreateDeploymentRequest::set_allocated_deployment(::improbable::spatialos::deployment::v1alpha1::Deployment* deployment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deployment_;
  }
  if (deployment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deployment);
    if (message_arena != submessage_arena) {
      deployment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deployment, submessage_arena);
    }
    
  } else {
    
  }
  deployment_ = deployment;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.CreateDeploymentRequest.deployment)
}

// -------------------------------------------------------------------

// CreateDeploymentMetadata

// -------------------------------------------------------------------

// UpdateDeploymentRequest

// .improbable.spatialos.deployment.v1alpha1.Deployment deployment = 1 [(.google.api.field_behavior) = REQUIRED, (.validator.field) = {
inline bool UpdateDeploymentRequest::_internal_has_deployment() const {
  return this != internal_default_instance() && deployment_ != nullptr;
}
inline bool UpdateDeploymentRequest::has_deployment() const {
  return _internal_has_deployment();
}
inline void UpdateDeploymentRequest::clear_deployment() {
  if (GetArena() == nullptr && deployment_ != nullptr) {
    delete deployment_;
  }
  deployment_ = nullptr;
}
inline const ::improbable::spatialos::deployment::v1alpha1::Deployment& UpdateDeploymentRequest::_internal_deployment() const {
  const ::improbable::spatialos::deployment::v1alpha1::Deployment* p = deployment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::improbable::spatialos::deployment::v1alpha1::Deployment*>(
      &::improbable::spatialos::deployment::v1alpha1::_Deployment_default_instance_);
}
inline const ::improbable::spatialos::deployment::v1alpha1::Deployment& UpdateDeploymentRequest::deployment() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.UpdateDeploymentRequest.deployment)
  return _internal_deployment();
}
inline void UpdateDeploymentRequest::unsafe_arena_set_allocated_deployment(
    ::improbable::spatialos::deployment::v1alpha1::Deployment* deployment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deployment_);
  }
  deployment_ = deployment;
  if (deployment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.UpdateDeploymentRequest.deployment)
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment* UpdateDeploymentRequest::release_deployment() {
  auto temp = unsafe_arena_release_deployment();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment* UpdateDeploymentRequest::unsafe_arena_release_deployment() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.UpdateDeploymentRequest.deployment)
  
  ::improbable::spatialos::deployment::v1alpha1::Deployment* temp = deployment_;
  deployment_ = nullptr;
  return temp;
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment* UpdateDeploymentRequest::_internal_mutable_deployment() {
  
  if (deployment_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::Deployment>(GetArena());
    deployment_ = p;
  }
  return deployment_;
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment* UpdateDeploymentRequest::mutable_deployment() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.UpdateDeploymentRequest.deployment)
  return _internal_mutable_deployment();
}
inline void UpdateDeploymentRequest::set_allocated_deployment(::improbable::spatialos::deployment::v1alpha1::Deployment* deployment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deployment_;
  }
  if (deployment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deployment);
    if (message_arena != submessage_arena) {
      deployment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deployment, submessage_arena);
    }
    
  } else {
    
  }
  deployment_ = deployment;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.UpdateDeploymentRequest.deployment)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateDeploymentRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateDeploymentRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateDeploymentRequest::_internal_update_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask*>(
      &PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateDeploymentRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.UpdateDeploymentRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateDeploymentRequest::unsafe_arena_set_allocated_update_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.UpdateDeploymentRequest.update_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateDeploymentRequest::release_update_mask() {
  auto temp = unsafe_arena_release_update_mask();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateDeploymentRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.UpdateDeploymentRequest.update_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateDeploymentRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    update_mask_ = p;
  }
  return update_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateDeploymentRequest::mutable_update_mask() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.UpdateDeploymentRequest.update_mask)
  return _internal_mutable_update_mask();
}
inline void UpdateDeploymentRequest::set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask)->GetArena();
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.UpdateDeploymentRequest.update_mask)
}

// -------------------------------------------------------------------

// UpdateDeploymentResponse

// .improbable.spatialos.deployment.v1alpha1.Deployment deployment = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateDeploymentResponse::_internal_has_deployment() const {
  return this != internal_default_instance() && deployment_ != nullptr;
}
inline bool UpdateDeploymentResponse::has_deployment() const {
  return _internal_has_deployment();
}
inline void UpdateDeploymentResponse::clear_deployment() {
  if (GetArena() == nullptr && deployment_ != nullptr) {
    delete deployment_;
  }
  deployment_ = nullptr;
}
inline const ::improbable::spatialos::deployment::v1alpha1::Deployment& UpdateDeploymentResponse::_internal_deployment() const {
  const ::improbable::spatialos::deployment::v1alpha1::Deployment* p = deployment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::improbable::spatialos::deployment::v1alpha1::Deployment*>(
      &::improbable::spatialos::deployment::v1alpha1::_Deployment_default_instance_);
}
inline const ::improbable::spatialos::deployment::v1alpha1::Deployment& UpdateDeploymentResponse::deployment() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.UpdateDeploymentResponse.deployment)
  return _internal_deployment();
}
inline void UpdateDeploymentResponse::unsafe_arena_set_allocated_deployment(
    ::improbable::spatialos::deployment::v1alpha1::Deployment* deployment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deployment_);
  }
  deployment_ = deployment;
  if (deployment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.UpdateDeploymentResponse.deployment)
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment* UpdateDeploymentResponse::release_deployment() {
  auto temp = unsafe_arena_release_deployment();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment* UpdateDeploymentResponse::unsafe_arena_release_deployment() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.UpdateDeploymentResponse.deployment)
  
  ::improbable::spatialos::deployment::v1alpha1::Deployment* temp = deployment_;
  deployment_ = nullptr;
  return temp;
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment* UpdateDeploymentResponse::_internal_mutable_deployment() {
  
  if (deployment_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::spatialos::deployment::v1alpha1::Deployment>(GetArena());
    deployment_ = p;
  }
  return deployment_;
}
inline ::improbable::spatialos::deployment::v1alpha1::Deployment* UpdateDeploymentResponse::mutable_deployment() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.UpdateDeploymentResponse.deployment)
  return _internal_mutable_deployment();
}
inline void UpdateDeploymentResponse::set_allocated_deployment(::improbable::spatialos::deployment::v1alpha1::Deployment* deployment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deployment_;
  }
  if (deployment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deployment);
    if (message_arena != submessage_arena) {
      deployment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deployment, submessage_arena);
    }
    
  } else {
    
  }
  deployment_ = deployment;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.UpdateDeploymentResponse.deployment)
}

// -------------------------------------------------------------------

// StopDeploymentRequest

// string project_name = 1 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
inline void StopDeploymentRequest::clear_project_name() {
  project_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopDeploymentRequest::project_name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest.project_name)
  return _internal_project_name();
}
inline void StopDeploymentRequest::set_project_name(const std::string& value) {
  _internal_set_project_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest.project_name)
}
inline std::string* StopDeploymentRequest::mutable_project_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest.project_name)
  return _internal_mutable_project_name();
}
inline const std::string& StopDeploymentRequest::_internal_project_name() const {
  return project_name_.Get();
}
inline void StopDeploymentRequest::_internal_set_project_name(const std::string& value) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopDeploymentRequest::set_project_name(std::string&& value) {
  
  project_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest.project_name)
}
inline void StopDeploymentRequest::set_project_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest.project_name)
}
inline void StopDeploymentRequest::set_project_name(const char* value,
    size_t size) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest.project_name)
}
inline std::string* StopDeploymentRequest::_internal_mutable_project_name() {
  
  return project_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopDeploymentRequest::release_project_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest.project_name)
  return project_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopDeploymentRequest::set_allocated_project_name(std::string* project_name) {
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest.project_name)
}
inline std::string* StopDeploymentRequest::unsafe_arena_release_project_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest.project_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return project_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopDeploymentRequest::unsafe_arena_set_allocated_project_name(
    std::string* project_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      project_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest.project_name)
}

// string id = 2 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
inline void StopDeploymentRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopDeploymentRequest::id() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest.id)
  return _internal_id();
}
inline void StopDeploymentRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest.id)
}
inline std::string* StopDeploymentRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest.id)
  return _internal_mutable_id();
}
inline const std::string& StopDeploymentRequest::_internal_id() const {
  return id_.Get();
}
inline void StopDeploymentRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopDeploymentRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest.id)
}
inline void StopDeploymentRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest.id)
}
inline void StopDeploymentRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest.id)
}
inline std::string* StopDeploymentRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopDeploymentRequest::release_id() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopDeploymentRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest.id)
}
inline std::string* StopDeploymentRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopDeploymentRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.StopDeploymentRequest.id)
}

// -------------------------------------------------------------------

// StopDeploymentResponse

// -------------------------------------------------------------------

// DeleteDeploymentRequest

// string id = 1 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
inline void DeleteDeploymentRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteDeploymentRequest::id() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.DeleteDeploymentRequest.id)
  return _internal_id();
}
inline void DeleteDeploymentRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.DeleteDeploymentRequest.id)
}
inline std::string* DeleteDeploymentRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.DeleteDeploymentRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteDeploymentRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteDeploymentRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteDeploymentRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.DeleteDeploymentRequest.id)
}
inline void DeleteDeploymentRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.DeleteDeploymentRequest.id)
}
inline void DeleteDeploymentRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.DeleteDeploymentRequest.id)
}
inline std::string* DeleteDeploymentRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteDeploymentRequest::release_id() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.DeleteDeploymentRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteDeploymentRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.DeleteDeploymentRequest.id)
}
inline std::string* DeleteDeploymentRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.DeleteDeploymentRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteDeploymentRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.DeleteDeploymentRequest.id)
}

// -------------------------------------------------------------------

// DeleteDeploymentMetadata

// -------------------------------------------------------------------

// Filter

// .improbable.spatialos.deployment.v1alpha1.StoppedStatusPropertyFilter stopped_status_property_filter = 1;
inline bool Filter::_internal_has_stopped_status_property_filter() const {
  return filter_type_case() == kStoppedStatusPropertyFilter;
}
inline bool Filter::has_stopped_status_property_filter() const {
  return _internal_has_stopped_status_property_filter();
}
inline void Filter::set_has_stopped_status_property_filter() {
  _oneof_case_[0] = kStoppedStatusPropertyFilter;
}
inline void Filter::clear_stopped_status_property_filter() {
  if (_internal_has_stopped_status_property_filter()) {
    if (GetArena() == nullptr) {
      delete filter_type_.stopped_status_property_filter_;
    }
    clear_has_filter_type();
  }
}
inline ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter* Filter::release_stopped_status_property_filter() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.Filter.stopped_status_property_filter)
  if (_internal_has_stopped_status_property_filter()) {
    clear_has_filter_type();
      ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter* temp = filter_type_.stopped_status_property_filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_type_.stopped_status_property_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter& Filter::_internal_stopped_status_property_filter() const {
  return _internal_has_stopped_status_property_filter()
      ? *filter_type_.stopped_status_property_filter_
      : *reinterpret_cast< ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter*>(&::improbable::spatialos::deployment::v1alpha1::_StoppedStatusPropertyFilter_default_instance_);
}
inline const ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter& Filter::stopped_status_property_filter() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Filter.stopped_status_property_filter)
  return _internal_stopped_status_property_filter();
}
inline ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter* Filter::unsafe_arena_release_stopped_status_property_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.Filter.stopped_status_property_filter)
  if (_internal_has_stopped_status_property_filter()) {
    clear_has_filter_type();
    ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter* temp = filter_type_.stopped_status_property_filter_;
    filter_type_.stopped_status_property_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Filter::unsafe_arena_set_allocated_stopped_status_property_filter(::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter* stopped_status_property_filter) {
  clear_filter_type();
  if (stopped_status_property_filter) {
    set_has_stopped_status_property_filter();
    filter_type_.stopped_status_property_filter_ = stopped_status_property_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.Filter.stopped_status_property_filter)
}
inline ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter* Filter::_internal_mutable_stopped_status_property_filter() {
  if (!_internal_has_stopped_status_property_filter()) {
    clear_filter_type();
    set_has_stopped_status_property_filter();
    filter_type_.stopped_status_property_filter_ = CreateMaybeMessage< ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter >(GetArena());
  }
  return filter_type_.stopped_status_property_filter_;
}
inline ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter* Filter::mutable_stopped_status_property_filter() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Filter.stopped_status_property_filter)
  return _internal_mutable_stopped_status_property_filter();
}

// .improbable.spatialos.deployment.v1alpha1.TagsPropertyFilter tags_property_filter = 2;
inline bool Filter::_internal_has_tags_property_filter() const {
  return filter_type_case() == kTagsPropertyFilter;
}
inline bool Filter::has_tags_property_filter() const {
  return _internal_has_tags_property_filter();
}
inline void Filter::set_has_tags_property_filter() {
  _oneof_case_[0] = kTagsPropertyFilter;
}
inline void Filter::clear_tags_property_filter() {
  if (_internal_has_tags_property_filter()) {
    if (GetArena() == nullptr) {
      delete filter_type_.tags_property_filter_;
    }
    clear_has_filter_type();
  }
}
inline ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter* Filter::release_tags_property_filter() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.Filter.tags_property_filter)
  if (_internal_has_tags_property_filter()) {
    clear_has_filter_type();
      ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter* temp = filter_type_.tags_property_filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_type_.tags_property_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter& Filter::_internal_tags_property_filter() const {
  return _internal_has_tags_property_filter()
      ? *filter_type_.tags_property_filter_
      : *reinterpret_cast< ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter*>(&::improbable::spatialos::deployment::v1alpha1::_TagsPropertyFilter_default_instance_);
}
inline const ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter& Filter::tags_property_filter() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Filter.tags_property_filter)
  return _internal_tags_property_filter();
}
inline ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter* Filter::unsafe_arena_release_tags_property_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.Filter.tags_property_filter)
  if (_internal_has_tags_property_filter()) {
    clear_has_filter_type();
    ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter* temp = filter_type_.tags_property_filter_;
    filter_type_.tags_property_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Filter::unsafe_arena_set_allocated_tags_property_filter(::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter* tags_property_filter) {
  clear_filter_type();
  if (tags_property_filter) {
    set_has_tags_property_filter();
    filter_type_.tags_property_filter_ = tags_property_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.Filter.tags_property_filter)
}
inline ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter* Filter::_internal_mutable_tags_property_filter() {
  if (!_internal_has_tags_property_filter()) {
    clear_filter_type();
    set_has_tags_property_filter();
    filter_type_.tags_property_filter_ = CreateMaybeMessage< ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter >(GetArena());
  }
  return filter_type_.tags_property_filter_;
}
inline ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter* Filter::mutable_tags_property_filter() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Filter.tags_property_filter)
  return _internal_mutable_tags_property_filter();
}

// .improbable.spatialos.deployment.v1alpha1.CreateTimePropertyFilter create_time_property_filter = 3;
inline bool Filter::_internal_has_create_time_property_filter() const {
  return filter_type_case() == kCreateTimePropertyFilter;
}
inline bool Filter::has_create_time_property_filter() const {
  return _internal_has_create_time_property_filter();
}
inline void Filter::set_has_create_time_property_filter() {
  _oneof_case_[0] = kCreateTimePropertyFilter;
}
inline void Filter::clear_create_time_property_filter() {
  if (_internal_has_create_time_property_filter()) {
    if (GetArena() == nullptr) {
      delete filter_type_.create_time_property_filter_;
    }
    clear_has_filter_type();
  }
}
inline ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter* Filter::release_create_time_property_filter() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.Filter.create_time_property_filter)
  if (_internal_has_create_time_property_filter()) {
    clear_has_filter_type();
      ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter* temp = filter_type_.create_time_property_filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_type_.create_time_property_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter& Filter::_internal_create_time_property_filter() const {
  return _internal_has_create_time_property_filter()
      ? *filter_type_.create_time_property_filter_
      : *reinterpret_cast< ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter*>(&::improbable::spatialos::deployment::v1alpha1::_CreateTimePropertyFilter_default_instance_);
}
inline const ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter& Filter::create_time_property_filter() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Filter.create_time_property_filter)
  return _internal_create_time_property_filter();
}
inline ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter* Filter::unsafe_arena_release_create_time_property_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.Filter.create_time_property_filter)
  if (_internal_has_create_time_property_filter()) {
    clear_has_filter_type();
    ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter* temp = filter_type_.create_time_property_filter_;
    filter_type_.create_time_property_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Filter::unsafe_arena_set_allocated_create_time_property_filter(::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter* create_time_property_filter) {
  clear_filter_type();
  if (create_time_property_filter) {
    set_has_create_time_property_filter();
    filter_type_.create_time_property_filter_ = create_time_property_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.Filter.create_time_property_filter)
}
inline ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter* Filter::_internal_mutable_create_time_property_filter() {
  if (!_internal_has_create_time_property_filter()) {
    clear_filter_type();
    set_has_create_time_property_filter();
    filter_type_.create_time_property_filter_ = CreateMaybeMessage< ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter >(GetArena());
  }
  return filter_type_.create_time_property_filter_;
}
inline ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter* Filter::mutable_create_time_property_filter() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Filter.create_time_property_filter)
  return _internal_mutable_create_time_property_filter();
}

// .improbable.spatialos.deployment.v1alpha1.StoppedTimePropertyFilter stopped_time_property_filter = 4;
inline bool Filter::_internal_has_stopped_time_property_filter() const {
  return filter_type_case() == kStoppedTimePropertyFilter;
}
inline bool Filter::has_stopped_time_property_filter() const {
  return _internal_has_stopped_time_property_filter();
}
inline void Filter::set_has_stopped_time_property_filter() {
  _oneof_case_[0] = kStoppedTimePropertyFilter;
}
inline void Filter::clear_stopped_time_property_filter() {
  if (_internal_has_stopped_time_property_filter()) {
    if (GetArena() == nullptr) {
      delete filter_type_.stopped_time_property_filter_;
    }
    clear_has_filter_type();
  }
}
inline ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter* Filter::release_stopped_time_property_filter() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.Filter.stopped_time_property_filter)
  if (_internal_has_stopped_time_property_filter()) {
    clear_has_filter_type();
      ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter* temp = filter_type_.stopped_time_property_filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_type_.stopped_time_property_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter& Filter::_internal_stopped_time_property_filter() const {
  return _internal_has_stopped_time_property_filter()
      ? *filter_type_.stopped_time_property_filter_
      : *reinterpret_cast< ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter*>(&::improbable::spatialos::deployment::v1alpha1::_StoppedTimePropertyFilter_default_instance_);
}
inline const ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter& Filter::stopped_time_property_filter() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Filter.stopped_time_property_filter)
  return _internal_stopped_time_property_filter();
}
inline ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter* Filter::unsafe_arena_release_stopped_time_property_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.Filter.stopped_time_property_filter)
  if (_internal_has_stopped_time_property_filter()) {
    clear_has_filter_type();
    ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter* temp = filter_type_.stopped_time_property_filter_;
    filter_type_.stopped_time_property_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Filter::unsafe_arena_set_allocated_stopped_time_property_filter(::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter* stopped_time_property_filter) {
  clear_filter_type();
  if (stopped_time_property_filter) {
    set_has_stopped_time_property_filter();
    filter_type_.stopped_time_property_filter_ = stopped_time_property_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.Filter.stopped_time_property_filter)
}
inline ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter* Filter::_internal_mutable_stopped_time_property_filter() {
  if (!_internal_has_stopped_time_property_filter()) {
    clear_filter_type();
    set_has_stopped_time_property_filter();
    filter_type_.stopped_time_property_filter_ = CreateMaybeMessage< ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter >(GetArena());
  }
  return filter_type_.stopped_time_property_filter_;
}
inline ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter* Filter::mutable_stopped_time_property_filter() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Filter.stopped_time_property_filter)
  return _internal_mutable_stopped_time_property_filter();
}

// .improbable.spatialos.deployment.v1alpha1.DeploymentNamePropertyFilter deployment_name_property_filter = 5;
inline bool Filter::_internal_has_deployment_name_property_filter() const {
  return filter_type_case() == kDeploymentNamePropertyFilter;
}
inline bool Filter::has_deployment_name_property_filter() const {
  return _internal_has_deployment_name_property_filter();
}
inline void Filter::set_has_deployment_name_property_filter() {
  _oneof_case_[0] = kDeploymentNamePropertyFilter;
}
inline void Filter::clear_deployment_name_property_filter() {
  if (_internal_has_deployment_name_property_filter()) {
    if (GetArena() == nullptr) {
      delete filter_type_.deployment_name_property_filter_;
    }
    clear_has_filter_type();
  }
}
inline ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter* Filter::release_deployment_name_property_filter() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.Filter.deployment_name_property_filter)
  if (_internal_has_deployment_name_property_filter()) {
    clear_has_filter_type();
      ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter* temp = filter_type_.deployment_name_property_filter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_type_.deployment_name_property_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter& Filter::_internal_deployment_name_property_filter() const {
  return _internal_has_deployment_name_property_filter()
      ? *filter_type_.deployment_name_property_filter_
      : *reinterpret_cast< ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter*>(&::improbable::spatialos::deployment::v1alpha1::_DeploymentNamePropertyFilter_default_instance_);
}
inline const ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter& Filter::deployment_name_property_filter() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.Filter.deployment_name_property_filter)
  return _internal_deployment_name_property_filter();
}
inline ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter* Filter::unsafe_arena_release_deployment_name_property_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.Filter.deployment_name_property_filter)
  if (_internal_has_deployment_name_property_filter()) {
    clear_has_filter_type();
    ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter* temp = filter_type_.deployment_name_property_filter_;
    filter_type_.deployment_name_property_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Filter::unsafe_arena_set_allocated_deployment_name_property_filter(::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter* deployment_name_property_filter) {
  clear_filter_type();
  if (deployment_name_property_filter) {
    set_has_deployment_name_property_filter();
    filter_type_.deployment_name_property_filter_ = deployment_name_property_filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.Filter.deployment_name_property_filter)
}
inline ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter* Filter::_internal_mutable_deployment_name_property_filter() {
  if (!_internal_has_deployment_name_property_filter()) {
    clear_filter_type();
    set_has_deployment_name_property_filter();
    filter_type_.deployment_name_property_filter_ = CreateMaybeMessage< ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter >(GetArena());
  }
  return filter_type_.deployment_name_property_filter_;
}
inline ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter* Filter::mutable_deployment_name_property_filter() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.Filter.deployment_name_property_filter)
  return _internal_mutable_deployment_name_property_filter();
}

inline bool Filter::has_filter_type() const {
  return filter_type_case() != FILTER_TYPE_NOT_SET;
}
inline void Filter::clear_has_filter_type() {
  _oneof_case_[0] = FILTER_TYPE_NOT_SET;
}
inline Filter::FilterTypeCase Filter::filter_type_case() const {
  return Filter::FilterTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StoppedStatusPropertyFilter

// .improbable.spatialos.deployment.v1alpha1.StoppedStatusPropertyFilter.StoppedStatus stopped_status = 1;
inline void StoppedStatusPropertyFilter::clear_stopped_status() {
  stopped_status_ = 0;
}
inline ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter_StoppedStatus StoppedStatusPropertyFilter::_internal_stopped_status() const {
  return static_cast< ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter_StoppedStatus >(stopped_status_);
}
inline ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter_StoppedStatus StoppedStatusPropertyFilter::stopped_status() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.StoppedStatusPropertyFilter.stopped_status)
  return _internal_stopped_status();
}
inline void StoppedStatusPropertyFilter::_internal_set_stopped_status(::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter_StoppedStatus value) {
  
  stopped_status_ = value;
}
inline void StoppedStatusPropertyFilter::set_stopped_status(::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter_StoppedStatus value) {
  _internal_set_stopped_status(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.StoppedStatusPropertyFilter.stopped_status)
}

// -------------------------------------------------------------------

// DeploymentNamePropertyFilter

// .improbable.spatialos.deployment.v1alpha1.DeploymentNamePropertyFilter.Operator operator = 1;
inline void DeploymentNamePropertyFilter::clear_operator_() {
  operator__ = 0;
}
inline ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter_Operator DeploymentNamePropertyFilter::_internal_operator_() const {
  return static_cast< ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter_Operator >(operator__);
}
inline ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter_Operator DeploymentNamePropertyFilter::operator_() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.DeploymentNamePropertyFilter.operator)
  return _internal_operator_();
}
inline void DeploymentNamePropertyFilter::_internal_set_operator_(::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter_Operator value) {
  
  operator__ = value;
}
inline void DeploymentNamePropertyFilter::set_operator_(::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter_Operator value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.DeploymentNamePropertyFilter.operator)
}

// string deployment_name = 2;
inline void DeploymentNamePropertyFilter::clear_deployment_name() {
  deployment_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeploymentNamePropertyFilter::deployment_name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.DeploymentNamePropertyFilter.deployment_name)
  return _internal_deployment_name();
}
inline void DeploymentNamePropertyFilter::set_deployment_name(const std::string& value) {
  _internal_set_deployment_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.DeploymentNamePropertyFilter.deployment_name)
}
inline std::string* DeploymentNamePropertyFilter::mutable_deployment_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.DeploymentNamePropertyFilter.deployment_name)
  return _internal_mutable_deployment_name();
}
inline const std::string& DeploymentNamePropertyFilter::_internal_deployment_name() const {
  return deployment_name_.Get();
}
inline void DeploymentNamePropertyFilter::_internal_set_deployment_name(const std::string& value) {
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeploymentNamePropertyFilter::set_deployment_name(std::string&& value) {
  
  deployment_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.DeploymentNamePropertyFilter.deployment_name)
}
inline void DeploymentNamePropertyFilter::set_deployment_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.DeploymentNamePropertyFilter.deployment_name)
}
inline void DeploymentNamePropertyFilter::set_deployment_name(const char* value,
    size_t size) {
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.DeploymentNamePropertyFilter.deployment_name)
}
inline std::string* DeploymentNamePropertyFilter::_internal_mutable_deployment_name() {
  
  return deployment_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeploymentNamePropertyFilter::release_deployment_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.DeploymentNamePropertyFilter.deployment_name)
  return deployment_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeploymentNamePropertyFilter::set_allocated_deployment_name(std::string* deployment_name) {
  if (deployment_name != nullptr) {
    
  } else {
    
  }
  deployment_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deployment_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.DeploymentNamePropertyFilter.deployment_name)
}
inline std::string* DeploymentNamePropertyFilter::unsafe_arena_release_deployment_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.DeploymentNamePropertyFilter.deployment_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return deployment_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeploymentNamePropertyFilter::unsafe_arena_set_allocated_deployment_name(
    std::string* deployment_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (deployment_name != nullptr) {
    
  } else {
    
  }
  deployment_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      deployment_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.DeploymentNamePropertyFilter.deployment_name)
}

// -------------------------------------------------------------------

// TagsPropertyFilter

// .improbable.spatialos.deployment.v1alpha1.TagsPropertyFilter.Operator operator = 1;
inline void TagsPropertyFilter::clear_operator_() {
  operator__ = 0;
}
inline ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter_Operator TagsPropertyFilter::_internal_operator_() const {
  return static_cast< ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter_Operator >(operator__);
}
inline ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter_Operator TagsPropertyFilter::operator_() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.TagsPropertyFilter.operator)
  return _internal_operator_();
}
inline void TagsPropertyFilter::_internal_set_operator_(::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter_Operator value) {
  
  operator__ = value;
}
inline void TagsPropertyFilter::set_operator_(::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter_Operator value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.TagsPropertyFilter.operator)
}

// string tag = 2;
inline void TagsPropertyFilter::clear_tag() {
  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TagsPropertyFilter::tag() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.TagsPropertyFilter.tag)
  return _internal_tag();
}
inline void TagsPropertyFilter::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.TagsPropertyFilter.tag)
}
inline std::string* TagsPropertyFilter::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.TagsPropertyFilter.tag)
  return _internal_mutable_tag();
}
inline const std::string& TagsPropertyFilter::_internal_tag() const {
  return tag_.Get();
}
inline void TagsPropertyFilter::_internal_set_tag(const std::string& value) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TagsPropertyFilter::set_tag(std::string&& value) {
  
  tag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.deployment.v1alpha1.TagsPropertyFilter.tag)
}
inline void TagsPropertyFilter::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.deployment.v1alpha1.TagsPropertyFilter.tag)
}
inline void TagsPropertyFilter::set_tag(const char* value,
    size_t size) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.deployment.v1alpha1.TagsPropertyFilter.tag)
}
inline std::string* TagsPropertyFilter::_internal_mutable_tag() {
  
  return tag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TagsPropertyFilter::release_tag() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.TagsPropertyFilter.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TagsPropertyFilter::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.TagsPropertyFilter.tag)
}
inline std::string* TagsPropertyFilter::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.deployment.v1alpha1.TagsPropertyFilter.tag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TagsPropertyFilter::unsafe_arena_set_allocated_tag(
    std::string* tag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.TagsPropertyFilter.tag)
}

// -------------------------------------------------------------------

// CreateTimePropertyFilter

// .improbable.spatialos.deployment.v1alpha1.CreateTimePropertyFilter.Operator operator = 1;
inline void CreateTimePropertyFilter::clear_operator_() {
  operator__ = 0;
}
inline ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter_Operator CreateTimePropertyFilter::_internal_operator_() const {
  return static_cast< ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter_Operator >(operator__);
}
inline ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter_Operator CreateTimePropertyFilter::operator_() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.CreateTimePropertyFilter.operator)
  return _internal_operator_();
}
inline void CreateTimePropertyFilter::_internal_set_operator_(::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter_Operator value) {
  
  operator__ = value;
}
inline void CreateTimePropertyFilter::set_operator_(::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter_Operator value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.CreateTimePropertyFilter.operator)
}

// .google.protobuf.Timestamp create_time = 2;
inline bool CreateTimePropertyFilter::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool CreateTimePropertyFilter::has_create_time() const {
  return _internal_has_create_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CreateTimePropertyFilter::_internal_create_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CreateTimePropertyFilter::create_time() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.CreateTimePropertyFilter.create_time)
  return _internal_create_time();
}
inline void CreateTimePropertyFilter::unsafe_arena_set_allocated_create_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.CreateTimePropertyFilter.create_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateTimePropertyFilter::release_create_time() {
  auto temp = unsafe_arena_release_create_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateTimePropertyFilter::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.CreateTimePropertyFilter.create_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateTimePropertyFilter::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_time_ = p;
  }
  return create_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateTimePropertyFilter::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.CreateTimePropertyFilter.create_time)
  return _internal_mutable_create_time();
}
inline void CreateTimePropertyFilter::set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.CreateTimePropertyFilter.create_time)
}

// -------------------------------------------------------------------

// StoppedTimePropertyFilter

// .improbable.spatialos.deployment.v1alpha1.StoppedTimePropertyFilter.Operator operator = 1;
inline void StoppedTimePropertyFilter::clear_operator_() {
  operator__ = 0;
}
inline ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter_Operator StoppedTimePropertyFilter::_internal_operator_() const {
  return static_cast< ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter_Operator >(operator__);
}
inline ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter_Operator StoppedTimePropertyFilter::operator_() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.StoppedTimePropertyFilter.operator)
  return _internal_operator_();
}
inline void StoppedTimePropertyFilter::_internal_set_operator_(::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter_Operator value) {
  
  operator__ = value;
}
inline void StoppedTimePropertyFilter::set_operator_(::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter_Operator value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.deployment.v1alpha1.StoppedTimePropertyFilter.operator)
}

// .google.protobuf.Timestamp stopped_time = 2;
inline bool StoppedTimePropertyFilter::_internal_has_stopped_time() const {
  return this != internal_default_instance() && stopped_time_ != nullptr;
}
inline bool StoppedTimePropertyFilter::has_stopped_time() const {
  return _internal_has_stopped_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StoppedTimePropertyFilter::_internal_stopped_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = stopped_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StoppedTimePropertyFilter::stopped_time() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.deployment.v1alpha1.StoppedTimePropertyFilter.stopped_time)
  return _internal_stopped_time();
}
inline void StoppedTimePropertyFilter::unsafe_arena_set_allocated_stopped_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* stopped_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stopped_time_);
  }
  stopped_time_ = stopped_time;
  if (stopped_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.deployment.v1alpha1.StoppedTimePropertyFilter.stopped_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StoppedTimePropertyFilter::release_stopped_time() {
  auto temp = unsafe_arena_release_stopped_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StoppedTimePropertyFilter::unsafe_arena_release_stopped_time() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.deployment.v1alpha1.StoppedTimePropertyFilter.stopped_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = stopped_time_;
  stopped_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StoppedTimePropertyFilter::_internal_mutable_stopped_time() {
  
  if (stopped_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    stopped_time_ = p;
  }
  return stopped_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StoppedTimePropertyFilter::mutable_stopped_time() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.deployment.v1alpha1.StoppedTimePropertyFilter.stopped_time)
  return _internal_mutable_stopped_time();
}
inline void StoppedTimePropertyFilter::set_allocated_stopped_time(PROTOBUF_NAMESPACE_ID::Timestamp* stopped_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stopped_time_);
  }
  if (stopped_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stopped_time)->GetArena();
    if (message_arena != submessage_arena) {
      stopped_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stopped_time, submessage_arena);
    }
    
  } else {
    
  }
  stopped_time_ = stopped_time;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.deployment.v1alpha1.StoppedTimePropertyFilter.stopped_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace deployment
}  // namespace spatialos
}  // namespace improbable

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::improbable::spatialos::deployment::v1alpha1::Deployment_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::improbable::spatialos::deployment::v1alpha1::Deployment_Status>() {
  return ::improbable::spatialos::deployment::v1alpha1::Deployment_Status_descriptor();
}
template <> struct is_proto_enum< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest_DeploymentStoppedStatusFilter> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest_DeploymentStoppedStatusFilter>() {
  return ::improbable::spatialos::deployment::v1alpha1::ListDeploymentsRequest_DeploymentStoppedStatusFilter_descriptor();
}
template <> struct is_proto_enum< ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter_StoppedStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter_StoppedStatus>() {
  return ::improbable::spatialos::deployment::v1alpha1::StoppedStatusPropertyFilter_StoppedStatus_descriptor();
}
template <> struct is_proto_enum< ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter_Operator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter_Operator>() {
  return ::improbable::spatialos::deployment::v1alpha1::DeploymentNamePropertyFilter_Operator_descriptor();
}
template <> struct is_proto_enum< ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter_Operator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter_Operator>() {
  return ::improbable::spatialos::deployment::v1alpha1::TagsPropertyFilter_Operator_descriptor();
}
template <> struct is_proto_enum< ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter_Operator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter_Operator>() {
  return ::improbable::spatialos::deployment::v1alpha1::CreateTimePropertyFilter_Operator_descriptor();
}
template <> struct is_proto_enum< ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter_Operator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter_Operator>() {
  return ::improbable::spatialos::deployment::v1alpha1::StoppedTimePropertyFilter_Operator_descriptor();
}
template <> struct is_proto_enum< ::improbable::spatialos::deployment::v1alpha1::ViewType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::improbable::spatialos::deployment::v1alpha1::ViewType>() {
  return ::improbable::spatialos::deployment::v1alpha1::ViewType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_improbable_2fspatialos_2fdeployment_2fv1alpha1_2fdeployment_2eproto
