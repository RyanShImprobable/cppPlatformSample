// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: improbable/spatialos/serviceaccount/v1alpha1/serviceaccount.proto
// Original file comments:
// Protos defining the service account API.
//
#ifndef GRPC_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto__INCLUDED
#define GRPC_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto__INCLUDED

#include "improbable/spatialos/serviceaccount/v1alpha1/serviceaccount.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace improbable {
namespace spatialos {
namespace serviceaccount {
namespace v1alpha1 {

// ServiceAccountService provides methods for managing service accounts.
class ServiceAccountService final {
 public:
  static constexpr char const* service_full_name() {
    return "improbable.spatialos.serviceaccount.v1alpha1.ServiceAccountService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest& request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>> AsyncCreateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>>(AsyncCreateServiceAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>> PrepareAsyncCreateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>>(PrepareAsyncCreateServiceAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status ListServiceAccounts(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest& request, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse>> AsyncListServiceAccounts(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse>>(AsyncListServiceAccountsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse>> PrepareAsyncListServiceAccounts(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse>>(PrepareAsyncListServiceAccountsRaw(context, request, cq));
    }
    // !!! WARNING !!!
    // When this API is moved to beta/stable please use a
    // standard UpdateServiceAccountResponse struct.
    // !!! WARNING !!!
    virtual ::grpc::Status UpdateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest& request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>> AsyncUpdateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>>(AsyncUpdateServiceAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>> PrepareAsyncUpdateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>>(PrepareAsyncUpdateServiceAccountRaw(context, request, cq));
    }
    // !!! WARNING !!!
    // When this API is moved to beta/stable please add a
    // (potentially empty) standard DeleteServiceAccountResponse struct.
    // !!! WARNING !!!
    virtual ::grpc::Status DeleteServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteServiceAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteServiceAccountRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateServiceAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateServiceAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateServiceAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ListServiceAccounts(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListServiceAccounts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListServiceAccounts(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListServiceAccounts(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListServiceAccounts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListServiceAccounts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // !!! WARNING !!!
      // When this API is moved to beta/stable please use a
      // standard UpdateServiceAccountResponse struct.
      // !!! WARNING !!!
      virtual void UpdateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateServiceAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateServiceAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateServiceAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // !!! WARNING !!!
      // When this API is moved to beta/stable please add a
      // (potentially empty) standard DeleteServiceAccountResponse struct.
      // !!! WARNING !!!
      virtual void DeleteServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteServiceAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteServiceAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteServiceAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>* AsyncCreateServiceAccountRaw(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>* PrepareAsyncCreateServiceAccountRaw(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse>* AsyncListServiceAccountsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse>* PrepareAsyncListServiceAccountsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>* AsyncUpdateServiceAccountRaw(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>* PrepareAsyncUpdateServiceAccountRaw(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteServiceAccountRaw(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteServiceAccountRaw(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest& request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>> AsyncCreateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>>(AsyncCreateServiceAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>> PrepareAsyncCreateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>>(PrepareAsyncCreateServiceAccountRaw(context, request, cq));
    }
    ::grpc::Status ListServiceAccounts(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest& request, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse>> AsyncListServiceAccounts(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse>>(AsyncListServiceAccountsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse>> PrepareAsyncListServiceAccounts(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse>>(PrepareAsyncListServiceAccountsRaw(context, request, cq));
    }
    ::grpc::Status UpdateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest& request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>> AsyncUpdateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>>(AsyncUpdateServiceAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>> PrepareAsyncUpdateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>>(PrepareAsyncUpdateServiceAccountRaw(context, request, cq));
    }
    ::grpc::Status DeleteServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteServiceAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteServiceAccountRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, std::function<void(::grpc::Status)>) override;
      void CreateServiceAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateServiceAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateServiceAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListServiceAccounts(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListServiceAccounts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListServiceAccounts(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListServiceAccounts(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListServiceAccounts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListServiceAccounts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, std::function<void(::grpc::Status)>) override;
      void UpdateServiceAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateServiceAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateServiceAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteServiceAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteServiceAccount(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteServiceAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteServiceAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>* AsyncCreateServiceAccountRaw(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>* PrepareAsyncCreateServiceAccountRaw(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse>* AsyncListServiceAccountsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse>* PrepareAsyncListServiceAccountsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>* AsyncUpdateServiceAccountRaw(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>* PrepareAsyncUpdateServiceAccountRaw(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteServiceAccountRaw(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteServiceAccountRaw(::grpc::ClientContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateServiceAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_ListServiceAccounts_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateServiceAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteServiceAccount_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateServiceAccount(::grpc::ServerContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response);
    virtual ::grpc::Status ListServiceAccounts(::grpc::ServerContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* response);
    // !!! WARNING !!!
    // When this API is moved to beta/stable please use a
    // standard UpdateServiceAccountResponse struct.
    // !!! WARNING !!!
    virtual ::grpc::Status UpdateServiceAccount(::grpc::ServerContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response);
    // !!! WARNING !!!
    // When this API is moved to beta/stable please add a
    // (potentially empty) standard DeleteServiceAccountResponse struct.
    // !!! WARNING !!!
    virtual ::grpc::Status DeleteServiceAccount(::grpc::ServerContext* context, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateServiceAccount() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceAccount(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateServiceAccount(::grpc::ServerContext* context, ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest* request, ::grpc::ServerAsyncResponseWriter< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListServiceAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListServiceAccounts() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListServiceAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceAccounts(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListServiceAccounts(::grpc::ServerContext* context, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest* request, ::grpc::ServerAsyncResponseWriter< ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateServiceAccount() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServiceAccount(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateServiceAccount(::grpc::ServerContext* context, ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest* request, ::grpc::ServerAsyncResponseWriter< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteServiceAccount() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServiceAccount(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteServiceAccount(::grpc::ServerContext* context, ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateServiceAccount<WithAsyncMethod_ListServiceAccounts<WithAsyncMethod_UpdateServiceAccount<WithAsyncMethod_DeleteServiceAccount<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateServiceAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response) { return this->CreateServiceAccount(context, request, response); }));}
    void SetMessageAllocatorFor_CreateServiceAccount(
        ::grpc::experimental::MessageAllocator< ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceAccount(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateServiceAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateServiceAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListServiceAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListServiceAccounts() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* response) { return this->ListServiceAccounts(context, request, response); }));}
    void SetMessageAllocatorFor_ListServiceAccounts(
        ::grpc::experimental::MessageAllocator< ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListServiceAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceAccounts(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListServiceAccounts(
      ::grpc::CallbackServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListServiceAccounts(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateServiceAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest* request, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* response) { return this->UpdateServiceAccount(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateServiceAccount(
        ::grpc::experimental::MessageAllocator< ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServiceAccount(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateServiceAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateServiceAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteServiceAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest* request, ::google::protobuf::Empty* response) { return this->DeleteServiceAccount(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteServiceAccount(
        ::grpc::experimental::MessageAllocator< ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServiceAccount(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteServiceAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteServiceAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateServiceAccount<ExperimentalWithCallbackMethod_ListServiceAccounts<ExperimentalWithCallbackMethod_UpdateServiceAccount<ExperimentalWithCallbackMethod_DeleteServiceAccount<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateServiceAccount<ExperimentalWithCallbackMethod_ListServiceAccounts<ExperimentalWithCallbackMethod_UpdateServiceAccount<ExperimentalWithCallbackMethod_DeleteServiceAccount<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateServiceAccount() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceAccount(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListServiceAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListServiceAccounts() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListServiceAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceAccounts(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateServiceAccount() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServiceAccount(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteServiceAccount() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServiceAccount(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateServiceAccount() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceAccount(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateServiceAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListServiceAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListServiceAccounts() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListServiceAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceAccounts(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListServiceAccounts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateServiceAccount() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServiceAccount(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateServiceAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteServiceAccount() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServiceAccount(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteServiceAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateServiceAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateServiceAccount(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateServiceAccount(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateServiceAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateServiceAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListServiceAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListServiceAccounts() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListServiceAccounts(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListServiceAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListServiceAccounts(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListServiceAccounts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListServiceAccounts(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateServiceAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateServiceAccount(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateServiceAccount(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateServiceAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateServiceAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteServiceAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteServiceAccount(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteServiceAccount(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteServiceAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteServiceAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateServiceAccount() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>(std::bind(&WithStreamedUnaryMethod_CreateServiceAccount<BaseClass>::StreamedCreateServiceAccount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateServiceAccount(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateServiceAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest,::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListServiceAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListServiceAccounts() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse>(std::bind(&WithStreamedUnaryMethod_ListServiceAccounts<BaseClass>::StreamedListServiceAccounts, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListServiceAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListServiceAccounts(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListServiceAccounts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest,::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateServiceAccount() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>(std::bind(&WithStreamedUnaryMethod_UpdateServiceAccount<BaseClass>::StreamedUpdateServiceAccount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateServiceAccount(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest* /*request*/, ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateServiceAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest,::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteServiceAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteServiceAccount() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteServiceAccount<BaseClass>::StreamedDeleteServiceAccount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteServiceAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteServiceAccount(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteServiceAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateServiceAccount<WithStreamedUnaryMethod_ListServiceAccounts<WithStreamedUnaryMethod_UpdateServiceAccount<WithStreamedUnaryMethod_DeleteServiceAccount<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateServiceAccount<WithStreamedUnaryMethod_ListServiceAccounts<WithStreamedUnaryMethod_UpdateServiceAccount<WithStreamedUnaryMethod_DeleteServiceAccount<Service > > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace serviceaccount
}  // namespace spatialos
}  // namespace improbable


#endif  // GRPC_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto__INCLUDED
