// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improbable/spatialos/serviceaccount/v1alpha1/serviceaccount.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "github.com/mwitkow/go-proto-validators/validator.pb.h"
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto;
namespace improbable {
namespace spatialos {
namespace serviceaccount {
namespace v1alpha1 {
class CreateServiceAccountRequest;
class CreateServiceAccountRequestDefaultTypeInternal;
extern CreateServiceAccountRequestDefaultTypeInternal _CreateServiceAccountRequest_default_instance_;
class DeleteServiceAccountRequest;
class DeleteServiceAccountRequestDefaultTypeInternal;
extern DeleteServiceAccountRequestDefaultTypeInternal _DeleteServiceAccountRequest_default_instance_;
class ListServiceAccountsRequest;
class ListServiceAccountsRequestDefaultTypeInternal;
extern ListServiceAccountsRequestDefaultTypeInternal _ListServiceAccountsRequest_default_instance_;
class ListServiceAccountsResponse;
class ListServiceAccountsResponseDefaultTypeInternal;
extern ListServiceAccountsResponseDefaultTypeInternal _ListServiceAccountsResponse_default_instance_;
class Permission;
class PermissionDefaultTypeInternal;
extern PermissionDefaultTypeInternal _Permission_default_instance_;
class ServiceAccount;
class ServiceAccountDefaultTypeInternal;
extern ServiceAccountDefaultTypeInternal _ServiceAccount_default_instance_;
class UpdateServiceAccountRequest;
class UpdateServiceAccountRequestDefaultTypeInternal;
extern UpdateServiceAccountRequestDefaultTypeInternal _UpdateServiceAccountRequest_default_instance_;
}  // namespace v1alpha1
}  // namespace serviceaccount
}  // namespace spatialos
}  // namespace improbable
PROTOBUF_NAMESPACE_OPEN
template<> ::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest* Arena::CreateMaybeMessage<::improbable::spatialos::serviceaccount::v1alpha1::CreateServiceAccountRequest>(Arena*);
template<> ::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest* Arena::CreateMaybeMessage<::improbable::spatialos::serviceaccount::v1alpha1::DeleteServiceAccountRequest>(Arena*);
template<> ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest* Arena::CreateMaybeMessage<::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsRequest>(Arena*);
template<> ::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse* Arena::CreateMaybeMessage<::improbable::spatialos::serviceaccount::v1alpha1::ListServiceAccountsResponse>(Arena*);
template<> ::improbable::spatialos::serviceaccount::v1alpha1::Permission* Arena::CreateMaybeMessage<::improbable::spatialos::serviceaccount::v1alpha1::Permission>(Arena*);
template<> ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* Arena::CreateMaybeMessage<::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount>(Arena*);
template<> ::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest* Arena::CreateMaybeMessage<::improbable::spatialos::serviceaccount::v1alpha1::UpdateServiceAccountRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace improbable {
namespace spatialos {
namespace serviceaccount {
namespace v1alpha1 {

enum Permission_Verb : int {
  Permission_Verb_UNKNOWN_VERB = 0,
  Permission_Verb_READ = 1,
  Permission_Verb_WRITE = 2,
  Permission_Verb_GRANT = 3,
  Permission_Verb_Permission_Verb_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Permission_Verb_Permission_Verb_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Permission_Verb_IsValid(int value);
constexpr Permission_Verb Permission_Verb_Verb_MIN = Permission_Verb_UNKNOWN_VERB;
constexpr Permission_Verb Permission_Verb_Verb_MAX = Permission_Verb_GRANT;
constexpr int Permission_Verb_Verb_ARRAYSIZE = Permission_Verb_Verb_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Permission_Verb_descriptor();
template<typename T>
inline const std::string& Permission_Verb_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Permission_Verb>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Permission_Verb_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Permission_Verb_descriptor(), enum_t_value);
}
inline bool Permission_Verb_Parse(
    const std::string& name, Permission_Verb* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Permission_Verb>(
    Permission_Verb_descriptor(), name, value);
}
// ===================================================================

class Permission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.serviceaccount.v1alpha1.Permission) */ {
 public:
  inline Permission() : Permission(nullptr) {};
  virtual ~Permission();

  Permission(const Permission& from);
  Permission(Permission&& from) noexcept
    : Permission() {
    *this = ::std::move(from);
  }

  inline Permission& operator=(const Permission& from) {
    CopyFrom(from);
    return *this;
  }
  inline Permission& operator=(Permission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Permission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Permission* internal_default_instance() {
    return reinterpret_cast<const Permission*>(
               &_Permission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Permission& a, Permission& b) {
    a.Swap(&b);
  }
  inline void Swap(Permission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Permission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Permission* New() const final {
    return CreateMaybeMessage<Permission>(nullptr);
  }

  Permission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Permission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Permission& from);
  void MergeFrom(const Permission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Permission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.serviceaccount.v1alpha1.Permission";
  }
  protected:
  explicit Permission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Permission_Verb Verb;
  static constexpr Verb UNKNOWN_VERB =
    Permission_Verb_UNKNOWN_VERB;
  static constexpr Verb READ =
    Permission_Verb_READ;
  static constexpr Verb WRITE =
    Permission_Verb_WRITE;
  static constexpr Verb GRANT =
    Permission_Verb_GRANT;
  static inline bool Verb_IsValid(int value) {
    return Permission_Verb_IsValid(value);
  }
  static constexpr Verb Verb_MIN =
    Permission_Verb_Verb_MIN;
  static constexpr Verb Verb_MAX =
    Permission_Verb_Verb_MAX;
  static constexpr int Verb_ARRAYSIZE =
    Permission_Verb_Verb_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Verb_descriptor() {
    return Permission_Verb_descriptor();
  }
  template<typename T>
  static inline const std::string& Verb_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Verb>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Verb_Name.");
    return Permission_Verb_Name(enum_t_value);
  }
  static inline bool Verb_Parse(const std::string& name,
      Verb* value) {
    return Permission_Verb_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVerbsFieldNumber = 1,
    kPartsFieldNumber = 2,
  };
  // repeated .improbable.spatialos.serviceaccount.v1alpha1.Permission.Verb verbs = 1;
  int verbs_size() const;
  private:
  int _internal_verbs_size() const;
  public:
  void clear_verbs();
  private:
  ::improbable::spatialos::serviceaccount::v1alpha1::Permission_Verb _internal_verbs(int index) const;
  void _internal_add_verbs(::improbable::spatialos::serviceaccount::v1alpha1::Permission_Verb value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_verbs();
  public:
  ::improbable::spatialos::serviceaccount::v1alpha1::Permission_Verb verbs(int index) const;
  void set_verbs(int index, ::improbable::spatialos::serviceaccount::v1alpha1::Permission_Verb value);
  void add_verbs(::improbable::spatialos::serviceaccount::v1alpha1::Permission_Verb value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& verbs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_verbs();

  // repeated string parts = 2 [(.validator.field) = {
  int parts_size() const;
  private:
  int _internal_parts_size() const;
  public:
  void clear_parts();
  const std::string& parts(int index) const;
  std::string* mutable_parts(int index);
  void set_parts(int index, const std::string& value);
  void set_parts(int index, std::string&& value);
  void set_parts(int index, const char* value);
  void set_parts(int index, const char* value, size_t size);
  std::string* add_parts();
  void add_parts(const std::string& value);
  void add_parts(std::string&& value);
  void add_parts(const char* value);
  void add_parts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& parts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_parts();
  private:
  const std::string& _internal_parts(int index) const;
  std::string* _internal_add_parts();
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.serviceaccount.v1alpha1.Permission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> verbs_;
  mutable std::atomic<int> _verbs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> parts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto;
};
// -------------------------------------------------------------------

class ServiceAccount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount) */ {
 public:
  inline ServiceAccount() : ServiceAccount(nullptr) {};
  virtual ~ServiceAccount();

  ServiceAccount(const ServiceAccount& from);
  ServiceAccount(ServiceAccount&& from) noexcept
    : ServiceAccount() {
    *this = ::std::move(from);
  }

  inline ServiceAccount& operator=(const ServiceAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceAccount& operator=(ServiceAccount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceAccount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceAccount* internal_default_instance() {
    return reinterpret_cast<const ServiceAccount*>(
               &_ServiceAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServiceAccount& a, ServiceAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceAccount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceAccount* New() const final {
    return CreateMaybeMessage<ServiceAccount>(nullptr);
  }

  ServiceAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceAccount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceAccount& from);
  void MergeFrom(const ServiceAccount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceAccount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount";
  }
  protected:
  explicit ServiceAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 3,
    kNameFieldNumber = 2,
    kTokenFieldNumber = 4,
    kProjectNameFieldNumber = 7,
    kCreationTimeFieldNumber = 5,
    kExpirationTimeFieldNumber = 6,
    kIdFieldNumber = 1,
  };
  // repeated .improbable.spatialos.serviceaccount.v1alpha1.Permission permissions = 3;
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  ::improbable::spatialos::serviceaccount::v1alpha1::Permission* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::serviceaccount::v1alpha1::Permission >*
      mutable_permissions();
  private:
  const ::improbable::spatialos::serviceaccount::v1alpha1::Permission& _internal_permissions(int index) const;
  ::improbable::spatialos::serviceaccount::v1alpha1::Permission* _internal_add_permissions();
  public:
  const ::improbable::spatialos::serviceaccount::v1alpha1::Permission& permissions(int index) const;
  ::improbable::spatialos::serviceaccount::v1alpha1::Permission* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::serviceaccount::v1alpha1::Permission >&
      permissions() const;

  // string name = 2 [(.validator.field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string token = 4;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string project_name = 7 [(.validator.field) = {
  void clear_project_name();
  const std::string& project_name() const;
  void set_project_name(const std::string& value);
  void set_project_name(std::string&& value);
  void set_project_name(const char* value);
  void set_project_name(const char* value, size_t size);
  std::string* mutable_project_name();
  std::string* release_project_name();
  void set_allocated_project_name(std::string* project_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_project_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project_name(
      std::string* project_name);
  private:
  const std::string& _internal_project_name() const;
  void _internal_set_project_name(const std::string& value);
  std::string* _internal_mutable_project_name();
  public:

  // .google.protobuf.Timestamp creation_time = 5;
  bool has_creation_time() const;
  private:
  bool _internal_has_creation_time() const;
  public:
  void clear_creation_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& creation_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_creation_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_creation_time();
  void set_allocated_creation_time(PROTOBUF_NAMESPACE_ID::Timestamp* creation_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_creation_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_creation_time();
  public:
  void unsafe_arena_set_allocated_creation_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* creation_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_creation_time();

  // .google.protobuf.Timestamp expiration_time = 6;
  bool has_expiration_time() const;
  private:
  bool _internal_has_expiration_time() const;
  public:
  void clear_expiration_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expiration_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expiration_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiration_time();
  void set_allocated_expiration_time(PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiration_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiration_time();
  public:
  void unsafe_arena_set_allocated_expiration_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiration_time();

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::serviceaccount::v1alpha1::Permission > permissions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* creation_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto;
};
// -------------------------------------------------------------------

class CreateServiceAccountRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest) */ {
 public:
  inline CreateServiceAccountRequest() : CreateServiceAccountRequest(nullptr) {};
  virtual ~CreateServiceAccountRequest();

  CreateServiceAccountRequest(const CreateServiceAccountRequest& from);
  CreateServiceAccountRequest(CreateServiceAccountRequest&& from) noexcept
    : CreateServiceAccountRequest() {
    *this = ::std::move(from);
  }

  inline CreateServiceAccountRequest& operator=(const CreateServiceAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateServiceAccountRequest& operator=(CreateServiceAccountRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateServiceAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateServiceAccountRequest* internal_default_instance() {
    return reinterpret_cast<const CreateServiceAccountRequest*>(
               &_CreateServiceAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateServiceAccountRequest& a, CreateServiceAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateServiceAccountRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateServiceAccountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateServiceAccountRequest* New() const final {
    return CreateMaybeMessage<CreateServiceAccountRequest>(nullptr);
  }

  CreateServiceAccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateServiceAccountRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateServiceAccountRequest& from);
  void MergeFrom(const CreateServiceAccountRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateServiceAccountRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest";
  }
  protected:
  explicit CreateServiceAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 4,
    kNameFieldNumber = 1,
    kProjectNameFieldNumber = 3,
    kLifetimeFieldNumber = 2,
  };
  // repeated .improbable.spatialos.serviceaccount.v1alpha1.Permission permissions = 4 [(.google.api.field_behavior) = REQUIRED, (.validator.field) = {
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  ::improbable::spatialos::serviceaccount::v1alpha1::Permission* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::serviceaccount::v1alpha1::Permission >*
      mutable_permissions();
  private:
  const ::improbable::spatialos::serviceaccount::v1alpha1::Permission& _internal_permissions(int index) const;
  ::improbable::spatialos::serviceaccount::v1alpha1::Permission* _internal_add_permissions();
  public:
  const ::improbable::spatialos::serviceaccount::v1alpha1::Permission& permissions(int index) const;
  ::improbable::spatialos::serviceaccount::v1alpha1::Permission* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::serviceaccount::v1alpha1::Permission >&
      permissions() const;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.validator.field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string project_name = 3 [(.google.api.field_behavior) = REQUIRED, (.validator.field) = {
  void clear_project_name();
  const std::string& project_name() const;
  void set_project_name(const std::string& value);
  void set_project_name(std::string&& value);
  void set_project_name(const char* value);
  void set_project_name(const char* value, size_t size);
  std::string* mutable_project_name();
  std::string* release_project_name();
  void set_allocated_project_name(std::string* project_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_project_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project_name(
      std::string* project_name);
  private:
  const std::string& _internal_project_name() const;
  void _internal_set_project_name(const std::string& value);
  std::string* _internal_mutable_project_name();
  public:

  // .google.protobuf.Duration lifetime = 2;
  bool has_lifetime() const;
  private:
  bool _internal_has_lifetime() const;
  public:
  void clear_lifetime();
  const PROTOBUF_NAMESPACE_ID::Duration& lifetime() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_lifetime();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_lifetime();
  void set_allocated_lifetime(PROTOBUF_NAMESPACE_ID::Duration* lifetime);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_lifetime() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_lifetime();
  public:
  void unsafe_arena_set_allocated_lifetime(
      PROTOBUF_NAMESPACE_ID::Duration* lifetime);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_lifetime();

  // @@protoc_insertion_point(class_scope:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::serviceaccount::v1alpha1::Permission > permissions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_name_;
  PROTOBUF_NAMESPACE_ID::Duration* lifetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto;
};
// -------------------------------------------------------------------

class ListServiceAccountsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest) */ {
 public:
  inline ListServiceAccountsRequest() : ListServiceAccountsRequest(nullptr) {};
  virtual ~ListServiceAccountsRequest();

  ListServiceAccountsRequest(const ListServiceAccountsRequest& from);
  ListServiceAccountsRequest(ListServiceAccountsRequest&& from) noexcept
    : ListServiceAccountsRequest() {
    *this = ::std::move(from);
  }

  inline ListServiceAccountsRequest& operator=(const ListServiceAccountsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListServiceAccountsRequest& operator=(ListServiceAccountsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListServiceAccountsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListServiceAccountsRequest* internal_default_instance() {
    return reinterpret_cast<const ListServiceAccountsRequest*>(
               &_ListServiceAccountsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListServiceAccountsRequest& a, ListServiceAccountsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListServiceAccountsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListServiceAccountsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListServiceAccountsRequest* New() const final {
    return CreateMaybeMessage<ListServiceAccountsRequest>(nullptr);
  }

  ListServiceAccountsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListServiceAccountsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListServiceAccountsRequest& from);
  void MergeFrom(const ListServiceAccountsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListServiceAccountsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest";
  }
  protected:
  explicit ListServiceAccountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageTokenFieldNumber = 2,
    kProjectNameFieldNumber = 3,
    kPageSizeFieldNumber = 1,
  };
  // string page_token = 2;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string project_name = 3 [(.google.api.field_behavior) = REQUIRED, (.validator.field) = {
  void clear_project_name();
  const std::string& project_name() const;
  void set_project_name(const std::string& value);
  void set_project_name(std::string&& value);
  void set_project_name(const char* value);
  void set_project_name(const char* value, size_t size);
  std::string* mutable_project_name();
  std::string* release_project_name();
  void set_allocated_project_name(std::string* project_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_project_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project_name(
      std::string* project_name);
  private:
  const std::string& _internal_project_name() const;
  void _internal_set_project_name(const std::string& value);
  std::string* _internal_mutable_project_name();
  public:

  // int32 page_size = 1 [(.validator.field) = {
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto;
};
// -------------------------------------------------------------------

class ListServiceAccountsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsResponse) */ {
 public:
  inline ListServiceAccountsResponse() : ListServiceAccountsResponse(nullptr) {};
  virtual ~ListServiceAccountsResponse();

  ListServiceAccountsResponse(const ListServiceAccountsResponse& from);
  ListServiceAccountsResponse(ListServiceAccountsResponse&& from) noexcept
    : ListServiceAccountsResponse() {
    *this = ::std::move(from);
  }

  inline ListServiceAccountsResponse& operator=(const ListServiceAccountsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListServiceAccountsResponse& operator=(ListServiceAccountsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListServiceAccountsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListServiceAccountsResponse* internal_default_instance() {
    return reinterpret_cast<const ListServiceAccountsResponse*>(
               &_ListServiceAccountsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListServiceAccountsResponse& a, ListServiceAccountsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListServiceAccountsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListServiceAccountsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListServiceAccountsResponse* New() const final {
    return CreateMaybeMessage<ListServiceAccountsResponse>(nullptr);
  }

  ListServiceAccountsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListServiceAccountsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListServiceAccountsResponse& from);
  void MergeFrom(const ListServiceAccountsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListServiceAccountsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsResponse";
  }
  protected:
  explicit ListServiceAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceAccountsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount service_accounts = 1;
  int service_accounts_size() const;
  private:
  int _internal_service_accounts_size() const;
  public:
  void clear_service_accounts();
  ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* mutable_service_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount >*
      mutable_service_accounts();
  private:
  const ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount& _internal_service_accounts(int index) const;
  ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* _internal_add_service_accounts();
  public:
  const ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount& service_accounts(int index) const;
  ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* add_service_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount >&
      service_accounts() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_next_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount > service_accounts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto;
};
// -------------------------------------------------------------------

class UpdateServiceAccountRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.serviceaccount.v1alpha1.UpdateServiceAccountRequest) */ {
 public:
  inline UpdateServiceAccountRequest() : UpdateServiceAccountRequest(nullptr) {};
  virtual ~UpdateServiceAccountRequest();

  UpdateServiceAccountRequest(const UpdateServiceAccountRequest& from);
  UpdateServiceAccountRequest(UpdateServiceAccountRequest&& from) noexcept
    : UpdateServiceAccountRequest() {
    *this = ::std::move(from);
  }

  inline UpdateServiceAccountRequest& operator=(const UpdateServiceAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateServiceAccountRequest& operator=(UpdateServiceAccountRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateServiceAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateServiceAccountRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateServiceAccountRequest*>(
               &_UpdateServiceAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateServiceAccountRequest& a, UpdateServiceAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateServiceAccountRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateServiceAccountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateServiceAccountRequest* New() const final {
    return CreateMaybeMessage<UpdateServiceAccountRequest>(nullptr);
  }

  UpdateServiceAccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateServiceAccountRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateServiceAccountRequest& from);
  void MergeFrom(const UpdateServiceAccountRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateServiceAccountRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.serviceaccount.v1alpha1.UpdateServiceAccountRequest";
  }
  protected:
  explicit UpdateServiceAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 2,
    kExpirationTimeFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .improbable.spatialos.serviceaccount.v1alpha1.Permission permissions = 2;
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  ::improbable::spatialos::serviceaccount::v1alpha1::Permission* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::serviceaccount::v1alpha1::Permission >*
      mutable_permissions();
  private:
  const ::improbable::spatialos::serviceaccount::v1alpha1::Permission& _internal_permissions(int index) const;
  ::improbable::spatialos::serviceaccount::v1alpha1::Permission* _internal_add_permissions();
  public:
  const ::improbable::spatialos::serviceaccount::v1alpha1::Permission& permissions(int index) const;
  ::improbable::spatialos::serviceaccount::v1alpha1::Permission* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::serviceaccount::v1alpha1::Permission >&
      permissions() const;

  // .google.protobuf.Timestamp expiration_time = 3;
  bool has_expiration_time() const;
  private:
  bool _internal_has_expiration_time() const;
  public:
  void clear_expiration_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expiration_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expiration_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiration_time();
  void set_allocated_expiration_time(PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiration_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiration_time();
  public:
  void unsafe_arena_set_allocated_expiration_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiration_time();

  // int64 id = 1 [(.google.api.field_behavior) = REQUIRED, (.validator.field) = {
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.serviceaccount.v1alpha1.UpdateServiceAccountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::serviceaccount::v1alpha1::Permission > permissions_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto;
};
// -------------------------------------------------------------------

class DeleteServiceAccountRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.serviceaccount.v1alpha1.DeleteServiceAccountRequest) */ {
 public:
  inline DeleteServiceAccountRequest() : DeleteServiceAccountRequest(nullptr) {};
  virtual ~DeleteServiceAccountRequest();

  DeleteServiceAccountRequest(const DeleteServiceAccountRequest& from);
  DeleteServiceAccountRequest(DeleteServiceAccountRequest&& from) noexcept
    : DeleteServiceAccountRequest() {
    *this = ::std::move(from);
  }

  inline DeleteServiceAccountRequest& operator=(const DeleteServiceAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteServiceAccountRequest& operator=(DeleteServiceAccountRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteServiceAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteServiceAccountRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteServiceAccountRequest*>(
               &_DeleteServiceAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteServiceAccountRequest& a, DeleteServiceAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteServiceAccountRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteServiceAccountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteServiceAccountRequest* New() const final {
    return CreateMaybeMessage<DeleteServiceAccountRequest>(nullptr);
  }

  DeleteServiceAccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteServiceAccountRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteServiceAccountRequest& from);
  void MergeFrom(const DeleteServiceAccountRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteServiceAccountRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.serviceaccount.v1alpha1.DeleteServiceAccountRequest";
  }
  protected:
  explicit DeleteServiceAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1 [(.google.api.field_behavior) = REQUIRED, (.validator.field) = {
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.serviceaccount.v1alpha1.DeleteServiceAccountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Permission

// repeated .improbable.spatialos.serviceaccount.v1alpha1.Permission.Verb verbs = 1;
inline int Permission::_internal_verbs_size() const {
  return verbs_.size();
}
inline int Permission::verbs_size() const {
  return _internal_verbs_size();
}
inline void Permission::clear_verbs() {
  verbs_.Clear();
}
inline ::improbable::spatialos::serviceaccount::v1alpha1::Permission_Verb Permission::_internal_verbs(int index) const {
  return static_cast< ::improbable::spatialos::serviceaccount::v1alpha1::Permission_Verb >(verbs_.Get(index));
}
inline ::improbable::spatialos::serviceaccount::v1alpha1::Permission_Verb Permission::verbs(int index) const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.Permission.verbs)
  return _internal_verbs(index);
}
inline void Permission::set_verbs(int index, ::improbable::spatialos::serviceaccount::v1alpha1::Permission_Verb value) {
  verbs_.Set(index, value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.serviceaccount.v1alpha1.Permission.verbs)
}
inline void Permission::_internal_add_verbs(::improbable::spatialos::serviceaccount::v1alpha1::Permission_Verb value) {
  verbs_.Add(value);
}
inline void Permission::add_verbs(::improbable::spatialos::serviceaccount::v1alpha1::Permission_Verb value) {
  // @@protoc_insertion_point(field_add:improbable.spatialos.serviceaccount.v1alpha1.Permission.verbs)
  _internal_add_verbs(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Permission::verbs() const {
  // @@protoc_insertion_point(field_list:improbable.spatialos.serviceaccount.v1alpha1.Permission.verbs)
  return verbs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Permission::_internal_mutable_verbs() {
  return &verbs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Permission::mutable_verbs() {
  // @@protoc_insertion_point(field_mutable_list:improbable.spatialos.serviceaccount.v1alpha1.Permission.verbs)
  return _internal_mutable_verbs();
}

// repeated string parts = 2 [(.validator.field) = {
inline int Permission::_internal_parts_size() const {
  return parts_.size();
}
inline int Permission::parts_size() const {
  return _internal_parts_size();
}
inline void Permission::clear_parts() {
  parts_.Clear();
}
inline std::string* Permission::add_parts() {
  // @@protoc_insertion_point(field_add_mutable:improbable.spatialos.serviceaccount.v1alpha1.Permission.parts)
  return _internal_add_parts();
}
inline const std::string& Permission::_internal_parts(int index) const {
  return parts_.Get(index);
}
inline const std::string& Permission::parts(int index) const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.Permission.parts)
  return _internal_parts(index);
}
inline std::string* Permission::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.serviceaccount.v1alpha1.Permission.parts)
  return parts_.Mutable(index);
}
inline void Permission::set_parts(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:improbable.spatialos.serviceaccount.v1alpha1.Permission.parts)
  parts_.Mutable(index)->assign(value);
}
inline void Permission::set_parts(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:improbable.spatialos.serviceaccount.v1alpha1.Permission.parts)
  parts_.Mutable(index)->assign(std::move(value));
}
inline void Permission::set_parts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.serviceaccount.v1alpha1.Permission.parts)
}
inline void Permission::set_parts(int index, const char* value, size_t size) {
  parts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.serviceaccount.v1alpha1.Permission.parts)
}
inline std::string* Permission::_internal_add_parts() {
  return parts_.Add();
}
inline void Permission::add_parts(const std::string& value) {
  parts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:improbable.spatialos.serviceaccount.v1alpha1.Permission.parts)
}
inline void Permission::add_parts(std::string&& value) {
  parts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:improbable.spatialos.serviceaccount.v1alpha1.Permission.parts)
}
inline void Permission::add_parts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:improbable.spatialos.serviceaccount.v1alpha1.Permission.parts)
}
inline void Permission::add_parts(const char* value, size_t size) {
  parts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:improbable.spatialos.serviceaccount.v1alpha1.Permission.parts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Permission::parts() const {
  // @@protoc_insertion_point(field_list:improbable.spatialos.serviceaccount.v1alpha1.Permission.parts)
  return parts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Permission::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:improbable.spatialos.serviceaccount.v1alpha1.Permission.parts)
  return &parts_;
}

// -------------------------------------------------------------------

// ServiceAccount

// int64 id = 1;
inline void ServiceAccount::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceAccount::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceAccount::id() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.id)
  return _internal_id();
}
inline void ServiceAccount::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void ServiceAccount::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.id)
}

// string name = 2 [(.validator.field) = {
inline void ServiceAccount::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServiceAccount::name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.name)
  return _internal_name();
}
inline void ServiceAccount::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.name)
}
inline std::string* ServiceAccount::mutable_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.name)
  return _internal_mutable_name();
}
inline const std::string& ServiceAccount::_internal_name() const {
  return name_.Get();
}
inline void ServiceAccount::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServiceAccount::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.name)
}
inline void ServiceAccount::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.name)
}
inline void ServiceAccount::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.name)
}
inline std::string* ServiceAccount::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServiceAccount::release_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceAccount::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.name)
}
inline std::string* ServiceAccount::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServiceAccount::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.name)
}

// string project_name = 7 [(.validator.field) = {
inline void ServiceAccount::clear_project_name() {
  project_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServiceAccount::project_name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.project_name)
  return _internal_project_name();
}
inline void ServiceAccount::set_project_name(const std::string& value) {
  _internal_set_project_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.project_name)
}
inline std::string* ServiceAccount::mutable_project_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.project_name)
  return _internal_mutable_project_name();
}
inline const std::string& ServiceAccount::_internal_project_name() const {
  return project_name_.Get();
}
inline void ServiceAccount::_internal_set_project_name(const std::string& value) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServiceAccount::set_project_name(std::string&& value) {
  
  project_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.project_name)
}
inline void ServiceAccount::set_project_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.project_name)
}
inline void ServiceAccount::set_project_name(const char* value,
    size_t size) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.project_name)
}
inline std::string* ServiceAccount::_internal_mutable_project_name() {
  
  return project_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServiceAccount::release_project_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.project_name)
  return project_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceAccount::set_allocated_project_name(std::string* project_name) {
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.project_name)
}
inline std::string* ServiceAccount::unsafe_arena_release_project_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.project_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return project_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServiceAccount::unsafe_arena_set_allocated_project_name(
    std::string* project_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      project_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.project_name)
}

// repeated .improbable.spatialos.serviceaccount.v1alpha1.Permission permissions = 3;
inline int ServiceAccount::_internal_permissions_size() const {
  return permissions_.size();
}
inline int ServiceAccount::permissions_size() const {
  return _internal_permissions_size();
}
inline void ServiceAccount::clear_permissions() {
  permissions_.Clear();
}
inline ::improbable::spatialos::serviceaccount::v1alpha1::Permission* ServiceAccount::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.permissions)
  return permissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::serviceaccount::v1alpha1::Permission >*
ServiceAccount::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.permissions)
  return &permissions_;
}
inline const ::improbable::spatialos::serviceaccount::v1alpha1::Permission& ServiceAccount::_internal_permissions(int index) const {
  return permissions_.Get(index);
}
inline const ::improbable::spatialos::serviceaccount::v1alpha1::Permission& ServiceAccount::permissions(int index) const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.permissions)
  return _internal_permissions(index);
}
inline ::improbable::spatialos::serviceaccount::v1alpha1::Permission* ServiceAccount::_internal_add_permissions() {
  return permissions_.Add();
}
inline ::improbable::spatialos::serviceaccount::v1alpha1::Permission* ServiceAccount::add_permissions() {
  // @@protoc_insertion_point(field_add:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.permissions)
  return _internal_add_permissions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::serviceaccount::v1alpha1::Permission >&
ServiceAccount::permissions() const {
  // @@protoc_insertion_point(field_list:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.permissions)
  return permissions_;
}

// string token = 4;
inline void ServiceAccount::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServiceAccount::token() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.token)
  return _internal_token();
}
inline void ServiceAccount::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.token)
}
inline std::string* ServiceAccount::mutable_token() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.token)
  return _internal_mutable_token();
}
inline const std::string& ServiceAccount::_internal_token() const {
  return token_.Get();
}
inline void ServiceAccount::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServiceAccount::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.token)
}
inline void ServiceAccount::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.token)
}
inline void ServiceAccount::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.token)
}
inline std::string* ServiceAccount::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServiceAccount::release_token() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceAccount::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.token)
}
inline std::string* ServiceAccount::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServiceAccount::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.token)
}

// .google.protobuf.Timestamp creation_time = 5;
inline bool ServiceAccount::_internal_has_creation_time() const {
  return this != internal_default_instance() && creation_time_ != nullptr;
}
inline bool ServiceAccount::has_creation_time() const {
  return _internal_has_creation_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ServiceAccount::_internal_creation_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = creation_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ServiceAccount::creation_time() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.creation_time)
  return _internal_creation_time();
}
inline void ServiceAccount::unsafe_arena_set_allocated_creation_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* creation_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(creation_time_);
  }
  creation_time_ = creation_time;
  if (creation_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.creation_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ServiceAccount::release_creation_time() {
  auto temp = unsafe_arena_release_creation_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ServiceAccount::unsafe_arena_release_creation_time() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.creation_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = creation_time_;
  creation_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ServiceAccount::_internal_mutable_creation_time() {
  
  if (creation_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    creation_time_ = p;
  }
  return creation_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ServiceAccount::mutable_creation_time() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.creation_time)
  return _internal_mutable_creation_time();
}
inline void ServiceAccount::set_allocated_creation_time(PROTOBUF_NAMESPACE_ID::Timestamp* creation_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(creation_time_);
  }
  if (creation_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(creation_time)->GetArena();
    if (message_arena != submessage_arena) {
      creation_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creation_time, submessage_arena);
    }
    
  } else {
    
  }
  creation_time_ = creation_time;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.creation_time)
}

// .google.protobuf.Timestamp expiration_time = 6;
inline bool ServiceAccount::_internal_has_expiration_time() const {
  return this != internal_default_instance() && expiration_time_ != nullptr;
}
inline bool ServiceAccount::has_expiration_time() const {
  return _internal_has_expiration_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ServiceAccount::_internal_expiration_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expiration_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ServiceAccount::expiration_time() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.expiration_time)
  return _internal_expiration_time();
}
inline void ServiceAccount::unsafe_arena_set_allocated_expiration_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_time_);
  }
  expiration_time_ = expiration_time;
  if (expiration_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.expiration_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ServiceAccount::release_expiration_time() {
  auto temp = unsafe_arena_release_expiration_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ServiceAccount::unsafe_arena_release_expiration_time() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.expiration_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiration_time_;
  expiration_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ServiceAccount::_internal_mutable_expiration_time() {
  
  if (expiration_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expiration_time_ = p;
  }
  return expiration_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ServiceAccount::mutable_expiration_time() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.expiration_time)
  return _internal_mutable_expiration_time();
}
inline void ServiceAccount::set_allocated_expiration_time(PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_time_);
  }
  if (expiration_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_time)->GetArena();
    if (message_arena != submessage_arena) {
      expiration_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration_time, submessage_arena);
    }
    
  } else {
    
  }
  expiration_time_ = expiration_time;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount.expiration_time)
}

// -------------------------------------------------------------------

// CreateServiceAccountRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.validator.field) = {
inline void CreateServiceAccountRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateServiceAccountRequest::name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.name)
  return _internal_name();
}
inline void CreateServiceAccountRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.name)
}
inline std::string* CreateServiceAccountRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateServiceAccountRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateServiceAccountRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateServiceAccountRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.name)
}
inline void CreateServiceAccountRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.name)
}
inline void CreateServiceAccountRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.name)
}
inline std::string* CreateServiceAccountRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateServiceAccountRequest::release_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateServiceAccountRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.name)
}
inline std::string* CreateServiceAccountRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateServiceAccountRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.name)
}

// string project_name = 3 [(.google.api.field_behavior) = REQUIRED, (.validator.field) = {
inline void CreateServiceAccountRequest::clear_project_name() {
  project_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateServiceAccountRequest::project_name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.project_name)
  return _internal_project_name();
}
inline void CreateServiceAccountRequest::set_project_name(const std::string& value) {
  _internal_set_project_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.project_name)
}
inline std::string* CreateServiceAccountRequest::mutable_project_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.project_name)
  return _internal_mutable_project_name();
}
inline const std::string& CreateServiceAccountRequest::_internal_project_name() const {
  return project_name_.Get();
}
inline void CreateServiceAccountRequest::_internal_set_project_name(const std::string& value) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateServiceAccountRequest::set_project_name(std::string&& value) {
  
  project_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.project_name)
}
inline void CreateServiceAccountRequest::set_project_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.project_name)
}
inline void CreateServiceAccountRequest::set_project_name(const char* value,
    size_t size) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.project_name)
}
inline std::string* CreateServiceAccountRequest::_internal_mutable_project_name() {
  
  return project_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateServiceAccountRequest::release_project_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.project_name)
  return project_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateServiceAccountRequest::set_allocated_project_name(std::string* project_name) {
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.project_name)
}
inline std::string* CreateServiceAccountRequest::unsafe_arena_release_project_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.project_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return project_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateServiceAccountRequest::unsafe_arena_set_allocated_project_name(
    std::string* project_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      project_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.project_name)
}

// repeated .improbable.spatialos.serviceaccount.v1alpha1.Permission permissions = 4 [(.google.api.field_behavior) = REQUIRED, (.validator.field) = {
inline int CreateServiceAccountRequest::_internal_permissions_size() const {
  return permissions_.size();
}
inline int CreateServiceAccountRequest::permissions_size() const {
  return _internal_permissions_size();
}
inline void CreateServiceAccountRequest::clear_permissions() {
  permissions_.Clear();
}
inline ::improbable::spatialos::serviceaccount::v1alpha1::Permission* CreateServiceAccountRequest::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.permissions)
  return permissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::serviceaccount::v1alpha1::Permission >*
CreateServiceAccountRequest::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.permissions)
  return &permissions_;
}
inline const ::improbable::spatialos::serviceaccount::v1alpha1::Permission& CreateServiceAccountRequest::_internal_permissions(int index) const {
  return permissions_.Get(index);
}
inline const ::improbable::spatialos::serviceaccount::v1alpha1::Permission& CreateServiceAccountRequest::permissions(int index) const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.permissions)
  return _internal_permissions(index);
}
inline ::improbable::spatialos::serviceaccount::v1alpha1::Permission* CreateServiceAccountRequest::_internal_add_permissions() {
  return permissions_.Add();
}
inline ::improbable::spatialos::serviceaccount::v1alpha1::Permission* CreateServiceAccountRequest::add_permissions() {
  // @@protoc_insertion_point(field_add:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.permissions)
  return _internal_add_permissions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::serviceaccount::v1alpha1::Permission >&
CreateServiceAccountRequest::permissions() const {
  // @@protoc_insertion_point(field_list:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.permissions)
  return permissions_;
}

// .google.protobuf.Duration lifetime = 2;
inline bool CreateServiceAccountRequest::_internal_has_lifetime() const {
  return this != internal_default_instance() && lifetime_ != nullptr;
}
inline bool CreateServiceAccountRequest::has_lifetime() const {
  return _internal_has_lifetime();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& CreateServiceAccountRequest::_internal_lifetime() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = lifetime_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& CreateServiceAccountRequest::lifetime() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.lifetime)
  return _internal_lifetime();
}
inline void CreateServiceAccountRequest::unsafe_arena_set_allocated_lifetime(
    PROTOBUF_NAMESPACE_ID::Duration* lifetime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_);
  }
  lifetime_ = lifetime;
  if (lifetime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.lifetime)
}
inline PROTOBUF_NAMESPACE_ID::Duration* CreateServiceAccountRequest::release_lifetime() {
  auto temp = unsafe_arena_release_lifetime();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* CreateServiceAccountRequest::unsafe_arena_release_lifetime() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.lifetime)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = lifetime_;
  lifetime_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* CreateServiceAccountRequest::_internal_mutable_lifetime() {
  
  if (lifetime_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    lifetime_ = p;
  }
  return lifetime_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* CreateServiceAccountRequest::mutable_lifetime() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.lifetime)
  return _internal_mutable_lifetime();
}
inline void CreateServiceAccountRequest::set_allocated_lifetime(PROTOBUF_NAMESPACE_ID::Duration* lifetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_);
  }
  if (lifetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime)->GetArena();
    if (message_arena != submessage_arena) {
      lifetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lifetime, submessage_arena);
    }
    
  } else {
    
  }
  lifetime_ = lifetime;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.CreateServiceAccountRequest.lifetime)
}

// -------------------------------------------------------------------

// ListServiceAccountsRequest

// string project_name = 3 [(.google.api.field_behavior) = REQUIRED, (.validator.field) = {
inline void ListServiceAccountsRequest::clear_project_name() {
  project_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListServiceAccountsRequest::project_name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.project_name)
  return _internal_project_name();
}
inline void ListServiceAccountsRequest::set_project_name(const std::string& value) {
  _internal_set_project_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.project_name)
}
inline std::string* ListServiceAccountsRequest::mutable_project_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.project_name)
  return _internal_mutable_project_name();
}
inline const std::string& ListServiceAccountsRequest::_internal_project_name() const {
  return project_name_.Get();
}
inline void ListServiceAccountsRequest::_internal_set_project_name(const std::string& value) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListServiceAccountsRequest::set_project_name(std::string&& value) {
  
  project_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.project_name)
}
inline void ListServiceAccountsRequest::set_project_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.project_name)
}
inline void ListServiceAccountsRequest::set_project_name(const char* value,
    size_t size) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.project_name)
}
inline std::string* ListServiceAccountsRequest::_internal_mutable_project_name() {
  
  return project_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListServiceAccountsRequest::release_project_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.project_name)
  return project_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListServiceAccountsRequest::set_allocated_project_name(std::string* project_name) {
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.project_name)
}
inline std::string* ListServiceAccountsRequest::unsafe_arena_release_project_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.project_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return project_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListServiceAccountsRequest::unsafe_arena_set_allocated_project_name(
    std::string* project_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      project_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.project_name)
}

// int32 page_size = 1 [(.validator.field) = {
inline void ListServiceAccountsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListServiceAccountsRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListServiceAccountsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.page_size)
  return _internal_page_size();
}
inline void ListServiceAccountsRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListServiceAccountsRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.page_size)
}

// string page_token = 2;
inline void ListServiceAccountsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListServiceAccountsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.page_token)
  return _internal_page_token();
}
inline void ListServiceAccountsRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.page_token)
}
inline std::string* ListServiceAccountsRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListServiceAccountsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListServiceAccountsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListServiceAccountsRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.page_token)
}
inline void ListServiceAccountsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.page_token)
}
inline void ListServiceAccountsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.page_token)
}
inline std::string* ListServiceAccountsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListServiceAccountsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListServiceAccountsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.page_token)
}
inline std::string* ListServiceAccountsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.page_token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return page_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListServiceAccountsRequest::unsafe_arena_set_allocated_page_token(
    std::string* page_token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsRequest.page_token)
}

// -------------------------------------------------------------------

// ListServiceAccountsResponse

// repeated .improbable.spatialos.serviceaccount.v1alpha1.ServiceAccount service_accounts = 1;
inline int ListServiceAccountsResponse::_internal_service_accounts_size() const {
  return service_accounts_.size();
}
inline int ListServiceAccountsResponse::service_accounts_size() const {
  return _internal_service_accounts_size();
}
inline void ListServiceAccountsResponse::clear_service_accounts() {
  service_accounts_.Clear();
}
inline ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* ListServiceAccountsResponse::mutable_service_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsResponse.service_accounts)
  return service_accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount >*
ListServiceAccountsResponse::mutable_service_accounts() {
  // @@protoc_insertion_point(field_mutable_list:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsResponse.service_accounts)
  return &service_accounts_;
}
inline const ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount& ListServiceAccountsResponse::_internal_service_accounts(int index) const {
  return service_accounts_.Get(index);
}
inline const ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount& ListServiceAccountsResponse::service_accounts(int index) const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsResponse.service_accounts)
  return _internal_service_accounts(index);
}
inline ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* ListServiceAccountsResponse::_internal_add_service_accounts() {
  return service_accounts_.Add();
}
inline ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount* ListServiceAccountsResponse::add_service_accounts() {
  // @@protoc_insertion_point(field_add:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsResponse.service_accounts)
  return _internal_add_service_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::serviceaccount::v1alpha1::ServiceAccount >&
ListServiceAccountsResponse::service_accounts() const {
  // @@protoc_insertion_point(field_list:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsResponse.service_accounts)
  return service_accounts_;
}

// string next_page_token = 2;
inline void ListServiceAccountsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListServiceAccountsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListServiceAccountsResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsResponse.next_page_token)
}
inline std::string* ListServiceAccountsResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListServiceAccountsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListServiceAccountsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListServiceAccountsResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsResponse.next_page_token)
}
inline void ListServiceAccountsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsResponse.next_page_token)
}
inline void ListServiceAccountsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsResponse.next_page_token)
}
inline std::string* ListServiceAccountsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListServiceAccountsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListServiceAccountsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsResponse.next_page_token)
}
inline std::string* ListServiceAccountsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsResponse.next_page_token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return next_page_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListServiceAccountsResponse::unsafe_arena_set_allocated_next_page_token(
    std::string* next_page_token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.ListServiceAccountsResponse.next_page_token)
}

// -------------------------------------------------------------------

// UpdateServiceAccountRequest

// int64 id = 1 [(.google.api.field_behavior) = REQUIRED, (.validator.field) = {
inline void UpdateServiceAccountRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateServiceAccountRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateServiceAccountRequest::id() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.UpdateServiceAccountRequest.id)
  return _internal_id();
}
inline void UpdateServiceAccountRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void UpdateServiceAccountRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.serviceaccount.v1alpha1.UpdateServiceAccountRequest.id)
}

// repeated .improbable.spatialos.serviceaccount.v1alpha1.Permission permissions = 2;
inline int UpdateServiceAccountRequest::_internal_permissions_size() const {
  return permissions_.size();
}
inline int UpdateServiceAccountRequest::permissions_size() const {
  return _internal_permissions_size();
}
inline void UpdateServiceAccountRequest::clear_permissions() {
  permissions_.Clear();
}
inline ::improbable::spatialos::serviceaccount::v1alpha1::Permission* UpdateServiceAccountRequest::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.serviceaccount.v1alpha1.UpdateServiceAccountRequest.permissions)
  return permissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::serviceaccount::v1alpha1::Permission >*
UpdateServiceAccountRequest::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:improbable.spatialos.serviceaccount.v1alpha1.UpdateServiceAccountRequest.permissions)
  return &permissions_;
}
inline const ::improbable::spatialos::serviceaccount::v1alpha1::Permission& UpdateServiceAccountRequest::_internal_permissions(int index) const {
  return permissions_.Get(index);
}
inline const ::improbable::spatialos::serviceaccount::v1alpha1::Permission& UpdateServiceAccountRequest::permissions(int index) const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.UpdateServiceAccountRequest.permissions)
  return _internal_permissions(index);
}
inline ::improbable::spatialos::serviceaccount::v1alpha1::Permission* UpdateServiceAccountRequest::_internal_add_permissions() {
  return permissions_.Add();
}
inline ::improbable::spatialos::serviceaccount::v1alpha1::Permission* UpdateServiceAccountRequest::add_permissions() {
  // @@protoc_insertion_point(field_add:improbable.spatialos.serviceaccount.v1alpha1.UpdateServiceAccountRequest.permissions)
  return _internal_add_permissions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::serviceaccount::v1alpha1::Permission >&
UpdateServiceAccountRequest::permissions() const {
  // @@protoc_insertion_point(field_list:improbable.spatialos.serviceaccount.v1alpha1.UpdateServiceAccountRequest.permissions)
  return permissions_;
}

// .google.protobuf.Timestamp expiration_time = 3;
inline bool UpdateServiceAccountRequest::_internal_has_expiration_time() const {
  return this != internal_default_instance() && expiration_time_ != nullptr;
}
inline bool UpdateServiceAccountRequest::has_expiration_time() const {
  return _internal_has_expiration_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& UpdateServiceAccountRequest::_internal_expiration_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expiration_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& UpdateServiceAccountRequest::expiration_time() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.UpdateServiceAccountRequest.expiration_time)
  return _internal_expiration_time();
}
inline void UpdateServiceAccountRequest::unsafe_arena_set_allocated_expiration_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_time_);
  }
  expiration_time_ = expiration_time;
  if (expiration_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.UpdateServiceAccountRequest.expiration_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UpdateServiceAccountRequest::release_expiration_time() {
  auto temp = unsafe_arena_release_expiration_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UpdateServiceAccountRequest::unsafe_arena_release_expiration_time() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.serviceaccount.v1alpha1.UpdateServiceAccountRequest.expiration_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiration_time_;
  expiration_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UpdateServiceAccountRequest::_internal_mutable_expiration_time() {
  
  if (expiration_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expiration_time_ = p;
  }
  return expiration_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UpdateServiceAccountRequest::mutable_expiration_time() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.serviceaccount.v1alpha1.UpdateServiceAccountRequest.expiration_time)
  return _internal_mutable_expiration_time();
}
inline void UpdateServiceAccountRequest::set_allocated_expiration_time(PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_time_);
  }
  if (expiration_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_time)->GetArena();
    if (message_arena != submessage_arena) {
      expiration_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration_time, submessage_arena);
    }
    
  } else {
    
  }
  expiration_time_ = expiration_time;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.serviceaccount.v1alpha1.UpdateServiceAccountRequest.expiration_time)
}

// -------------------------------------------------------------------

// DeleteServiceAccountRequest

// int64 id = 1 [(.google.api.field_behavior) = REQUIRED, (.validator.field) = {
inline void DeleteServiceAccountRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteServiceAccountRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteServiceAccountRequest::id() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.serviceaccount.v1alpha1.DeleteServiceAccountRequest.id)
  return _internal_id();
}
inline void DeleteServiceAccountRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void DeleteServiceAccountRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.serviceaccount.v1alpha1.DeleteServiceAccountRequest.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace serviceaccount
}  // namespace spatialos
}  // namespace improbable

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::improbable::spatialos::serviceaccount::v1alpha1::Permission_Verb> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::improbable::spatialos::serviceaccount::v1alpha1::Permission_Verb>() {
  return ::improbable::spatialos::serviceaccount::v1alpha1::Permission_Verb_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_improbable_2fspatialos_2fserviceaccount_2fv1alpha1_2fserviceaccount_2eproto
