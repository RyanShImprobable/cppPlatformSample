// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: improbable/spatialos/snapshot/v1alpha1/snapshot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "github.com/improbable-io/go-proto-logfields/logfields.pb.h"
#include "github.com/mwitkow/go-proto-validators/validator.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "improbable/ext/plugin/auth/perms.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto;
namespace improbable {
namespace spatialos {
namespace snapshot {
namespace v1alpha1 {
class ConfirmUploadRequest;
class ConfirmUploadRequestDefaultTypeInternal;
extern ConfirmUploadRequestDefaultTypeInternal _ConfirmUploadRequest_default_instance_;
class ConfirmUploadResponse;
class ConfirmUploadResponseDefaultTypeInternal;
extern ConfirmUploadResponseDefaultTypeInternal _ConfirmUploadResponse_default_instance_;
class GetSnapshotRequest;
class GetSnapshotRequestDefaultTypeInternal;
extern GetSnapshotRequestDefaultTypeInternal _GetSnapshotRequest_default_instance_;
class GetSnapshotResponse;
class GetSnapshotResponseDefaultTypeInternal;
extern GetSnapshotResponseDefaultTypeInternal _GetSnapshotResponse_default_instance_;
class ListSnapshotsRequest;
class ListSnapshotsRequestDefaultTypeInternal;
extern ListSnapshotsRequestDefaultTypeInternal _ListSnapshotsRequest_default_instance_;
class ListSnapshotsResponse;
class ListSnapshotsResponseDefaultTypeInternal;
extern ListSnapshotsResponseDefaultTypeInternal _ListSnapshotsResponse_default_instance_;
class Snapshot;
class SnapshotDefaultTypeInternal;
extern SnapshotDefaultTypeInternal _Snapshot_default_instance_;
class TakeSnapshotMetadata;
class TakeSnapshotMetadataDefaultTypeInternal;
extern TakeSnapshotMetadataDefaultTypeInternal _TakeSnapshotMetadata_default_instance_;
class TakeSnapshotRequest;
class TakeSnapshotRequestDefaultTypeInternal;
extern TakeSnapshotRequestDefaultTypeInternal _TakeSnapshotRequest_default_instance_;
class UploadSnapshotRequest;
class UploadSnapshotRequestDefaultTypeInternal;
extern UploadSnapshotRequestDefaultTypeInternal _UploadSnapshotRequest_default_instance_;
class UploadSnapshotResponse;
class UploadSnapshotResponseDefaultTypeInternal;
extern UploadSnapshotResponseDefaultTypeInternal _UploadSnapshotResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace snapshot
}  // namespace spatialos
}  // namespace improbable
PROTOBUF_NAMESPACE_OPEN
template<> ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest* Arena::CreateMaybeMessage<::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest>(Arena*);
template<> ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* Arena::CreateMaybeMessage<::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse>(Arena*);
template<> ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest* Arena::CreateMaybeMessage<::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest>(Arena*);
template<> ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* Arena::CreateMaybeMessage<::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse>(Arena*);
template<> ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest* Arena::CreateMaybeMessage<::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest>(Arena*);
template<> ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* Arena::CreateMaybeMessage<::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse>(Arena*);
template<> ::improbable::spatialos::snapshot::v1alpha1::Snapshot* Arena::CreateMaybeMessage<::improbable::spatialos::snapshot::v1alpha1::Snapshot>(Arena*);
template<> ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotMetadata* Arena::CreateMaybeMessage<::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotMetadata>(Arena*);
template<> ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest* Arena::CreateMaybeMessage<::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest>(Arena*);
template<> ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest* Arena::CreateMaybeMessage<::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest>(Arena*);
template<> ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* Arena::CreateMaybeMessage<::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace improbable {
namespace spatialos {
namespace snapshot {
namespace v1alpha1 {

// ===================================================================

class Snapshot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.snapshot.v1alpha1.Snapshot) */ {
 public:
  inline Snapshot() : Snapshot(nullptr) {};
  virtual ~Snapshot();

  Snapshot(const Snapshot& from);
  Snapshot(Snapshot&& from) noexcept
    : Snapshot() {
    *this = ::std::move(from);
  }

  inline Snapshot& operator=(const Snapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snapshot& operator=(Snapshot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Snapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Snapshot* internal_default_instance() {
    return reinterpret_cast<const Snapshot*>(
               &_Snapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Snapshot& a, Snapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(Snapshot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Snapshot* New() const final {
    return CreateMaybeMessage<Snapshot>(nullptr);
  }

  Snapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Snapshot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Snapshot& from);
  void MergeFrom(const Snapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snapshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.snapshot.v1alpha1.Snapshot";
  }
  protected:
  explicit Snapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 6,
    kIdFieldNumber = 1,
    kProjectNameFieldNumber = 2,
    kDeploymentNameFieldNumber = 3,
    kDownloadUrlFieldNumber = 7,
    kChecksumFieldNumber = 8,
    kCreateTimeFieldNumber = 4,
    kSizeFieldNumber = 5,
  };
  // repeated string tags = 6 [(.validator.field) = {
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // string id = 1 [(.improbable.logfield) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string project_name = 2 [(.improbable.logfield) = {
  void clear_project_name();
  const std::string& project_name() const;
  void set_project_name(const std::string& value);
  void set_project_name(std::string&& value);
  void set_project_name(const char* value);
  void set_project_name(const char* value, size_t size);
  std::string* mutable_project_name();
  std::string* release_project_name();
  void set_allocated_project_name(std::string* project_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_project_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project_name(
      std::string* project_name);
  private:
  const std::string& _internal_project_name() const;
  void _internal_set_project_name(const std::string& value);
  std::string* _internal_mutable_project_name();
  public:

  // string deployment_name = 3 [(.improbable.logfield) = {
  void clear_deployment_name();
  const std::string& deployment_name() const;
  void set_deployment_name(const std::string& value);
  void set_deployment_name(std::string&& value);
  void set_deployment_name(const char* value);
  void set_deployment_name(const char* value, size_t size);
  std::string* mutable_deployment_name();
  std::string* release_deployment_name();
  void set_allocated_deployment_name(std::string* deployment_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_deployment_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_deployment_name(
      std::string* deployment_name);
  private:
  const std::string& _internal_deployment_name() const;
  void _internal_set_deployment_name(const std::string& value);
  std::string* _internal_mutable_deployment_name();
  public:

  // string download_url = 7;
  void clear_download_url();
  const std::string& download_url() const;
  void set_download_url(const std::string& value);
  void set_download_url(std::string&& value);
  void set_download_url(const char* value);
  void set_download_url(const char* value, size_t size);
  std::string* mutable_download_url();
  std::string* release_download_url();
  void set_allocated_download_url(std::string* download_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_download_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_download_url(
      std::string* download_url);
  private:
  const std::string& _internal_download_url() const;
  void _internal_set_download_url(const std::string& value);
  std::string* _internal_mutable_download_url();
  public:

  // string checksum = 8 [(.improbable.logfield) = {
  void clear_checksum();
  const std::string& checksum() const;
  void set_checksum(const std::string& value);
  void set_checksum(std::string&& value);
  void set_checksum(const char* value);
  void set_checksum(const char* value, size_t size);
  std::string* mutable_checksum();
  std::string* release_checksum();
  void set_allocated_checksum(std::string* checksum);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_checksum();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_checksum(
      std::string* checksum);
  private:
  const std::string& _internal_checksum() const;
  void _internal_set_checksum(const std::string& value);
  std::string* _internal_mutable_checksum();
  public:

  // .google.protobuf.Timestamp create_time = 4;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // int64 size = 5;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.snapshot.v1alpha1.Snapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deployment_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr download_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checksum_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class ListSnapshotsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest) */ {
 public:
  inline ListSnapshotsRequest() : ListSnapshotsRequest(nullptr) {};
  virtual ~ListSnapshotsRequest();

  ListSnapshotsRequest(const ListSnapshotsRequest& from);
  ListSnapshotsRequest(ListSnapshotsRequest&& from) noexcept
    : ListSnapshotsRequest() {
    *this = ::std::move(from);
  }

  inline ListSnapshotsRequest& operator=(const ListSnapshotsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSnapshotsRequest& operator=(ListSnapshotsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSnapshotsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSnapshotsRequest* internal_default_instance() {
    return reinterpret_cast<const ListSnapshotsRequest*>(
               &_ListSnapshotsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListSnapshotsRequest& a, ListSnapshotsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSnapshotsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSnapshotsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSnapshotsRequest* New() const final {
    return CreateMaybeMessage<ListSnapshotsRequest>(nullptr);
  }

  ListSnapshotsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSnapshotsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSnapshotsRequest& from);
  void MergeFrom(const ListSnapshotsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSnapshotsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest";
  }
  protected:
  explicit ListSnapshotsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectNameFieldNumber = 1,
    kDeploymentNameFieldNumber = 2,
    kPageTokenFieldNumber = 4,
    kPageSizeFieldNumber = 3,
  };
  // string project_name = 1 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
  void clear_project_name();
  const std::string& project_name() const;
  void set_project_name(const std::string& value);
  void set_project_name(std::string&& value);
  void set_project_name(const char* value);
  void set_project_name(const char* value, size_t size);
  std::string* mutable_project_name();
  std::string* release_project_name();
  void set_allocated_project_name(std::string* project_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_project_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project_name(
      std::string* project_name);
  private:
  const std::string& _internal_project_name() const;
  void _internal_set_project_name(const std::string& value);
  std::string* _internal_mutable_project_name();
  public:

  // string deployment_name = 2 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
  void clear_deployment_name();
  const std::string& deployment_name() const;
  void set_deployment_name(const std::string& value);
  void set_deployment_name(std::string&& value);
  void set_deployment_name(const char* value);
  void set_deployment_name(const char* value, size_t size);
  std::string* mutable_deployment_name();
  std::string* release_deployment_name();
  void set_allocated_deployment_name(std::string* deployment_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_deployment_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_deployment_name(
      std::string* deployment_name);
  private:
  const std::string& _internal_deployment_name() const;
  void _internal_set_deployment_name(const std::string& value);
  std::string* _internal_mutable_deployment_name();
  public:

  // string page_token = 4 [(.improbable.logfield) = {
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 3 [(.improbable.logfield) = {
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deployment_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class ListSnapshotsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsResponse) */ {
 public:
  inline ListSnapshotsResponse() : ListSnapshotsResponse(nullptr) {};
  virtual ~ListSnapshotsResponse();

  ListSnapshotsResponse(const ListSnapshotsResponse& from);
  ListSnapshotsResponse(ListSnapshotsResponse&& from) noexcept
    : ListSnapshotsResponse() {
    *this = ::std::move(from);
  }

  inline ListSnapshotsResponse& operator=(const ListSnapshotsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSnapshotsResponse& operator=(ListSnapshotsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSnapshotsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSnapshotsResponse* internal_default_instance() {
    return reinterpret_cast<const ListSnapshotsResponse*>(
               &_ListSnapshotsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListSnapshotsResponse& a, ListSnapshotsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSnapshotsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSnapshotsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSnapshotsResponse* New() const final {
    return CreateMaybeMessage<ListSnapshotsResponse>(nullptr);
  }

  ListSnapshotsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSnapshotsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSnapshotsResponse& from);
  void MergeFrom(const ListSnapshotsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSnapshotsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.snapshot.v1alpha1.ListSnapshotsResponse";
  }
  protected:
  explicit ListSnapshotsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .improbable.spatialos.snapshot.v1alpha1.Snapshot snapshot = 1;
  int snapshot_size() const;
  private:
  int _internal_snapshot_size() const;
  public:
  void clear_snapshot();
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* mutable_snapshot(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::snapshot::v1alpha1::Snapshot >*
      mutable_snapshot();
  private:
  const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& _internal_snapshot(int index) const;
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* _internal_add_snapshot();
  public:
  const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& snapshot(int index) const;
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* add_snapshot();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::snapshot::v1alpha1::Snapshot >&
      snapshot() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_next_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::snapshot::v1alpha1::Snapshot > snapshot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class GetSnapshotRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest) */ {
 public:
  inline GetSnapshotRequest() : GetSnapshotRequest(nullptr) {};
  virtual ~GetSnapshotRequest();

  GetSnapshotRequest(const GetSnapshotRequest& from);
  GetSnapshotRequest(GetSnapshotRequest&& from) noexcept
    : GetSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline GetSnapshotRequest& operator=(const GetSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSnapshotRequest& operator=(GetSnapshotRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const GetSnapshotRequest*>(
               &_GetSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetSnapshotRequest& a, GetSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSnapshotRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSnapshotRequest* New() const final {
    return CreateMaybeMessage<GetSnapshotRequest>(nullptr);
  }

  GetSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSnapshotRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSnapshotRequest& from);
  void MergeFrom(const GetSnapshotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest";
  }
  protected:
  explicit GetSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectNameFieldNumber = 1,
    kDeploymentNameFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // string project_name = 1 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
  void clear_project_name();
  const std::string& project_name() const;
  void set_project_name(const std::string& value);
  void set_project_name(std::string&& value);
  void set_project_name(const char* value);
  void set_project_name(const char* value, size_t size);
  std::string* mutable_project_name();
  std::string* release_project_name();
  void set_allocated_project_name(std::string* project_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_project_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project_name(
      std::string* project_name);
  private:
  const std::string& _internal_project_name() const;
  void _internal_set_project_name(const std::string& value);
  std::string* _internal_mutable_project_name();
  public:

  // string deployment_name = 2 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
  void clear_deployment_name();
  const std::string& deployment_name() const;
  void set_deployment_name(const std::string& value);
  void set_deployment_name(std::string&& value);
  void set_deployment_name(const char* value);
  void set_deployment_name(const char* value, size_t size);
  std::string* mutable_deployment_name();
  std::string* release_deployment_name();
  void set_allocated_deployment_name(std::string* deployment_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_deployment_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_deployment_name(
      std::string* deployment_name);
  private:
  const std::string& _internal_deployment_name() const;
  void _internal_set_deployment_name(const std::string& value);
  std::string* _internal_mutable_deployment_name();
  public:

  // string id = 3 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deployment_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class GetSnapshotResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.snapshot.v1alpha1.GetSnapshotResponse) */ {
 public:
  inline GetSnapshotResponse() : GetSnapshotResponse(nullptr) {};
  virtual ~GetSnapshotResponse();

  GetSnapshotResponse(const GetSnapshotResponse& from);
  GetSnapshotResponse(GetSnapshotResponse&& from) noexcept
    : GetSnapshotResponse() {
    *this = ::std::move(from);
  }

  inline GetSnapshotResponse& operator=(const GetSnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSnapshotResponse& operator=(GetSnapshotResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSnapshotResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const GetSnapshotResponse*>(
               &_GetSnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetSnapshotResponse& a, GetSnapshotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSnapshotResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSnapshotResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSnapshotResponse* New() const final {
    return CreateMaybeMessage<GetSnapshotResponse>(nullptr);
  }

  GetSnapshotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSnapshotResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSnapshotResponse& from);
  void MergeFrom(const GetSnapshotResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSnapshotResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.snapshot.v1alpha1.GetSnapshotResponse";
  }
  protected:
  explicit GetSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotFieldNumber = 1,
  };
  // .improbable.spatialos.snapshot.v1alpha1.Snapshot snapshot = 1;
  bool has_snapshot() const;
  private:
  bool _internal_has_snapshot() const;
  public:
  void clear_snapshot();
  const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& snapshot() const;
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* release_snapshot();
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* mutable_snapshot();
  void set_allocated_snapshot(::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot);
  private:
  const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& _internal_snapshot() const;
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* _internal_mutable_snapshot();
  public:
  void unsafe_arena_set_allocated_snapshot(
      ::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot);
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* unsafe_arena_release_snapshot();

  // @@protoc_insertion_point(class_scope:improbable.spatialos.snapshot.v1alpha1.GetSnapshotResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class TakeSnapshotRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.snapshot.v1alpha1.TakeSnapshotRequest) */ {
 public:
  inline TakeSnapshotRequest() : TakeSnapshotRequest(nullptr) {};
  virtual ~TakeSnapshotRequest();

  TakeSnapshotRequest(const TakeSnapshotRequest& from);
  TakeSnapshotRequest(TakeSnapshotRequest&& from) noexcept
    : TakeSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline TakeSnapshotRequest& operator=(const TakeSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TakeSnapshotRequest& operator=(TakeSnapshotRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TakeSnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TakeSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const TakeSnapshotRequest*>(
               &_TakeSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TakeSnapshotRequest& a, TakeSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TakeSnapshotRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TakeSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TakeSnapshotRequest* New() const final {
    return CreateMaybeMessage<TakeSnapshotRequest>(nullptr);
  }

  TakeSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TakeSnapshotRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TakeSnapshotRequest& from);
  void MergeFrom(const TakeSnapshotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TakeSnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.snapshot.v1alpha1.TakeSnapshotRequest";
  }
  protected:
  explicit TakeSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotFieldNumber = 1,
  };
  // .improbable.spatialos.snapshot.v1alpha1.Snapshot snapshot = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_snapshot() const;
  private:
  bool _internal_has_snapshot() const;
  public:
  void clear_snapshot();
  const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& snapshot() const;
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* release_snapshot();
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* mutable_snapshot();
  void set_allocated_snapshot(::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot);
  private:
  const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& _internal_snapshot() const;
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* _internal_mutable_snapshot();
  public:
  void unsafe_arena_set_allocated_snapshot(
      ::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot);
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* unsafe_arena_release_snapshot();

  // @@protoc_insertion_point(class_scope:improbable.spatialos.snapshot.v1alpha1.TakeSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class TakeSnapshotMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.snapshot.v1alpha1.TakeSnapshotMetadata) */ {
 public:
  inline TakeSnapshotMetadata() : TakeSnapshotMetadata(nullptr) {};
  virtual ~TakeSnapshotMetadata();

  TakeSnapshotMetadata(const TakeSnapshotMetadata& from);
  TakeSnapshotMetadata(TakeSnapshotMetadata&& from) noexcept
    : TakeSnapshotMetadata() {
    *this = ::std::move(from);
  }

  inline TakeSnapshotMetadata& operator=(const TakeSnapshotMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline TakeSnapshotMetadata& operator=(TakeSnapshotMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TakeSnapshotMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TakeSnapshotMetadata* internal_default_instance() {
    return reinterpret_cast<const TakeSnapshotMetadata*>(
               &_TakeSnapshotMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TakeSnapshotMetadata& a, TakeSnapshotMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(TakeSnapshotMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TakeSnapshotMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TakeSnapshotMetadata* New() const final {
    return CreateMaybeMessage<TakeSnapshotMetadata>(nullptr);
  }

  TakeSnapshotMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TakeSnapshotMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TakeSnapshotMetadata& from);
  void MergeFrom(const TakeSnapshotMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TakeSnapshotMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.snapshot.v1alpha1.TakeSnapshotMetadata";
  }
  protected:
  explicit TakeSnapshotMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:improbable.spatialos.snapshot.v1alpha1.TakeSnapshotMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class UploadSnapshotRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotRequest) */ {
 public:
  inline UploadSnapshotRequest() : UploadSnapshotRequest(nullptr) {};
  virtual ~UploadSnapshotRequest();

  UploadSnapshotRequest(const UploadSnapshotRequest& from);
  UploadSnapshotRequest(UploadSnapshotRequest&& from) noexcept
    : UploadSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline UploadSnapshotRequest& operator=(const UploadSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadSnapshotRequest& operator=(UploadSnapshotRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadSnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const UploadSnapshotRequest*>(
               &_UploadSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UploadSnapshotRequest& a, UploadSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadSnapshotRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadSnapshotRequest* New() const final {
    return CreateMaybeMessage<UploadSnapshotRequest>(nullptr);
  }

  UploadSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadSnapshotRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadSnapshotRequest& from);
  void MergeFrom(const UploadSnapshotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadSnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.snapshot.v1alpha1.UploadSnapshotRequest";
  }
  protected:
  explicit UploadSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotFieldNumber = 1,
  };
  // .improbable.spatialos.snapshot.v1alpha1.Snapshot snapshot = 1 [(.google.api.field_behavior) = REQUIRED, (.validator.field) = {
  bool has_snapshot() const;
  private:
  bool _internal_has_snapshot() const;
  public:
  void clear_snapshot();
  const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& snapshot() const;
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* release_snapshot();
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* mutable_snapshot();
  void set_allocated_snapshot(::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot);
  private:
  const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& _internal_snapshot() const;
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* _internal_mutable_snapshot();
  public:
  void unsafe_arena_set_allocated_snapshot(
      ::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot);
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* unsafe_arena_release_snapshot();

  // @@protoc_insertion_point(class_scope:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class UploadSnapshotResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotResponse) */ {
 public:
  inline UploadSnapshotResponse() : UploadSnapshotResponse(nullptr) {};
  virtual ~UploadSnapshotResponse();

  UploadSnapshotResponse(const UploadSnapshotResponse& from);
  UploadSnapshotResponse(UploadSnapshotResponse&& from) noexcept
    : UploadSnapshotResponse() {
    *this = ::std::move(from);
  }

  inline UploadSnapshotResponse& operator=(const UploadSnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadSnapshotResponse& operator=(UploadSnapshotResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadSnapshotResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadSnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const UploadSnapshotResponse*>(
               &_UploadSnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UploadSnapshotResponse& a, UploadSnapshotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadSnapshotResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadSnapshotResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadSnapshotResponse* New() const final {
    return CreateMaybeMessage<UploadSnapshotResponse>(nullptr);
  }

  UploadSnapshotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadSnapshotResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadSnapshotResponse& from);
  void MergeFrom(const UploadSnapshotResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadSnapshotResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.snapshot.v1alpha1.UploadSnapshotResponse";
  }
  protected:
  explicit UploadSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUploadUrlFieldNumber = 1,
    kSnapshotFieldNumber = 2,
  };
  // string upload_url = 1;
  void clear_upload_url();
  const std::string& upload_url() const;
  void set_upload_url(const std::string& value);
  void set_upload_url(std::string&& value);
  void set_upload_url(const char* value);
  void set_upload_url(const char* value, size_t size);
  std::string* mutable_upload_url();
  std::string* release_upload_url();
  void set_allocated_upload_url(std::string* upload_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_upload_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_upload_url(
      std::string* upload_url);
  private:
  const std::string& _internal_upload_url() const;
  void _internal_set_upload_url(const std::string& value);
  std::string* _internal_mutable_upload_url();
  public:

  // .improbable.spatialos.snapshot.v1alpha1.Snapshot snapshot = 2;
  bool has_snapshot() const;
  private:
  bool _internal_has_snapshot() const;
  public:
  void clear_snapshot();
  const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& snapshot() const;
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* release_snapshot();
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* mutable_snapshot();
  void set_allocated_snapshot(::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot);
  private:
  const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& _internal_snapshot() const;
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* _internal_mutable_snapshot();
  public:
  void unsafe_arena_set_allocated_snapshot(
      ::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot);
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* unsafe_arena_release_snapshot();

  // @@protoc_insertion_point(class_scope:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upload_url_;
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class ConfirmUploadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest) */ {
 public:
  inline ConfirmUploadRequest() : ConfirmUploadRequest(nullptr) {};
  virtual ~ConfirmUploadRequest();

  ConfirmUploadRequest(const ConfirmUploadRequest& from);
  ConfirmUploadRequest(ConfirmUploadRequest&& from) noexcept
    : ConfirmUploadRequest() {
    *this = ::std::move(from);
  }

  inline ConfirmUploadRequest& operator=(const ConfirmUploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfirmUploadRequest& operator=(ConfirmUploadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfirmUploadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfirmUploadRequest* internal_default_instance() {
    return reinterpret_cast<const ConfirmUploadRequest*>(
               &_ConfirmUploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ConfirmUploadRequest& a, ConfirmUploadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfirmUploadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfirmUploadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfirmUploadRequest* New() const final {
    return CreateMaybeMessage<ConfirmUploadRequest>(nullptr);
  }

  ConfirmUploadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfirmUploadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfirmUploadRequest& from);
  void MergeFrom(const ConfirmUploadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfirmUploadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest";
  }
  protected:
  explicit ConfirmUploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectNameFieldNumber = 1,
    kDeploymentNameFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // string project_name = 1 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
  void clear_project_name();
  const std::string& project_name() const;
  void set_project_name(const std::string& value);
  void set_project_name(std::string&& value);
  void set_project_name(const char* value);
  void set_project_name(const char* value, size_t size);
  std::string* mutable_project_name();
  std::string* release_project_name();
  void set_allocated_project_name(std::string* project_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_project_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project_name(
      std::string* project_name);
  private:
  const std::string& _internal_project_name() const;
  void _internal_set_project_name(const std::string& value);
  std::string* _internal_mutable_project_name();
  public:

  // string deployment_name = 2 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
  void clear_deployment_name();
  const std::string& deployment_name() const;
  void set_deployment_name(const std::string& value);
  void set_deployment_name(std::string&& value);
  void set_deployment_name(const char* value);
  void set_deployment_name(const char* value, size_t size);
  std::string* mutable_deployment_name();
  std::string* release_deployment_name();
  void set_allocated_deployment_name(std::string* deployment_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_deployment_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_deployment_name(
      std::string* deployment_name);
  private:
  const std::string& _internal_deployment_name() const;
  void _internal_set_deployment_name(const std::string& value);
  std::string* _internal_mutable_deployment_name();
  public:

  // string id = 3 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deployment_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class ConfirmUploadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadResponse) */ {
 public:
  inline ConfirmUploadResponse() : ConfirmUploadResponse(nullptr) {};
  virtual ~ConfirmUploadResponse();

  ConfirmUploadResponse(const ConfirmUploadResponse& from);
  ConfirmUploadResponse(ConfirmUploadResponse&& from) noexcept
    : ConfirmUploadResponse() {
    *this = ::std::move(from);
  }

  inline ConfirmUploadResponse& operator=(const ConfirmUploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfirmUploadResponse& operator=(ConfirmUploadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfirmUploadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfirmUploadResponse* internal_default_instance() {
    return reinterpret_cast<const ConfirmUploadResponse*>(
               &_ConfirmUploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ConfirmUploadResponse& a, ConfirmUploadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfirmUploadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfirmUploadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfirmUploadResponse* New() const final {
    return CreateMaybeMessage<ConfirmUploadResponse>(nullptr);
  }

  ConfirmUploadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfirmUploadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfirmUploadResponse& from);
  void MergeFrom(const ConfirmUploadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfirmUploadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "improbable.spatialos.snapshot.v1alpha1.ConfirmUploadResponse";
  }
  protected:
  explicit ConfirmUploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto);
    return ::descriptor_table_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotFieldNumber = 1,
  };
  // .improbable.spatialos.snapshot.v1alpha1.Snapshot snapshot = 1;
  bool has_snapshot() const;
  private:
  bool _internal_has_snapshot() const;
  public:
  void clear_snapshot();
  const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& snapshot() const;
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* release_snapshot();
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* mutable_snapshot();
  void set_allocated_snapshot(::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot);
  private:
  const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& _internal_snapshot() const;
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* _internal_mutable_snapshot();
  public:
  void unsafe_arena_set_allocated_snapshot(
      ::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot);
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* unsafe_arena_release_snapshot();

  // @@protoc_insertion_point(class_scope:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Snapshot

// string id = 1 [(.improbable.logfield) = {
inline void Snapshot::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Snapshot::id() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.Snapshot.id)
  return _internal_id();
}
inline void Snapshot::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.snapshot.v1alpha1.Snapshot.id)
}
inline std::string* Snapshot::mutable_id() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.Snapshot.id)
  return _internal_mutable_id();
}
inline const std::string& Snapshot::_internal_id() const {
  return id_.Get();
}
inline void Snapshot::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Snapshot::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.snapshot.v1alpha1.Snapshot.id)
}
inline void Snapshot::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.snapshot.v1alpha1.Snapshot.id)
}
inline void Snapshot::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.snapshot.v1alpha1.Snapshot.id)
}
inline std::string* Snapshot::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Snapshot::release_id() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.Snapshot.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Snapshot::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.Snapshot.id)
}
inline std::string* Snapshot::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.snapshot.v1alpha1.Snapshot.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Snapshot::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.Snapshot.id)
}

// string project_name = 2 [(.improbable.logfield) = {
inline void Snapshot::clear_project_name() {
  project_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Snapshot::project_name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.Snapshot.project_name)
  return _internal_project_name();
}
inline void Snapshot::set_project_name(const std::string& value) {
  _internal_set_project_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.snapshot.v1alpha1.Snapshot.project_name)
}
inline std::string* Snapshot::mutable_project_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.Snapshot.project_name)
  return _internal_mutable_project_name();
}
inline const std::string& Snapshot::_internal_project_name() const {
  return project_name_.Get();
}
inline void Snapshot::_internal_set_project_name(const std::string& value) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Snapshot::set_project_name(std::string&& value) {
  
  project_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.snapshot.v1alpha1.Snapshot.project_name)
}
inline void Snapshot::set_project_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.snapshot.v1alpha1.Snapshot.project_name)
}
inline void Snapshot::set_project_name(const char* value,
    size_t size) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.snapshot.v1alpha1.Snapshot.project_name)
}
inline std::string* Snapshot::_internal_mutable_project_name() {
  
  return project_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Snapshot::release_project_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.Snapshot.project_name)
  return project_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Snapshot::set_allocated_project_name(std::string* project_name) {
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.Snapshot.project_name)
}
inline std::string* Snapshot::unsafe_arena_release_project_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.snapshot.v1alpha1.Snapshot.project_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return project_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Snapshot::unsafe_arena_set_allocated_project_name(
    std::string* project_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      project_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.Snapshot.project_name)
}

// string deployment_name = 3 [(.improbable.logfield) = {
inline void Snapshot::clear_deployment_name() {
  deployment_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Snapshot::deployment_name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.Snapshot.deployment_name)
  return _internal_deployment_name();
}
inline void Snapshot::set_deployment_name(const std::string& value) {
  _internal_set_deployment_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.snapshot.v1alpha1.Snapshot.deployment_name)
}
inline std::string* Snapshot::mutable_deployment_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.Snapshot.deployment_name)
  return _internal_mutable_deployment_name();
}
inline const std::string& Snapshot::_internal_deployment_name() const {
  return deployment_name_.Get();
}
inline void Snapshot::_internal_set_deployment_name(const std::string& value) {
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Snapshot::set_deployment_name(std::string&& value) {
  
  deployment_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.snapshot.v1alpha1.Snapshot.deployment_name)
}
inline void Snapshot::set_deployment_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.snapshot.v1alpha1.Snapshot.deployment_name)
}
inline void Snapshot::set_deployment_name(const char* value,
    size_t size) {
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.snapshot.v1alpha1.Snapshot.deployment_name)
}
inline std::string* Snapshot::_internal_mutable_deployment_name() {
  
  return deployment_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Snapshot::release_deployment_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.Snapshot.deployment_name)
  return deployment_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Snapshot::set_allocated_deployment_name(std::string* deployment_name) {
  if (deployment_name != nullptr) {
    
  } else {
    
  }
  deployment_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deployment_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.Snapshot.deployment_name)
}
inline std::string* Snapshot::unsafe_arena_release_deployment_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.snapshot.v1alpha1.Snapshot.deployment_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return deployment_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Snapshot::unsafe_arena_set_allocated_deployment_name(
    std::string* deployment_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (deployment_name != nullptr) {
    
  } else {
    
  }
  deployment_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      deployment_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.Snapshot.deployment_name)
}

// .google.protobuf.Timestamp create_time = 4;
inline bool Snapshot::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool Snapshot::has_create_time() const {
  return _internal_has_create_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Snapshot::_internal_create_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Snapshot::create_time() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.Snapshot.create_time)
  return _internal_create_time();
}
inline void Snapshot::unsafe_arena_set_allocated_create_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.Snapshot.create_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Snapshot::release_create_time() {
  auto temp = unsafe_arena_release_create_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Snapshot::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.Snapshot.create_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Snapshot::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_time_ = p;
  }
  return create_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Snapshot::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.Snapshot.create_time)
  return _internal_mutable_create_time();
}
inline void Snapshot::set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.Snapshot.create_time)
}

// int64 size = 5;
inline void Snapshot::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Snapshot::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Snapshot::size() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.Snapshot.size)
  return _internal_size();
}
inline void Snapshot::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void Snapshot::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.snapshot.v1alpha1.Snapshot.size)
}

// repeated string tags = 6 [(.validator.field) = {
inline int Snapshot::_internal_tags_size() const {
  return tags_.size();
}
inline int Snapshot::tags_size() const {
  return _internal_tags_size();
}
inline void Snapshot::clear_tags() {
  tags_.Clear();
}
inline std::string* Snapshot::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:improbable.spatialos.snapshot.v1alpha1.Snapshot.tags)
  return _internal_add_tags();
}
inline const std::string& Snapshot::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& Snapshot::tags(int index) const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.Snapshot.tags)
  return _internal_tags(index);
}
inline std::string* Snapshot::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.Snapshot.tags)
  return tags_.Mutable(index);
}
inline void Snapshot::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:improbable.spatialos.snapshot.v1alpha1.Snapshot.tags)
  tags_.Mutable(index)->assign(value);
}
inline void Snapshot::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:improbable.spatialos.snapshot.v1alpha1.Snapshot.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void Snapshot::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.snapshot.v1alpha1.Snapshot.tags)
}
inline void Snapshot::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.snapshot.v1alpha1.Snapshot.tags)
}
inline std::string* Snapshot::_internal_add_tags() {
  return tags_.Add();
}
inline void Snapshot::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:improbable.spatialos.snapshot.v1alpha1.Snapshot.tags)
}
inline void Snapshot::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:improbable.spatialos.snapshot.v1alpha1.Snapshot.tags)
}
inline void Snapshot::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:improbable.spatialos.snapshot.v1alpha1.Snapshot.tags)
}
inline void Snapshot::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:improbable.spatialos.snapshot.v1alpha1.Snapshot.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Snapshot::tags() const {
  // @@protoc_insertion_point(field_list:improbable.spatialos.snapshot.v1alpha1.Snapshot.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Snapshot::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:improbable.spatialos.snapshot.v1alpha1.Snapshot.tags)
  return &tags_;
}

// string download_url = 7;
inline void Snapshot::clear_download_url() {
  download_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Snapshot::download_url() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.Snapshot.download_url)
  return _internal_download_url();
}
inline void Snapshot::set_download_url(const std::string& value) {
  _internal_set_download_url(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.snapshot.v1alpha1.Snapshot.download_url)
}
inline std::string* Snapshot::mutable_download_url() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.Snapshot.download_url)
  return _internal_mutable_download_url();
}
inline const std::string& Snapshot::_internal_download_url() const {
  return download_url_.Get();
}
inline void Snapshot::_internal_set_download_url(const std::string& value) {
  
  download_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Snapshot::set_download_url(std::string&& value) {
  
  download_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.snapshot.v1alpha1.Snapshot.download_url)
}
inline void Snapshot::set_download_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  download_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.snapshot.v1alpha1.Snapshot.download_url)
}
inline void Snapshot::set_download_url(const char* value,
    size_t size) {
  
  download_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.snapshot.v1alpha1.Snapshot.download_url)
}
inline std::string* Snapshot::_internal_mutable_download_url() {
  
  return download_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Snapshot::release_download_url() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.Snapshot.download_url)
  return download_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Snapshot::set_allocated_download_url(std::string* download_url) {
  if (download_url != nullptr) {
    
  } else {
    
  }
  download_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), download_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.Snapshot.download_url)
}
inline std::string* Snapshot::unsafe_arena_release_download_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.snapshot.v1alpha1.Snapshot.download_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return download_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Snapshot::unsafe_arena_set_allocated_download_url(
    std::string* download_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (download_url != nullptr) {
    
  } else {
    
  }
  download_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      download_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.Snapshot.download_url)
}

// string checksum = 8 [(.improbable.logfield) = {
inline void Snapshot::clear_checksum() {
  checksum_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Snapshot::checksum() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.Snapshot.checksum)
  return _internal_checksum();
}
inline void Snapshot::set_checksum(const std::string& value) {
  _internal_set_checksum(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.snapshot.v1alpha1.Snapshot.checksum)
}
inline std::string* Snapshot::mutable_checksum() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.Snapshot.checksum)
  return _internal_mutable_checksum();
}
inline const std::string& Snapshot::_internal_checksum() const {
  return checksum_.Get();
}
inline void Snapshot::_internal_set_checksum(const std::string& value) {
  
  checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Snapshot::set_checksum(std::string&& value) {
  
  checksum_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.snapshot.v1alpha1.Snapshot.checksum)
}
inline void Snapshot::set_checksum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.snapshot.v1alpha1.Snapshot.checksum)
}
inline void Snapshot::set_checksum(const char* value,
    size_t size) {
  
  checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.snapshot.v1alpha1.Snapshot.checksum)
}
inline std::string* Snapshot::_internal_mutable_checksum() {
  
  return checksum_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Snapshot::release_checksum() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.Snapshot.checksum)
  return checksum_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Snapshot::set_allocated_checksum(std::string* checksum) {
  if (checksum != nullptr) {
    
  } else {
    
  }
  checksum_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checksum,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.Snapshot.checksum)
}
inline std::string* Snapshot::unsafe_arena_release_checksum() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.snapshot.v1alpha1.Snapshot.checksum)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return checksum_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Snapshot::unsafe_arena_set_allocated_checksum(
    std::string* checksum) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (checksum != nullptr) {
    
  } else {
    
  }
  checksum_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      checksum, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.Snapshot.checksum)
}

// -------------------------------------------------------------------

// ListSnapshotsRequest

// string project_name = 1 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
inline void ListSnapshotsRequest::clear_project_name() {
  project_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListSnapshotsRequest::project_name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.project_name)
  return _internal_project_name();
}
inline void ListSnapshotsRequest::set_project_name(const std::string& value) {
  _internal_set_project_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.project_name)
}
inline std::string* ListSnapshotsRequest::mutable_project_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.project_name)
  return _internal_mutable_project_name();
}
inline const std::string& ListSnapshotsRequest::_internal_project_name() const {
  return project_name_.Get();
}
inline void ListSnapshotsRequest::_internal_set_project_name(const std::string& value) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListSnapshotsRequest::set_project_name(std::string&& value) {
  
  project_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.project_name)
}
inline void ListSnapshotsRequest::set_project_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.project_name)
}
inline void ListSnapshotsRequest::set_project_name(const char* value,
    size_t size) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.project_name)
}
inline std::string* ListSnapshotsRequest::_internal_mutable_project_name() {
  
  return project_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListSnapshotsRequest::release_project_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.project_name)
  return project_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListSnapshotsRequest::set_allocated_project_name(std::string* project_name) {
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.project_name)
}
inline std::string* ListSnapshotsRequest::unsafe_arena_release_project_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.project_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return project_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListSnapshotsRequest::unsafe_arena_set_allocated_project_name(
    std::string* project_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      project_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.project_name)
}

// string deployment_name = 2 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
inline void ListSnapshotsRequest::clear_deployment_name() {
  deployment_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListSnapshotsRequest::deployment_name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.deployment_name)
  return _internal_deployment_name();
}
inline void ListSnapshotsRequest::set_deployment_name(const std::string& value) {
  _internal_set_deployment_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.deployment_name)
}
inline std::string* ListSnapshotsRequest::mutable_deployment_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.deployment_name)
  return _internal_mutable_deployment_name();
}
inline const std::string& ListSnapshotsRequest::_internal_deployment_name() const {
  return deployment_name_.Get();
}
inline void ListSnapshotsRequest::_internal_set_deployment_name(const std::string& value) {
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListSnapshotsRequest::set_deployment_name(std::string&& value) {
  
  deployment_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.deployment_name)
}
inline void ListSnapshotsRequest::set_deployment_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.deployment_name)
}
inline void ListSnapshotsRequest::set_deployment_name(const char* value,
    size_t size) {
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.deployment_name)
}
inline std::string* ListSnapshotsRequest::_internal_mutable_deployment_name() {
  
  return deployment_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListSnapshotsRequest::release_deployment_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.deployment_name)
  return deployment_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListSnapshotsRequest::set_allocated_deployment_name(std::string* deployment_name) {
  if (deployment_name != nullptr) {
    
  } else {
    
  }
  deployment_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deployment_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.deployment_name)
}
inline std::string* ListSnapshotsRequest::unsafe_arena_release_deployment_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.deployment_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return deployment_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListSnapshotsRequest::unsafe_arena_set_allocated_deployment_name(
    std::string* deployment_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (deployment_name != nullptr) {
    
  } else {
    
  }
  deployment_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      deployment_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.deployment_name)
}

// int32 page_size = 3 [(.improbable.logfield) = {
inline void ListSnapshotsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListSnapshotsRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListSnapshotsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.page_size)
  return _internal_page_size();
}
inline void ListSnapshotsRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListSnapshotsRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.page_size)
}

// string page_token = 4 [(.improbable.logfield) = {
inline void ListSnapshotsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListSnapshotsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.page_token)
  return _internal_page_token();
}
inline void ListSnapshotsRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.page_token)
}
inline std::string* ListSnapshotsRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListSnapshotsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListSnapshotsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListSnapshotsRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.page_token)
}
inline void ListSnapshotsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.page_token)
}
inline void ListSnapshotsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.page_token)
}
inline std::string* ListSnapshotsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListSnapshotsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListSnapshotsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.page_token)
}
inline std::string* ListSnapshotsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.page_token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return page_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListSnapshotsRequest::unsafe_arena_set_allocated_page_token(
    std::string* page_token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsRequest.page_token)
}

// -------------------------------------------------------------------

// ListSnapshotsResponse

// repeated .improbable.spatialos.snapshot.v1alpha1.Snapshot snapshot = 1;
inline int ListSnapshotsResponse::_internal_snapshot_size() const {
  return snapshot_.size();
}
inline int ListSnapshotsResponse::snapshot_size() const {
  return _internal_snapshot_size();
}
inline void ListSnapshotsResponse::clear_snapshot() {
  snapshot_.Clear();
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* ListSnapshotsResponse::mutable_snapshot(int index) {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsResponse.snapshot)
  return snapshot_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::snapshot::v1alpha1::Snapshot >*
ListSnapshotsResponse::mutable_snapshot() {
  // @@protoc_insertion_point(field_mutable_list:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsResponse.snapshot)
  return &snapshot_;
}
inline const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& ListSnapshotsResponse::_internal_snapshot(int index) const {
  return snapshot_.Get(index);
}
inline const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& ListSnapshotsResponse::snapshot(int index) const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsResponse.snapshot)
  return _internal_snapshot(index);
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* ListSnapshotsResponse::_internal_add_snapshot() {
  return snapshot_.Add();
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* ListSnapshotsResponse::add_snapshot() {
  // @@protoc_insertion_point(field_add:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsResponse.snapshot)
  return _internal_add_snapshot();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::improbable::spatialos::snapshot::v1alpha1::Snapshot >&
ListSnapshotsResponse::snapshot() const {
  // @@protoc_insertion_point(field_list:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsResponse.snapshot)
  return snapshot_;
}

// string next_page_token = 2;
inline void ListSnapshotsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListSnapshotsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListSnapshotsResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsResponse.next_page_token)
}
inline std::string* ListSnapshotsResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListSnapshotsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListSnapshotsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListSnapshotsResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsResponse.next_page_token)
}
inline void ListSnapshotsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsResponse.next_page_token)
}
inline void ListSnapshotsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsResponse.next_page_token)
}
inline std::string* ListSnapshotsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListSnapshotsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListSnapshotsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsResponse.next_page_token)
}
inline std::string* ListSnapshotsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsResponse.next_page_token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return next_page_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ListSnapshotsResponse::unsafe_arena_set_allocated_next_page_token(
    std::string* next_page_token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.ListSnapshotsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetSnapshotRequest

// string project_name = 1 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
inline void GetSnapshotRequest::clear_project_name() {
  project_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSnapshotRequest::project_name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.project_name)
  return _internal_project_name();
}
inline void GetSnapshotRequest::set_project_name(const std::string& value) {
  _internal_set_project_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.project_name)
}
inline std::string* GetSnapshotRequest::mutable_project_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.project_name)
  return _internal_mutable_project_name();
}
inline const std::string& GetSnapshotRequest::_internal_project_name() const {
  return project_name_.Get();
}
inline void GetSnapshotRequest::_internal_set_project_name(const std::string& value) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSnapshotRequest::set_project_name(std::string&& value) {
  
  project_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.project_name)
}
inline void GetSnapshotRequest::set_project_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.project_name)
}
inline void GetSnapshotRequest::set_project_name(const char* value,
    size_t size) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.project_name)
}
inline std::string* GetSnapshotRequest::_internal_mutable_project_name() {
  
  return project_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSnapshotRequest::release_project_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.project_name)
  return project_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSnapshotRequest::set_allocated_project_name(std::string* project_name) {
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.project_name)
}
inline std::string* GetSnapshotRequest::unsafe_arena_release_project_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.project_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return project_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetSnapshotRequest::unsafe_arena_set_allocated_project_name(
    std::string* project_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      project_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.project_name)
}

// string deployment_name = 2 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
inline void GetSnapshotRequest::clear_deployment_name() {
  deployment_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSnapshotRequest::deployment_name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.deployment_name)
  return _internal_deployment_name();
}
inline void GetSnapshotRequest::set_deployment_name(const std::string& value) {
  _internal_set_deployment_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.deployment_name)
}
inline std::string* GetSnapshotRequest::mutable_deployment_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.deployment_name)
  return _internal_mutable_deployment_name();
}
inline const std::string& GetSnapshotRequest::_internal_deployment_name() const {
  return deployment_name_.Get();
}
inline void GetSnapshotRequest::_internal_set_deployment_name(const std::string& value) {
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSnapshotRequest::set_deployment_name(std::string&& value) {
  
  deployment_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.deployment_name)
}
inline void GetSnapshotRequest::set_deployment_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.deployment_name)
}
inline void GetSnapshotRequest::set_deployment_name(const char* value,
    size_t size) {
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.deployment_name)
}
inline std::string* GetSnapshotRequest::_internal_mutable_deployment_name() {
  
  return deployment_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSnapshotRequest::release_deployment_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.deployment_name)
  return deployment_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSnapshotRequest::set_allocated_deployment_name(std::string* deployment_name) {
  if (deployment_name != nullptr) {
    
  } else {
    
  }
  deployment_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deployment_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.deployment_name)
}
inline std::string* GetSnapshotRequest::unsafe_arena_release_deployment_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.deployment_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return deployment_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetSnapshotRequest::unsafe_arena_set_allocated_deployment_name(
    std::string* deployment_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (deployment_name != nullptr) {
    
  } else {
    
  }
  deployment_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      deployment_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.deployment_name)
}

// string id = 3 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
inline void GetSnapshotRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSnapshotRequest::id() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.id)
  return _internal_id();
}
inline void GetSnapshotRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.id)
}
inline std::string* GetSnapshotRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetSnapshotRequest::_internal_id() const {
  return id_.Get();
}
inline void GetSnapshotRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSnapshotRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.id)
}
inline void GetSnapshotRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.id)
}
inline void GetSnapshotRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.id)
}
inline std::string* GetSnapshotRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSnapshotRequest::release_id() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSnapshotRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.id)
}
inline std::string* GetSnapshotRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetSnapshotRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.GetSnapshotRequest.id)
}

// -------------------------------------------------------------------

// GetSnapshotResponse

// .improbable.spatialos.snapshot.v1alpha1.Snapshot snapshot = 1;
inline bool GetSnapshotResponse::_internal_has_snapshot() const {
  return this != internal_default_instance() && snapshot_ != nullptr;
}
inline bool GetSnapshotResponse::has_snapshot() const {
  return _internal_has_snapshot();
}
inline void GetSnapshotResponse::clear_snapshot() {
  if (GetArena() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
}
inline const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& GetSnapshotResponse::_internal_snapshot() const {
  const ::improbable::spatialos::snapshot::v1alpha1::Snapshot* p = snapshot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::improbable::spatialos::snapshot::v1alpha1::Snapshot*>(
      &::improbable::spatialos::snapshot::v1alpha1::_Snapshot_default_instance_);
}
inline const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& GetSnapshotResponse::snapshot() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.GetSnapshotResponse.snapshot)
  return _internal_snapshot();
}
inline void GetSnapshotResponse::unsafe_arena_set_allocated_snapshot(
    ::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(snapshot_);
  }
  snapshot_ = snapshot;
  if (snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.GetSnapshotResponse.snapshot)
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* GetSnapshotResponse::release_snapshot() {
  auto temp = unsafe_arena_release_snapshot();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* GetSnapshotResponse::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.GetSnapshotResponse.snapshot)
  
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* temp = snapshot_;
  snapshot_ = nullptr;
  return temp;
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* GetSnapshotResponse::_internal_mutable_snapshot() {
  
  if (snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::spatialos::snapshot::v1alpha1::Snapshot>(GetArena());
    snapshot_ = p;
  }
  return snapshot_;
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* GetSnapshotResponse::mutable_snapshot() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.GetSnapshotResponse.snapshot)
  return _internal_mutable_snapshot();
}
inline void GetSnapshotResponse::set_allocated_snapshot(::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete snapshot_;
  }
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(snapshot);
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    
  } else {
    
  }
  snapshot_ = snapshot;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.GetSnapshotResponse.snapshot)
}

// -------------------------------------------------------------------

// TakeSnapshotRequest

// .improbable.spatialos.snapshot.v1alpha1.Snapshot snapshot = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool TakeSnapshotRequest::_internal_has_snapshot() const {
  return this != internal_default_instance() && snapshot_ != nullptr;
}
inline bool TakeSnapshotRequest::has_snapshot() const {
  return _internal_has_snapshot();
}
inline void TakeSnapshotRequest::clear_snapshot() {
  if (GetArena() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
}
inline const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& TakeSnapshotRequest::_internal_snapshot() const {
  const ::improbable::spatialos::snapshot::v1alpha1::Snapshot* p = snapshot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::improbable::spatialos::snapshot::v1alpha1::Snapshot*>(
      &::improbable::spatialos::snapshot::v1alpha1::_Snapshot_default_instance_);
}
inline const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& TakeSnapshotRequest::snapshot() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.TakeSnapshotRequest.snapshot)
  return _internal_snapshot();
}
inline void TakeSnapshotRequest::unsafe_arena_set_allocated_snapshot(
    ::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(snapshot_);
  }
  snapshot_ = snapshot;
  if (snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.TakeSnapshotRequest.snapshot)
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* TakeSnapshotRequest::release_snapshot() {
  auto temp = unsafe_arena_release_snapshot();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* TakeSnapshotRequest::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.TakeSnapshotRequest.snapshot)
  
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* temp = snapshot_;
  snapshot_ = nullptr;
  return temp;
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* TakeSnapshotRequest::_internal_mutable_snapshot() {
  
  if (snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::spatialos::snapshot::v1alpha1::Snapshot>(GetArena());
    snapshot_ = p;
  }
  return snapshot_;
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* TakeSnapshotRequest::mutable_snapshot() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.TakeSnapshotRequest.snapshot)
  return _internal_mutable_snapshot();
}
inline void TakeSnapshotRequest::set_allocated_snapshot(::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete snapshot_;
  }
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(snapshot);
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    
  } else {
    
  }
  snapshot_ = snapshot;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.TakeSnapshotRequest.snapshot)
}

// -------------------------------------------------------------------

// TakeSnapshotMetadata

// -------------------------------------------------------------------

// UploadSnapshotRequest

// .improbable.spatialos.snapshot.v1alpha1.Snapshot snapshot = 1 [(.google.api.field_behavior) = REQUIRED, (.validator.field) = {
inline bool UploadSnapshotRequest::_internal_has_snapshot() const {
  return this != internal_default_instance() && snapshot_ != nullptr;
}
inline bool UploadSnapshotRequest::has_snapshot() const {
  return _internal_has_snapshot();
}
inline void UploadSnapshotRequest::clear_snapshot() {
  if (GetArena() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
}
inline const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& UploadSnapshotRequest::_internal_snapshot() const {
  const ::improbable::spatialos::snapshot::v1alpha1::Snapshot* p = snapshot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::improbable::spatialos::snapshot::v1alpha1::Snapshot*>(
      &::improbable::spatialos::snapshot::v1alpha1::_Snapshot_default_instance_);
}
inline const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& UploadSnapshotRequest::snapshot() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotRequest.snapshot)
  return _internal_snapshot();
}
inline void UploadSnapshotRequest::unsafe_arena_set_allocated_snapshot(
    ::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(snapshot_);
  }
  snapshot_ = snapshot;
  if (snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotRequest.snapshot)
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* UploadSnapshotRequest::release_snapshot() {
  auto temp = unsafe_arena_release_snapshot();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* UploadSnapshotRequest::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotRequest.snapshot)
  
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* temp = snapshot_;
  snapshot_ = nullptr;
  return temp;
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* UploadSnapshotRequest::_internal_mutable_snapshot() {
  
  if (snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::spatialos::snapshot::v1alpha1::Snapshot>(GetArena());
    snapshot_ = p;
  }
  return snapshot_;
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* UploadSnapshotRequest::mutable_snapshot() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotRequest.snapshot)
  return _internal_mutable_snapshot();
}
inline void UploadSnapshotRequest::set_allocated_snapshot(::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete snapshot_;
  }
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(snapshot);
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    
  } else {
    
  }
  snapshot_ = snapshot;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotRequest.snapshot)
}

// -------------------------------------------------------------------

// UploadSnapshotResponse

// string upload_url = 1;
inline void UploadSnapshotResponse::clear_upload_url() {
  upload_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UploadSnapshotResponse::upload_url() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotResponse.upload_url)
  return _internal_upload_url();
}
inline void UploadSnapshotResponse::set_upload_url(const std::string& value) {
  _internal_set_upload_url(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotResponse.upload_url)
}
inline std::string* UploadSnapshotResponse::mutable_upload_url() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotResponse.upload_url)
  return _internal_mutable_upload_url();
}
inline const std::string& UploadSnapshotResponse::_internal_upload_url() const {
  return upload_url_.Get();
}
inline void UploadSnapshotResponse::_internal_set_upload_url(const std::string& value) {
  
  upload_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UploadSnapshotResponse::set_upload_url(std::string&& value) {
  
  upload_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotResponse.upload_url)
}
inline void UploadSnapshotResponse::set_upload_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  upload_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotResponse.upload_url)
}
inline void UploadSnapshotResponse::set_upload_url(const char* value,
    size_t size) {
  
  upload_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotResponse.upload_url)
}
inline std::string* UploadSnapshotResponse::_internal_mutable_upload_url() {
  
  return upload_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UploadSnapshotResponse::release_upload_url() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotResponse.upload_url)
  return upload_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UploadSnapshotResponse::set_allocated_upload_url(std::string* upload_url) {
  if (upload_url != nullptr) {
    
  } else {
    
  }
  upload_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), upload_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotResponse.upload_url)
}
inline std::string* UploadSnapshotResponse::unsafe_arena_release_upload_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotResponse.upload_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return upload_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UploadSnapshotResponse::unsafe_arena_set_allocated_upload_url(
    std::string* upload_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (upload_url != nullptr) {
    
  } else {
    
  }
  upload_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      upload_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotResponse.upload_url)
}

// .improbable.spatialos.snapshot.v1alpha1.Snapshot snapshot = 2;
inline bool UploadSnapshotResponse::_internal_has_snapshot() const {
  return this != internal_default_instance() && snapshot_ != nullptr;
}
inline bool UploadSnapshotResponse::has_snapshot() const {
  return _internal_has_snapshot();
}
inline void UploadSnapshotResponse::clear_snapshot() {
  if (GetArena() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
}
inline const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& UploadSnapshotResponse::_internal_snapshot() const {
  const ::improbable::spatialos::snapshot::v1alpha1::Snapshot* p = snapshot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::improbable::spatialos::snapshot::v1alpha1::Snapshot*>(
      &::improbable::spatialos::snapshot::v1alpha1::_Snapshot_default_instance_);
}
inline const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& UploadSnapshotResponse::snapshot() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotResponse.snapshot)
  return _internal_snapshot();
}
inline void UploadSnapshotResponse::unsafe_arena_set_allocated_snapshot(
    ::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(snapshot_);
  }
  snapshot_ = snapshot;
  if (snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotResponse.snapshot)
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* UploadSnapshotResponse::release_snapshot() {
  auto temp = unsafe_arena_release_snapshot();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* UploadSnapshotResponse::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotResponse.snapshot)
  
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* temp = snapshot_;
  snapshot_ = nullptr;
  return temp;
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* UploadSnapshotResponse::_internal_mutable_snapshot() {
  
  if (snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::spatialos::snapshot::v1alpha1::Snapshot>(GetArena());
    snapshot_ = p;
  }
  return snapshot_;
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* UploadSnapshotResponse::mutable_snapshot() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotResponse.snapshot)
  return _internal_mutable_snapshot();
}
inline void UploadSnapshotResponse::set_allocated_snapshot(::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete snapshot_;
  }
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(snapshot);
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    
  } else {
    
  }
  snapshot_ = snapshot;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.UploadSnapshotResponse.snapshot)
}

// -------------------------------------------------------------------

// ConfirmUploadRequest

// string project_name = 1 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
inline void ConfirmUploadRequest::clear_project_name() {
  project_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConfirmUploadRequest::project_name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.project_name)
  return _internal_project_name();
}
inline void ConfirmUploadRequest::set_project_name(const std::string& value) {
  _internal_set_project_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.project_name)
}
inline std::string* ConfirmUploadRequest::mutable_project_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.project_name)
  return _internal_mutable_project_name();
}
inline const std::string& ConfirmUploadRequest::_internal_project_name() const {
  return project_name_.Get();
}
inline void ConfirmUploadRequest::_internal_set_project_name(const std::string& value) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfirmUploadRequest::set_project_name(std::string&& value) {
  
  project_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.project_name)
}
inline void ConfirmUploadRequest::set_project_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.project_name)
}
inline void ConfirmUploadRequest::set_project_name(const char* value,
    size_t size) {
  
  project_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.project_name)
}
inline std::string* ConfirmUploadRequest::_internal_mutable_project_name() {
  
  return project_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfirmUploadRequest::release_project_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.project_name)
  return project_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfirmUploadRequest::set_allocated_project_name(std::string* project_name) {
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.project_name)
}
inline std::string* ConfirmUploadRequest::unsafe_arena_release_project_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.project_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return project_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConfirmUploadRequest::unsafe_arena_set_allocated_project_name(
    std::string* project_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (project_name != nullptr) {
    
  } else {
    
  }
  project_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      project_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.project_name)
}

// string deployment_name = 2 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
inline void ConfirmUploadRequest::clear_deployment_name() {
  deployment_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConfirmUploadRequest::deployment_name() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.deployment_name)
  return _internal_deployment_name();
}
inline void ConfirmUploadRequest::set_deployment_name(const std::string& value) {
  _internal_set_deployment_name(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.deployment_name)
}
inline std::string* ConfirmUploadRequest::mutable_deployment_name() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.deployment_name)
  return _internal_mutable_deployment_name();
}
inline const std::string& ConfirmUploadRequest::_internal_deployment_name() const {
  return deployment_name_.Get();
}
inline void ConfirmUploadRequest::_internal_set_deployment_name(const std::string& value) {
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfirmUploadRequest::set_deployment_name(std::string&& value) {
  
  deployment_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.deployment_name)
}
inline void ConfirmUploadRequest::set_deployment_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.deployment_name)
}
inline void ConfirmUploadRequest::set_deployment_name(const char* value,
    size_t size) {
  
  deployment_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.deployment_name)
}
inline std::string* ConfirmUploadRequest::_internal_mutable_deployment_name() {
  
  return deployment_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfirmUploadRequest::release_deployment_name() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.deployment_name)
  return deployment_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfirmUploadRequest::set_allocated_deployment_name(std::string* deployment_name) {
  if (deployment_name != nullptr) {
    
  } else {
    
  }
  deployment_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deployment_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.deployment_name)
}
inline std::string* ConfirmUploadRequest::unsafe_arena_release_deployment_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.deployment_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return deployment_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConfirmUploadRequest::unsafe_arena_set_allocated_deployment_name(
    std::string* deployment_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (deployment_name != nullptr) {
    
  } else {
    
  }
  deployment_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      deployment_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.deployment_name)
}

// string id = 3 [(.google.api.field_behavior) = REQUIRED, (.improbable.logfield) = {
inline void ConfirmUploadRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConfirmUploadRequest::id() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.id)
  return _internal_id();
}
inline void ConfirmUploadRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.id)
}
inline std::string* ConfirmUploadRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.id)
  return _internal_mutable_id();
}
inline const std::string& ConfirmUploadRequest::_internal_id() const {
  return id_.Get();
}
inline void ConfirmUploadRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfirmUploadRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.id)
}
inline void ConfirmUploadRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.id)
}
inline void ConfirmUploadRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.id)
}
inline std::string* ConfirmUploadRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfirmUploadRequest::release_id() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfirmUploadRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.id)
}
inline std::string* ConfirmUploadRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConfirmUploadRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadRequest.id)
}

// -------------------------------------------------------------------

// ConfirmUploadResponse

// .improbable.spatialos.snapshot.v1alpha1.Snapshot snapshot = 1;
inline bool ConfirmUploadResponse::_internal_has_snapshot() const {
  return this != internal_default_instance() && snapshot_ != nullptr;
}
inline bool ConfirmUploadResponse::has_snapshot() const {
  return _internal_has_snapshot();
}
inline void ConfirmUploadResponse::clear_snapshot() {
  if (GetArena() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
}
inline const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& ConfirmUploadResponse::_internal_snapshot() const {
  const ::improbable::spatialos::snapshot::v1alpha1::Snapshot* p = snapshot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::improbable::spatialos::snapshot::v1alpha1::Snapshot*>(
      &::improbable::spatialos::snapshot::v1alpha1::_Snapshot_default_instance_);
}
inline const ::improbable::spatialos::snapshot::v1alpha1::Snapshot& ConfirmUploadResponse::snapshot() const {
  // @@protoc_insertion_point(field_get:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadResponse.snapshot)
  return _internal_snapshot();
}
inline void ConfirmUploadResponse::unsafe_arena_set_allocated_snapshot(
    ::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(snapshot_);
  }
  snapshot_ = snapshot;
  if (snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadResponse.snapshot)
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* ConfirmUploadResponse::release_snapshot() {
  auto temp = unsafe_arena_release_snapshot();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* ConfirmUploadResponse::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_release:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadResponse.snapshot)
  
  ::improbable::spatialos::snapshot::v1alpha1::Snapshot* temp = snapshot_;
  snapshot_ = nullptr;
  return temp;
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* ConfirmUploadResponse::_internal_mutable_snapshot() {
  
  if (snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::improbable::spatialos::snapshot::v1alpha1::Snapshot>(GetArena());
    snapshot_ = p;
  }
  return snapshot_;
}
inline ::improbable::spatialos::snapshot::v1alpha1::Snapshot* ConfirmUploadResponse::mutable_snapshot() {
  // @@protoc_insertion_point(field_mutable:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadResponse.snapshot)
  return _internal_mutable_snapshot();
}
inline void ConfirmUploadResponse::set_allocated_snapshot(::improbable::spatialos::snapshot::v1alpha1::Snapshot* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete snapshot_;
  }
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(snapshot);
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    
  } else {
    
  }
  snapshot_ = snapshot;
  // @@protoc_insertion_point(field_set_allocated:improbable.spatialos.snapshot.v1alpha1.ConfirmUploadResponse.snapshot)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace snapshot
}  // namespace spatialos
}  // namespace improbable

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto
