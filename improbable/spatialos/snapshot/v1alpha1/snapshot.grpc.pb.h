// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: improbable/spatialos/snapshot/v1alpha1/snapshot.proto
// Original file comments:
// Provides methods to access Snapshots.
//
#ifndef GRPC_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto__INCLUDED
#define GRPC_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto__INCLUDED

#include "improbable/spatialos/snapshot/v1alpha1/snapshot.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace improbable {
namespace spatialos {
namespace snapshot {
namespace v1alpha1 {

// SnapshotService provides methods for managing snapshots.
class SnapshotService final {
 public:
  static constexpr char const* service_full_name() {
    return "improbable.spatialos.snapshot.v1alpha1.SnapshotService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists snapshots under a deployment. By default, snapshots are sorted by creation time
    // (descending).
    virtual ::grpc::Status ListSnapshots(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest& request, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse>> AsyncListSnapshots(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse>>(AsyncListSnapshotsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse>> PrepareAsyncListSnapshots(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse>>(PrepareAsyncListSnapshotsRaw(context, request, cq));
    }
    // Gets a snapshot.
    virtual ::grpc::Status GetSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest& request, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse>> AsyncGetSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse>>(AsyncGetSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse>> PrepareAsyncGetSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse>>(PrepareAsyncGetSnapshotRaw(context, request, cq));
    }
    // Takes a snapshot. You can only take snapshots of running deployments.
    //
    // The returned operation result is of type `snapshot` upon successfully taking a snapshot.
    virtual ::grpc::Status TakeSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncTakeSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncTakeSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncTakeSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncTakeSnapshotRaw(context, request, cq));
    }
    // Allocates space and returns a URL to upload a snapshot to.
    virtual ::grpc::Status UploadSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest& request, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse>> AsyncUploadSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse>>(AsyncUploadSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse>> PrepareAsyncUploadSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse>>(PrepareAsyncUploadSnapshotRaw(context, request, cq));
    }
    // Confirms that a snapshot is uploaded to the URL allocated by the `UploadSnapshot` RPC and makes
    // it available for use in a deployment.
    virtual ::grpc::Status ConfirmUpload(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest& request, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse>> AsyncConfirmUpload(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse>>(AsyncConfirmUploadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse>> PrepareAsyncConfirmUpload(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse>>(PrepareAsyncConfirmUploadRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Lists snapshots under a deployment. By default, snapshots are sorted by creation time
      // (descending).
      virtual void ListSnapshots(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest* request, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListSnapshots(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListSnapshots(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest* request, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListSnapshots(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest* request, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListSnapshots(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListSnapshots(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Gets a snapshot.
      virtual void GetSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest* request, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest* request, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest* request, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Takes a snapshot. You can only take snapshots of running deployments.
      //
      // The returned operation result is of type `snapshot` upon successfully taking a snapshot.
      virtual void TakeSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TakeSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TakeSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TakeSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest* request, ::google::longrunning::Operation* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TakeSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TakeSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::longrunning::Operation* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Allocates space and returns a URL to upload a snapshot to.
      virtual void UploadSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest* request, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UploadSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UploadSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest* request, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UploadSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest* request, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UploadSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UploadSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Confirms that a snapshot is uploaded to the URL allocated by the `UploadSnapshot` RPC and makes
      // it available for use in a deployment.
      virtual void ConfirmUpload(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest* request, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConfirmUpload(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ConfirmUpload(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest* request, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ConfirmUpload(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest* request, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ConfirmUpload(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ConfirmUpload(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse>* AsyncListSnapshotsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse>* PrepareAsyncListSnapshotsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse>* AsyncGetSnapshotRaw(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse>* PrepareAsyncGetSnapshotRaw(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncTakeSnapshotRaw(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncTakeSnapshotRaw(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse>* AsyncUploadSnapshotRaw(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse>* PrepareAsyncUploadSnapshotRaw(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse>* AsyncConfirmUploadRaw(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse>* PrepareAsyncConfirmUploadRaw(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListSnapshots(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest& request, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse>> AsyncListSnapshots(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse>>(AsyncListSnapshotsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse>> PrepareAsyncListSnapshots(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse>>(PrepareAsyncListSnapshotsRaw(context, request, cq));
    }
    ::grpc::Status GetSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest& request, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse>> AsyncGetSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse>>(AsyncGetSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse>> PrepareAsyncGetSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse>>(PrepareAsyncGetSnapshotRaw(context, request, cq));
    }
    ::grpc::Status TakeSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncTakeSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncTakeSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncTakeSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncTakeSnapshotRaw(context, request, cq));
    }
    ::grpc::Status UploadSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest& request, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse>> AsyncUploadSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse>>(AsyncUploadSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse>> PrepareAsyncUploadSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse>>(PrepareAsyncUploadSnapshotRaw(context, request, cq));
    }
    ::grpc::Status ConfirmUpload(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest& request, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse>> AsyncConfirmUpload(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse>>(AsyncConfirmUploadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse>> PrepareAsyncConfirmUpload(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse>>(PrepareAsyncConfirmUploadRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ListSnapshots(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest* request, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListSnapshots(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListSnapshots(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest* request, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListSnapshots(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest* request, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListSnapshots(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListSnapshots(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest* request, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest* request, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest* request, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void TakeSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void TakeSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TakeSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TakeSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest* request, ::google::longrunning::Operation* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TakeSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TakeSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::longrunning::Operation* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UploadSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest* request, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* response, std::function<void(::grpc::Status)>) override;
      void UploadSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UploadSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest* request, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UploadSnapshot(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest* request, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UploadSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UploadSnapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ConfirmUpload(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest* request, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* response, std::function<void(::grpc::Status)>) override;
      void ConfirmUpload(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ConfirmUpload(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest* request, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ConfirmUpload(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest* request, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ConfirmUpload(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ConfirmUpload(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse>* AsyncListSnapshotsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse>* PrepareAsyncListSnapshotsRaw(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse>* AsyncGetSnapshotRaw(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse>* PrepareAsyncGetSnapshotRaw(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncTakeSnapshotRaw(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncTakeSnapshotRaw(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse>* AsyncUploadSnapshotRaw(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse>* PrepareAsyncUploadSnapshotRaw(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse>* AsyncConfirmUploadRaw(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse>* PrepareAsyncConfirmUploadRaw(::grpc::ClientContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListSnapshots_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSnapshot_;
    const ::grpc::internal::RpcMethod rpcmethod_TakeSnapshot_;
    const ::grpc::internal::RpcMethod rpcmethod_UploadSnapshot_;
    const ::grpc::internal::RpcMethod rpcmethod_ConfirmUpload_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists snapshots under a deployment. By default, snapshots are sorted by creation time
    // (descending).
    virtual ::grpc::Status ListSnapshots(::grpc::ServerContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest* request, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* response);
    // Gets a snapshot.
    virtual ::grpc::Status GetSnapshot(::grpc::ServerContext* context, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest* request, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* response);
    // Takes a snapshot. You can only take snapshots of running deployments.
    //
    // The returned operation result is of type `snapshot` upon successfully taking a snapshot.
    virtual ::grpc::Status TakeSnapshot(::grpc::ServerContext* context, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest* request, ::google::longrunning::Operation* response);
    // Allocates space and returns a URL to upload a snapshot to.
    virtual ::grpc::Status UploadSnapshot(::grpc::ServerContext* context, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest* request, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* response);
    // Confirms that a snapshot is uploaded to the URL allocated by the `UploadSnapshot` RPC and makes
    // it available for use in a deployment.
    virtual ::grpc::Status ConfirmUpload(::grpc::ServerContext* context, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest* request, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListSnapshots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListSnapshots() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListSnapshots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSnapshots(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSnapshots(::grpc::ServerContext* context, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest* request, ::grpc::ServerAsyncResponseWriter< ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSnapshot() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSnapshot(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSnapshot(::grpc::ServerContext* context, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest* request, ::grpc::ServerAsyncResponseWriter< ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TakeSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TakeSnapshot() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_TakeSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TakeSnapshot(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTakeSnapshot(::grpc::ServerContext* context, ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadSnapshot() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UploadSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadSnapshot(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadSnapshot(::grpc::ServerContext* context, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest* request, ::grpc::ServerAsyncResponseWriter< ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConfirmUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConfirmUpload() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ConfirmUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfirmUpload(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfirmUpload(::grpc::ServerContext* context, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest* request, ::grpc::ServerAsyncResponseWriter< ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListSnapshots<WithAsyncMethod_GetSnapshot<WithAsyncMethod_TakeSnapshot<WithAsyncMethod_UploadSnapshot<WithAsyncMethod_ConfirmUpload<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListSnapshots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListSnapshots() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest* request, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* response) { return this->ListSnapshots(context, request, response); }));}
    void SetMessageAllocatorFor_ListSnapshots(
        ::grpc::experimental::MessageAllocator< ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListSnapshots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSnapshots(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListSnapshots(
      ::grpc::CallbackServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListSnapshots(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetSnapshot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest* request, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* response) { return this->GetSnapshot(context, request, response); }));}
    void SetMessageAllocatorFor_GetSnapshot(
        ::grpc::experimental::MessageAllocator< ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSnapshot(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSnapshot(
      ::grpc::CallbackServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSnapshot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TakeSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TakeSnapshot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest, ::google::longrunning::Operation>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest* request, ::google::longrunning::Operation* response) { return this->TakeSnapshot(context, request, response); }));}
    void SetMessageAllocatorFor_TakeSnapshot(
        ::grpc::experimental::MessageAllocator< ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest, ::google::longrunning::Operation>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest, ::google::longrunning::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TakeSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TakeSnapshot(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TakeSnapshot(
      ::grpc::CallbackServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest* /*request*/, ::google::longrunning::Operation* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TakeSnapshot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest* /*request*/, ::google::longrunning::Operation* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UploadSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UploadSnapshot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest* request, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* response) { return this->UploadSnapshot(context, request, response); }));}
    void SetMessageAllocatorFor_UploadSnapshot(
        ::grpc::experimental::MessageAllocator< ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UploadSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadSnapshot(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UploadSnapshot(
      ::grpc::CallbackServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UploadSnapshot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ConfirmUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ConfirmUpload() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest* request, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* response) { return this->ConfirmUpload(context, request, response); }));}
    void SetMessageAllocatorFor_ConfirmUpload(
        ::grpc::experimental::MessageAllocator< ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ConfirmUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfirmUpload(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ConfirmUpload(
      ::grpc::CallbackServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ConfirmUpload(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ListSnapshots<ExperimentalWithCallbackMethod_GetSnapshot<ExperimentalWithCallbackMethod_TakeSnapshot<ExperimentalWithCallbackMethod_UploadSnapshot<ExperimentalWithCallbackMethod_ConfirmUpload<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ListSnapshots<ExperimentalWithCallbackMethod_GetSnapshot<ExperimentalWithCallbackMethod_TakeSnapshot<ExperimentalWithCallbackMethod_UploadSnapshot<ExperimentalWithCallbackMethod_ConfirmUpload<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListSnapshots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListSnapshots() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListSnapshots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSnapshots(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSnapshot() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSnapshot(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TakeSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TakeSnapshot() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_TakeSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TakeSnapshot(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UploadSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadSnapshot() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UploadSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadSnapshot(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConfirmUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConfirmUpload() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ConfirmUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfirmUpload(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListSnapshots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListSnapshots() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListSnapshots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSnapshots(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSnapshots(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSnapshot() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSnapshot(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSnapshot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TakeSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TakeSnapshot() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_TakeSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TakeSnapshot(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTakeSnapshot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadSnapshot() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UploadSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadSnapshot(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadSnapshot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConfirmUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConfirmUpload() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ConfirmUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfirmUpload(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfirmUpload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListSnapshots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListSnapshots() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListSnapshots(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListSnapshots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSnapshots(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListSnapshots(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListSnapshots(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSnapshot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSnapshot(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSnapshot(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSnapshot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSnapshot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TakeSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TakeSnapshot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TakeSnapshot(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TakeSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TakeSnapshot(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TakeSnapshot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TakeSnapshot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UploadSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UploadSnapshot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UploadSnapshot(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UploadSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadSnapshot(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UploadSnapshot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UploadSnapshot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ConfirmUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ConfirmUpload() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ConfirmUpload(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ConfirmUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConfirmUpload(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ConfirmUpload(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ConfirmUpload(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListSnapshots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListSnapshots() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse>(std::bind(&WithStreamedUnaryMethod_ListSnapshots<BaseClass>::StreamedListSnapshots, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListSnapshots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListSnapshots(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListSnapshots(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsRequest,::improbable::spatialos::snapshot::v1alpha1::ListSnapshotsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSnapshot() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse>(std::bind(&WithStreamedUnaryMethod_GetSnapshot<BaseClass>::StreamedGetSnapshot, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSnapshot(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSnapshot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::improbable::spatialos::snapshot::v1alpha1::GetSnapshotRequest,::improbable::spatialos::snapshot::v1alpha1::GetSnapshotResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TakeSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TakeSnapshot() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_TakeSnapshot<BaseClass>::StreamedTakeSnapshot, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TakeSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TakeSnapshot(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTakeSnapshot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::improbable::spatialos::snapshot::v1alpha1::TakeSnapshotRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UploadSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UploadSnapshot() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse>(std::bind(&WithStreamedUnaryMethod_UploadSnapshot<BaseClass>::StreamedUploadSnapshot, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UploadSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UploadSnapshot(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUploadSnapshot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotRequest,::improbable::spatialos::snapshot::v1alpha1::UploadSnapshotResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConfirmUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConfirmUpload() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse>(std::bind(&WithStreamedUnaryMethod_ConfirmUpload<BaseClass>::StreamedConfirmUpload, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ConfirmUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConfirmUpload(::grpc::ServerContext* /*context*/, const ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest* /*request*/, ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConfirmUpload(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadRequest,::improbable::spatialos::snapshot::v1alpha1::ConfirmUploadResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListSnapshots<WithStreamedUnaryMethod_GetSnapshot<WithStreamedUnaryMethod_TakeSnapshot<WithStreamedUnaryMethod_UploadSnapshot<WithStreamedUnaryMethod_ConfirmUpload<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListSnapshots<WithStreamedUnaryMethod_GetSnapshot<WithStreamedUnaryMethod_TakeSnapshot<WithStreamedUnaryMethod_UploadSnapshot<WithStreamedUnaryMethod_ConfirmUpload<Service > > > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace snapshot
}  // namespace spatialos
}  // namespace improbable


#endif  // GRPC_improbable_2fspatialos_2fsnapshot_2fv1alpha1_2fsnapshot_2eproto__INCLUDED
